import * as t from 'io-ts';
export declare const ReportedTestItemSchema: t.ReadonlyC<t.ExactC<t.TypeC<{
    id: t.BrandC<t.StringC, import("./common").MaxLengthString<10>>;
    name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
    skip: t.BooleanC;
}>>>;
export declare type ReportedTestItem = t.TypeOf<typeof ReportedTestItemSchema>;
export declare const ReportedFixtureItemSchema: t.ReadonlyC<t.ExactC<t.TypeC<{
    id: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
    name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
    tests: t.ArrayC<t.ReadonlyC<t.ExactC<t.TypeC<{
        id: t.BrandC<t.StringC, import("./common").MaxLengthString<10>>;
        name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
        skip: t.BooleanC;
    }>>>>;
}>>>;
export declare type ReportedFixtureItem = t.TypeOf<typeof ReportedFixtureItemSchema>;
export declare const ReportedTestStructureItemSchema: t.ReadonlyC<t.ExactC<t.TypeC<{
    fixture: t.ReadonlyC<t.ExactC<t.TypeC<{
        id: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
        name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
        tests: t.ArrayC<t.ReadonlyC<t.ExactC<t.TypeC<{
            id: t.BrandC<t.StringC, import("./common").MaxLengthString<10>>;
            name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
            skip: t.BooleanC;
        }>>>>;
    }>>>;
}>>>;
export declare type ReportedTestStructureItem = t.TypeOf<typeof ReportedTestStructureItemSchema>;
export declare const CIInfoSchema: t.ReadonlyC<t.ExactC<t.PartialC<{
    commitSHA: t.StringC;
    author: t.StringC;
    branchName: t.StringC;
}>>>;
export declare type CIInfo = t.TypeOf<typeof CIInfoSchema>;
export declare const TaskStartArgsSchema: t.ReadonlyC<t.ExactC<t.TypeC<{
    startTime: import("io-ts-types").DateFromISOStringC;
    userAgents: t.ArrayC<t.StringC>;
    testCount: t.NumberC;
    buildId: t.UnionC<[t.BrandC<t.StringC, import("./common").MaxLengthString<100>>, t.UndefinedC]>;
    taskStructure: t.ArrayC<t.ReadonlyC<t.ExactC<t.TypeC<{
        fixture: t.ReadonlyC<t.ExactC<t.TypeC<{
            id: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
            name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
            tests: t.ArrayC<t.ReadonlyC<t.ExactC<t.TypeC<{
                id: t.BrandC<t.StringC, import("./common").MaxLengthString<10>>;
                name: t.BrandC<t.StringC, import("./common").MaxLengthString<300>>;
                skip: t.BooleanC;
            }>>>>;
        }>>>;
    }>>>>;
    ciInfo: t.UnionC<[t.UndefinedC, t.ReadonlyC<t.ExactC<t.PartialC<{
        commitSHA: t.StringC;
        author: t.StringC;
        branchName: t.StringC;
    }>>>]>;
}>>>;
export declare type TaskStartArgs = t.TypeOf<typeof TaskStartArgsSchema>;
