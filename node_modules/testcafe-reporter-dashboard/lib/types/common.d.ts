import * as t from 'io-ts';
export interface MaxLengthString<N> {
    readonly MaxLengthString: unique symbol;
    readonly length: N;
}
export declare const MaxLengthString: <N extends number>(len: N) => t.BrandC<t.StringC, MaxLengthString<N>>;
export declare const AggregateId: t.BrandC<t.StringC, MaxLengthString<190>>;
export declare const ShortIdSchema: t.BrandC<t.StringC, MaxLengthString<10>>;
export declare type ShortId = t.TypeOf<typeof ShortIdSchema>;
export declare const NameSchema: t.BrandC<t.StringC, MaxLengthString<300>>;
export declare type Name = t.TypeOf<typeof NameSchema>;
export declare const BuildIdSchema: t.UnionC<[t.BrandC<t.StringC, MaxLengthString<100>>, t.UndefinedC]>;
export declare type BuildId = t.TypeOf<typeof BuildIdSchema>;
export declare type ReporterPluginOptions = {
    url?: string;
    token?: string;
    buildId?: string;
    noScreenshotUpload?: boolean;
    noVideoUpload?: boolean;
    isLogEnabled?: boolean;
    requestRetryCount?: number;
    responseTimeout?: number;
};
