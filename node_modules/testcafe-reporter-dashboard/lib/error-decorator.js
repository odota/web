"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorDecorator = exports.curly = void 0;
const empty = () => '';
const raw = (str) => str;
const removeTrailingComma = (str) => {
    str = str.trimEnd();
    return str.endsWith(',') ? str.substring(0, str.length - 1) : str;
};
exports.curly = (str) => `{${removeTrailingComma(str)}}`;
const squared = (str) => `[${removeTrailingComma(str)}]`;
const escaped = (str) => `"${str.replace(/\//g, '\/')
    .replace(/\\/g, '\\\\')
    .replace(/\t/g, '\\t')
    .replace(/[\b]/g, '\\b')
    .replace(/\r/g, '\\r')
    .replace(/\n/g, '\\n')
    .replace(/\"/g, '\\"')}"`;
const comma = (modifier) => (str) => `${modifier(str)}, `;
const element = (modifier) => (name) => comma((str) => `"${name}": ${modifier(str)}`);
const escapedElement = element(escaped);
const squaredElement = element(squared);
function errorDecorator() {
    return {
        'span user-agent': escapedElement('user-agent'),
        'span subtitle': escapedElement('subtitle'),
        'div message': escapedElement('message'),
        'div screenshot-info': escapedElement('screenshot-info'),
        'a screenshot-path': escapedElement('screenshot-path'),
        'code': escapedElement('code'),
        'span syntax-string': raw,
        'span syntax-punctuator': raw,
        'span syntax-keyword': raw,
        'span syntax-number': raw,
        'span syntax-regex': raw,
        'span syntax-comment': raw,
        'span syntax-invalid': raw,
        'div code-frame': squaredElement('codeframe'),
        'div code-line': comma(exports.curly),
        'div code-line-last': comma(exports.curly),
        'div code-line-num': element((str) => exports.curly(escapedElement('num')(str)))('line'),
        'div code-line-num-base': element((str) => exports.curly(`${escapedElement('num')(str)}"base": "True"`))('line'),
        'div code-line-src': escapedElement('code'),
        'div stack': squaredElement('callstack'),
        'div stack-line': comma(exports.curly),
        'div stack-line-last': comma(exports.curly),
        'div stack-line-name': escapedElement('name'),
        'div stack-line-location': escapedElement('location'),
        'strong': empty,
        'a': raw
    };
}
exports.errorDecorator = errorDecorator;
