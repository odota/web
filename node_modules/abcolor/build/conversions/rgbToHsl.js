'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utility = require('../utility');

exports.default = function (rgb) {
  var css = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (rgb && (0, _utility.aTri)(rgb)) {
    var _rgb$map = rgb.map(function (val) {
      return val / 255;
    }),
        _rgb$map2 = _slicedToArray(_rgb$map, 3),
        r = _rgb$map2[0],
        g = _rgb$map2[1],
        b = _rgb$map2[2];

    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var diff = max - min;

    var h = 0;
    var s = 0;

    var l = (max + min) / 2;

    if (diff !== 0) {
      switch (max) {
        case r:
          h = 60 * ((g - b) / diff % 6);
          break;
        case g:
          h = 60 * ((b - r) / diff + 2);
          break;
        default:
          h = 60 * ((r - g) / diff + 4);
      }

      s = diff / (1 - Math.abs(2 * l - 1));
    }

    var hsl = [h, s * 100, l * 100].map(function (val) {
      return Number(val.toFixed(2));
    });

    return css === true ? (0, _utility.formatHsl)(hsl) : hsl;
  }

  throw new Error('Input must be an array of RGB decimals');
};