'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _utility = require('./utility');

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _hexToRgb = require('./conversions/hexToRgb');

var _hexToRgb2 = _interopRequireDefault(_hexToRgb);

var _rgbToHsl = require('./conversions/rgbToHsl');

var _rgbToHsl2 = _interopRequireDefault(_rgbToHsl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var process小olor = function process小olor(stage, options, o) {
  var res = stage === 'from' && _colors2.default.red[o.model] || stage === 'to' && _colors2.default.green[o.model];

  if (options && options[stage]) {
    res = options[stage];

    if ((0, _utility.aHex)(res)) {
      res = (0, _hexToRgb2.default)(res);
    }
    if ((0, _utility.aTri)(res) && o.model === 'hsl') {
      res = (0, _rgbToHsl2.default)(res);
    }
  }

  return res;
};

exports.default = function (percent, options) {
  if (percent !== undefined && percent >= 0 && percent <= 100 && (0, _utility.isNumeric)(percent)) {
    if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      var _ret = function () {
        var o = {};

        o.model = options && options.model && /^(rgb)$/.test((0, _utility.lc)(options.model)) ? (0, _utility.lc)(options.model) : 'hsl';

        o.from = process小olor('from', options, o);
        o.to = process小olor('to', options, o);

        o.css = options && options.css && options.css === true;

        var from = o.from,
            to = o.to;

        var diff = from.map(function (val, i) {
          return Math.abs(to[i] - from[i]) * percent / 100;
        });
        var color = diff.map(function (val, i) {
          return Number((from[i] > to[i] ? from[i] - val : from[i] + val).toFixed(o.model === 'rgb' ? 0 : 2));
        });

        var result = color;

        if (o.css === true) {
          if (o.model === 'hsl') {
            result = (0, _utility.formatHsl)(color);
          } else if (o.model === 'rgb') {
            result = (0, _utility.formatRgb)(color);
          }
        }

        return {
          v: result
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    throw new TypeError('Wrong 2nd param (Options must be an object)');
  }

  throw new TypeError('Wrong 1st param (Percent must be a number, 0 - 100 range)');
};