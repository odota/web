"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BooleanFromString = void 0;
/**
 * @since 0.5.0
 */
var t = __importStar(require("io-ts"));
var pipeable_1 = require("fp-ts/lib/pipeable");
var Either_1 = require("fp-ts/lib/Either");
/**
 * @example
 * import { BooleanFromString } from 'io-ts-types/lib/BooleanFromString'
 * import { right } from 'fp-ts/lib/Either'
 * import { PathReporter } from 'io-ts/lib/PathReporter'
 *
 * assert.deepStrictEqual(BooleanFromString.decode('true'), right(true))
 * assert.deepStrictEqual(BooleanFromString.decode('false'), right(false))
 * assert.deepStrictEqual(PathReporter.report(BooleanFromString.decode('a')), ['Invalid value "a" supplied to : BooleanFromString'])
 *
 * @since 0.5.0
 */
exports.BooleanFromString = new t.Type('BooleanFromString', t.boolean.is, function (u, c) {
    return pipeable_1.pipe(t.string.validate(u, c), Either_1.chain(function (s) { return (s === 'true' ? t.success(true) : s === 'false' ? t.success(false) : t.failure(u, c)); }));
}, String);
