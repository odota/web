{"version":3,"file":"polyfill.es6.min.js","sources":["../src/stub/symbol.js","../src/stub/number-isinteger.js","../src/utils.js","../src/stub/number-isnan.js","../spec/reference-implementation/lib/helpers.js","../src/stub/helpers.js","../src/stub/assert.js","../spec/reference-implementation/lib/utils.js","../spec/reference-implementation/lib/queue-with-sizes.js","../spec/reference-implementation/lib/writable-stream.js","../spec/reference-implementation/lib/readable-stream.js","../spec/reference-implementation/lib/byte-length-queuing-strategy.js","../spec/reference-implementation/lib/count-queuing-strategy.js","../spec/reference-implementation/lib/transform-stream.js","../src/polyfill.js"],"sourcesContent":["const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n  Symbol :\n  description => `Symbol(${description})`;\n\nexport default SymbolPolyfill;\n","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Polyfill\nconst NumberIsInteger = Number.isInteger || function (value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\nexport default NumberIsInteger;\n","export function noop() {\n  // do nothing\n}\n\nfunction getGlobals() {\n  /* global self, window, global */\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","'use strict';\r\nconst assert = require('better-assert');\r\n\r\nconst isFakeDetached = Symbol('is \"detached\" for our purposes');\r\n\r\nfunction IsPropertyKey(argument) {\r\n  return typeof argument === 'string' || typeof argument === 'symbol';\r\n}\r\n\r\nexports.typeIsObject = x => (typeof x === 'object' && x !== null) || typeof x === 'function';\r\n\r\nexports.createDataProperty = (o, p, v) => {\r\n  assert(exports.typeIsObject(o));\r\n  Object.defineProperty(o, p, { value: v, writable: true, enumerable: true, configurable: true });\r\n};\r\n\r\nexports.createArrayFromList = elements => {\r\n  // We use arrays to represent lists, so this is basically a no-op.\r\n  // Do a slice though just in case we happen to depend on the unique-ness.\r\n  return elements.slice();\r\n};\r\n\r\nexports.ArrayBufferCopy = (dest, destOffset, src, srcOffset, n) => {\r\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\r\n};\r\n\r\nexports.IsFiniteNonNegativeNumber = v => {\r\n  if (exports.IsNonNegativeNumber(v) === false) {\r\n    return false;\r\n  }\r\n\r\n  if (v === Infinity) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexports.IsNonNegativeNumber = v => {\r\n  if (typeof v !== 'number') {\r\n    return false;\r\n  }\r\n\r\n  if (Number.isNaN(v)) {\r\n    return false;\r\n  }\r\n\r\n  if (v < 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction Call(F, V, args) {\r\n  if (typeof F !== 'function') {\r\n    throw new TypeError('Argument is not a function');\r\n  }\r\n\r\n  return Function.prototype.apply.call(F, V, args);\r\n}\r\n\r\nexports.Call = Call;\r\n\r\nexports.CreateAlgorithmFromUnderlyingMethod = (underlyingObject, methodName, algoArgCount, extraArgs) => {\r\n  assert(underlyingObject !== undefined);\r\n  assert(IsPropertyKey(methodName));\r\n  assert(algoArgCount === 0 || algoArgCount === 1);\r\n  assert(Array.isArray(extraArgs));\r\n  const method = underlyingObject[methodName];\r\n  if (method !== undefined) {\r\n    if (typeof method !== 'function') {\r\n      throw new TypeError(`${method} is not a method`);\r\n    }\r\n    switch (algoArgCount) {\r\n      case 0: {\r\n        return () => {\r\n          return PromiseCall(method, underlyingObject, extraArgs);\r\n        };\r\n      }\r\n\r\n      case 1: {\r\n        return arg => {\r\n          const fullArgs = [arg].concat(extraArgs);\r\n          return PromiseCall(method, underlyingObject, fullArgs);\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return () => Promise.resolve();\r\n};\r\n\r\nexports.InvokeOrNoop = (O, P, args) => {\r\n  assert(O !== undefined);\r\n  assert(IsPropertyKey(P));\r\n  assert(Array.isArray(args));\r\n\r\n  const method = O[P];\r\n  if (method === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  return Call(method, O, args);\r\n};\r\n\r\nfunction PromiseCall(F, V, args) {\r\n  assert(typeof F === 'function');\r\n  assert(V !== undefined);\r\n  assert(Array.isArray(args));\r\n  try {\r\n    return Promise.resolve(Call(F, V, args));\r\n  } catch (value) {\r\n    return Promise.reject(value);\r\n  }\r\n}\r\n\r\nexports.PromiseCall = PromiseCall;\r\n\r\n// Not implemented correctly\r\nexports.TransferArrayBuffer = O => {\r\n  assert(!exports.IsDetachedBuffer(O));\r\n  const transferredIshVersion = O.slice();\r\n\r\n  // This is specifically to fool tests that test \"is transferred\" by taking a non-zero-length\r\n  // ArrayBuffer and checking if its byteLength starts returning 0.\r\n  Object.defineProperty(O, 'byteLength', {\r\n    get() {\r\n      return 0;\r\n    }\r\n  });\r\n  O[isFakeDetached] = true;\r\n\r\n  return transferredIshVersion;\r\n};\r\n\r\n// Not implemented correctly\r\nexports.IsDetachedBuffer = O => {\r\n  return isFakeDetached in O;\r\n};\r\n\r\nexports.ValidateAndNormalizeHighWaterMark = highWaterMark => {\r\n  highWaterMark = Number(highWaterMark);\r\n  if (Number.isNaN(highWaterMark) || highWaterMark < 0) {\r\n    throw new RangeError('highWaterMark property of a queuing strategy must be non-negative and non-NaN');\r\n  }\r\n\r\n  return highWaterMark;\r\n};\r\n\r\nexports.MakeSizeAlgorithmFromSizeFunction = size => {\r\n  if (size === undefined) {\r\n    return () => 1;\r\n  }\r\n  if (typeof size !== 'function') {\r\n    throw new TypeError('size property of a queuing strategy must be a function');\r\n  }\r\n  return chunk => size(chunk);\r\n};\r\n\r\nexports.PerformPromiseThen = (promise, onFulfilled, onRejected) => {\r\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\r\n  // approximation.\r\n  return Promise.prototype.then.call(promise, onFulfilled, onRejected);\r\n};\r\n\r\nexports.WaitForAll = (promises, successSteps, failureSteps) => {\r\n  let rejected = false;\r\n  const rejectionHandler = arg => {\r\n    if (rejected === false) {\r\n      rejected = true;\r\n      failureSteps(arg);\r\n    }\r\n  };\r\n  let index = 0;\r\n  let fulfilledCount = 0;\r\n  const total = promises.length;\r\n  const result = new Array(total);\r\n  for (const promise of promises) {\r\n    const promiseIndex = index;\r\n    const fulfillmentHandler = arg => {\r\n      result[promiseIndex] = arg;\r\n      ++fulfilledCount;\r\n      if (fulfilledCount === total) {\r\n        successSteps(result);\r\n      }\r\n    };\r\n    exports.PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\r\n    ++index;\r\n  }\r\n};\r\n\r\nexports.WaitForAllPromise = (promises, successSteps, failureSteps = undefined) => {\r\n  let resolvePromise;\r\n  let rejectPromise;\r\n  const promise = new Promise((resolve, reject) => {\r\n    resolvePromise = resolve;\r\n    rejectPromise = reject;\r\n  });\r\n  if (failureSteps === undefined) {\r\n    failureSteps = arg => {\r\n      throw arg;\r\n    };\r\n  }\r\n  const successStepsWrapper = results => {\r\n    try {\r\n      const stepsResult = successSteps(results);\r\n      resolvePromise(stepsResult);\r\n    } catch (e) {\r\n      rejectPromise(e);\r\n    }\r\n  };\r\n  const failureStepsWrapper = reason => {\r\n    try {\r\n      const stepsResult = failureSteps(reason);\r\n      resolvePromise(stepsResult);\r\n    } catch (e) {\r\n      rejectPromise(e);\r\n    }\r\n  };\r\n  exports.WaitForAll(promises, successStepsWrapper, failureStepsWrapper);\r\n  return promise;\r\n};\r\n","export {\n  typeIsObject,\n  createDataProperty,\n  createArrayFromList,\n  ArrayBufferCopy,\n  IsFiniteNonNegativeNumber,\n  IsNonNegativeNumber,\n  Call,\n  CreateAlgorithmFromUnderlyingMethod,\n  InvokeOrNoop,\n  PromiseCall,\n  ValidateAndNormalizeHighWaterMark,\n  MakeSizeAlgorithmFromSizeFunction,\n  PerformPromiseThen,\n  WaitForAll,\n  WaitForAllPromise\n} from '../../spec/reference-implementation/lib/helpers';\n\n// Not implemented correctly\nexport function TransferArrayBuffer(O) {\n  return O;\n}\n\n// Not implemented correctly\nexport function IsDetachedBuffer(O) { // eslint-disable-line no-unused-vars\n  return false;\n}\n","import { noop } from '../utils';\n\nexport default function assert() {\n  // do nothing\n}\n\nassert.AssertionError = noop;\n","'use strict';\nconst assert = require('assert');\n\nexports.rethrowAssertionErrorRejection = e => {\n  // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n  // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n  // expect any errors, but assertion errors are always problematic.\n  if (e && e instanceof assert.AssertionError) {\n    setTimeout(() => {\n      throw e;\n    }, 0);\n  }\n};\n","'use strict';\nconst assert = require('better-assert');\nconst { IsFiniteNonNegativeNumber } = require('./helpers.js');\n\nexports.DequeueValue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift();\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n};\n\nexports.EnqueueValueWithSize = (container, value, size) => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  size = Number(size);\n  if (!IsFiniteNonNegativeNumber(size)) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n};\n\nexports.PeekQueueValue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue[0];\n  return pair.value;\n};\n\nexports.ResetQueue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = [];\n  container._queueTotalSize = 0;\n};\n","'use strict';\nconst assert = require('better-assert');\n\n// Calls to verbose() are purely for debugging the reference implementation and tests. They are not part of the standard\n// and do not appear in the standard text.\nconst verbose = require('debug')('streams:writable-stream:verbose');\n\nconst { CreateAlgorithmFromUnderlyingMethod, InvokeOrNoop, ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction, typeIsObject } = require('./helpers.js');\nconst { rethrowAssertionErrorRejection } = require('./utils.js');\nconst { DequeueValue, EnqueueValueWithSize, PeekQueueValue, ResetQueue } = require('./queue-with-sizes.js');\n\nconst AbortSteps = Symbol('[[AbortSteps]]');\nconst ErrorSteps = Symbol('[[ErrorSteps]]');\n\nclass WritableStream {\n  constructor(underlyingSink = {}, strategy = {}) {\n    InitializeWritableStream(this);\n\n    const size = strategy.size;\n    let highWaterMark = strategy.highWaterMark;\n\n    const type = underlyingSink.type;\n\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(size);\n    if (highWaterMark === undefined) {\n      highWaterMark = 1;\n    }\n    highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  get locked() {\n    if (IsWritableStream(this) === false) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  abort(reason) {\n    if (IsWritableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  getWriter() {\n    if (IsWritableStream(this) === false) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nmodule.exports = {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter(stream) {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1,\n                              sizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n\n  const stream = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream(stream) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = [];\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsWritableStreamLocked(stream) {\n  assert(IsWritableStream(stream) === true);\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream, reason) {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return Promise.resolve(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest._promise = promise;\n\n  if (wasAlreadyErroring === false) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream) {\n  assert(IsWritableStreamLocked(stream) === true);\n  assert(stream._state === 'writable');\n\n  const promise = new Promise((resolve, reject) => {\n    const writeRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream, error) {\n  verbose('WritableStreamDealWithRejection(stream, %o)', error);\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream, reason) {\n  verbose('WritableStreamStartErroring(stream, %o)', reason);\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (WritableStreamHasOperationMarkedInFlight(stream) === false && controller._started === true) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream) {\n  verbose('WritableStreamFinishErroring()');\n  assert(stream._state === 'erroring');\n  assert(WritableStreamHasOperationMarkedInFlight(stream) === false);\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  for (const writeRequest of stream._writeRequests) {\n    writeRequest._reject(storedError);\n  }\n  stream._writeRequests = [];\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring === true) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  promise.then(\n      () => {\n        abortRequest._resolve();\n        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      },\n      reason => {\n        abortRequest._reject(reason);\n        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream, error) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream, error) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream) {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream) {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    verbose('WritableStreamHasOperationMarkedInFlight() is false');\n    return false;\n  }\n\n  verbose('WritableStreamHasOperationMarkedInFlight() is true');\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n  verbose('WritableStreamRejectCloseAndClosedPromiseIfNeeded()');\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n    writer._closedPromise.catch(() => {});\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream, backpressure) {\n  assert(stream._state === 'writable');\n  assert(WritableStreamCloseQueuedOrInFlight(stream) === false);\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure === true) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(backpressure === false);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\nclass WritableStreamDefaultWriter {\n  constructor(stream) {\n    if (IsWritableStream(stream) === false) {\n      throw new TypeError('WritableStreamDefaultWriter can only be constructed with a WritableStream instance');\n    }\n    if (IsWritableStreamLocked(stream) === true) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._backpressure === true) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      this._readyPromise.catch(() => {});\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      this._readyPromise.catch(() => {});\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      this._closedPromise.catch(() => {});\n    }\n  }\n\n  get closed() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  get desiredSize() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  get ready() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  abort(reason) {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return Promise.reject(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  close() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return Promise.reject(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) === true) {\n      return Promise.reject(new TypeError('cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  releaseLock() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  write(chunk) {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return Promise.reject(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer, reason) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return Promise.reject(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(WritableStreamCloseQueuedOrInFlight(stream) === false);\n\n  const promise = new Promise((resolve, reject) => {\n    const closeRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  if (stream._backpressure === true && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {\n    return Promise.resolve();\n  }\n\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n  writer._closedPromise.catch(() => {});\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n  verbose('WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, %o)', error);\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n  writer._readyPromise.catch(() => {});\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer) {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    'Writer was released and can no longer be used to monitor the stream\\'s closedness');\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined;\n}\n\nfunction WritableStreamDefaultWriterWrite(writer, chunk) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return Promise.reject(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {\n    return Promise.reject(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nclass WritableStreamDefaultController {\n  constructor() {\n    throw new TypeError('WritableStreamDefaultController cannot be constructed explicitly');\n  }\n\n  error(e) {\n    if (IsWritableStreamDefaultController(this) === false) {\n      throw new TypeError(\n        'WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  [AbortSteps](reason) {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                              abortAlgorithm, highWaterMark, sizeAlgorithm) {\n  assert(IsWritableStream(stream) === true);\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = Promise.resolve(startResult);\n  startPromise.then(\n      () => {\n        assert(stream._state === 'writable' || stream._state === 'erroring');\n        controller._started = true;\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n      },\n      r => {\n        assert(stream._state === 'writable' || stream._state === 'erroring');\n        controller._started = true;\n        WritableStreamDealWithRejection(stream, r);\n      }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n  assert(underlyingSink !== undefined);\n\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingSink, 'start', [controller]);\n  }\n\n  const writeAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'write', 1, [controller]);\n  const closeAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'close', 0, []);\n  const abortAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'abort', 1, []);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller) {\n  controller._writeAlgorithm = undefined;\n  controller._closeAlgorithm = undefined;\n  controller._abortAlgorithm = undefined;\n  controller._strategySizeAlgorithm = undefined;\n}\n\nfunction WritableStreamDefaultControllerClose(controller) {\n  EnqueueValueWithSize(controller, 'close', 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller) {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n  const writeRecord = { chunk };\n\n  try {\n    EnqueueValueWithSize(controller, writeRecord, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n  verbose('WritableStreamDefaultControllerAdvanceQueueIfNeeded()');\n  const stream = controller._controlledWritableStream;\n\n  if (controller._started === false) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return;\n  }\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const writeRecord = PeekQueueValue(controller);\n  if (writeRecord === 'close') {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, writeRecord.chunk);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  sinkClosePromise.then(\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  sinkWritePromise.then(\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (WritableStreamCloseQueuedOrInFlight(stream) === false && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller) {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller, error) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name) {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer) {\n  writer._closedPromise = new Promise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n  writer._closedPromise = Promise.reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer) {\n  writer._closedPromise = Promise.resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterClosedPromiseReject(writer, reason) {\n  assert(writer._closedPromise_resolve !== undefined);\n  assert(writer._closedPromise_reject !== undefined);\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer, reason) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  writer._closedPromise = Promise.reject(reason);\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResolve(writer) {\n  assert(writer._closedPromise_resolve !== undefined);\n  assert(writer._closedPromise_reject !== undefined);\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer) {\n  verbose('defaultWriterReadyPromiseInitialize()');\n  writer._readyPromise = new Promise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n  verbose('defaultWriterReadyPromiseInitializeAsRejected(writer, %o)', reason);\n  writer._readyPromise = Promise.reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer) {\n  verbose('defaultWriterReadyPromiseInitializeAsResolved()');\n  writer._readyPromise = Promise.resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n\nfunction defaultWriterReadyPromiseReject(writer, reason) {\n  verbose('defaultWriterReadyPromiseReject(writer, %o)', reason);\n  assert(writer._readyPromise_resolve !== undefined);\n  assert(writer._readyPromise_reject !== undefined);\n\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer) {\n  verbose('defaultWriterReadyPromiseReset()');\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  writer._readyPromise = new Promise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer, reason) {\n  verbose('defaultWriterReadyPromiseResetToRejected(writer, %o)', reason);\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  writer._readyPromise = Promise.reject(reason);\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseResolve(writer) {\n  verbose('defaultWriterReadyPromiseResolve()');\n  assert(writer._readyPromise_resolve !== undefined);\n  assert(writer._readyPromise_reject !== undefined);\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","'use strict';\n/* global AbortSignal:false */\n\nconst assert = require('better-assert');\nconst { ArrayBufferCopy, CreateAlgorithmFromUnderlyingMethod, IsFiniteNonNegativeNumber, InvokeOrNoop,\n        IsDetachedBuffer, TransferArrayBuffer, ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction, createArrayFromList, typeIsObject, WaitForAllPromise } =\n      require('./helpers.js');\nconst { rethrowAssertionErrorRejection } = require('./utils.js');\nconst { DequeueValue, EnqueueValueWithSize, ResetQueue } = require('./queue-with-sizes.js');\nconst { AcquireWritableStreamDefaultWriter, IsWritableStream, IsWritableStreamLocked,\n        WritableStreamAbort, WritableStreamDefaultWriterCloseWithErrorPropagation,\n        WritableStreamDefaultWriterRelease, WritableStreamDefaultWriterWrite, WritableStreamCloseQueuedOrInFlight } =\n      require('./writable-stream.js');\n\nconst CancelSteps = Symbol('[[CancelSteps]]');\nconst PullSteps = Symbol('[[PullSteps]]');\n\nclass ReadableStream {\n  constructor(underlyingSource = {}, strategy = {}) {\n    InitializeReadableStream(this);\n\n    const size = strategy.size;\n    let highWaterMark = strategy.highWaterMark;\n\n    const type = underlyingSource.type;\n    const typeString = String(type);\n    if (typeString === 'bytes') {\n      if (size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n\n      if (highWaterMark === undefined) {\n        highWaterMark = 0;\n      }\n      highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n      SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n    } else if (type === undefined) {\n      const sizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(size);\n\n      if (highWaterMark === undefined) {\n        highWaterMark = 1;\n      }\n      highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n    } else {\n      throw new RangeError('Invalid type is specified');\n    }\n  }\n\n  get locked() {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  cancel(reason) {\n    if (IsReadableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  getReader({ mode } = {}) {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    if (mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    mode = String(mode);\n\n    if (mode === 'byob') {\n      return AcquireReadableStreamBYOBReader(this);\n    }\n\n    throw new RangeError('Invalid mode is specified');\n  }\n\n  pipeThrough({ writable, readable }, { preventClose, preventAbort, preventCancel, signal } = {}) {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n\n    if (IsWritableStream(writable) === false) {\n      throw new TypeError('writable argument to pipeThrough must be a WritableStream');\n    }\n\n    if (IsReadableStream(readable) === false) {\n      throw new TypeError('readable argument to pipeThrough must be a ReadableStream');\n    }\n\n    preventClose = Boolean(preventClose);\n    preventAbort = Boolean(preventAbort);\n    preventCancel = Boolean(preventCancel);\n\n    if (signal !== undefined && !isAbortSignal(signal)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough\\'s signal option must be an AbortSignal');\n    }\n\n    if (IsReadableStreamLocked(this) === true) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(writable) === true) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(this, writable, preventClose, preventAbort, preventCancel, signal);\n\n    promise.catch(() => {});\n\n    return readable;\n  }\n\n  pipeTo(dest, { preventClose, preventAbort, preventCancel, signal } = {}) {\n    if (IsReadableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('pipeTo'));\n    }\n    if (IsWritableStream(dest) === false) {\n      return Promise.reject(\n          new TypeError('ReadableStream.prototype.pipeTo\\'s first argument must be a WritableStream'));\n    }\n\n    preventClose = Boolean(preventClose);\n    preventAbort = Boolean(preventAbort);\n    preventCancel = Boolean(preventCancel);\n\n    if (signal !== undefined && !isAbortSignal(signal)) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo\\'s signal option must be an AbortSignal'));\n    }\n\n    if (IsReadableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n    }\n    if (IsWritableStreamLocked(dest) === true) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n    }\n\n    return ReadableStreamPipeTo(this, dest, preventClose, preventAbort, preventCancel, signal);\n  }\n\n  tee() {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return createArrayFromList(branches);\n  }\n}\n\nmodule.exports = {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  ReadableStream,\n  IsReadableStreamDisturbed,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure,\n  ReadableStreamDefaultControllerCanCloseOrEnqueue\n};\n\n// Abstract operations for the ReadableStream.\n\nfunction AcquireReadableStreamBYOBReader(stream) {\n  return new ReadableStreamBYOBReader(stream);\n}\n\nfunction AcquireReadableStreamDefaultReader(stream) {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1,\n                              sizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n\n  const stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n  SetUpReadableStreamDefaultController(\n      stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 0,\n                                  autoAllocateChunkSize = undefined) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(Number.isInteger(autoAllocateChunkSize) === true);\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  const stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller = Object.create(ReadableByteStreamController.prototype);\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nfunction IsReadableStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamDisturbed(stream) {\n  assert(IsReadableStream(stream) === true);\n\n  return stream._disturbed;\n}\n\nfunction IsReadableStreamLocked(stream) {\n  assert(IsReadableStream(stream) === true);\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n  assert(IsReadableStream(source) === true);\n  assert(IsWritableStream(dest) === true);\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(IsReadableStreamLocked(source) === false);\n  assert(IsWritableStreamLocked(dest) === false);\n\n  const reader = AcquireReadableStreamDefaultReader(source);\n  const writer = AcquireWritableStreamDefaultWriter(dest);\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = Promise.resolve();\n\n  return new Promise((resolve, reject) => {\n    let abortAlgorithm;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions = [];\n        if (preventAbort === false) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return Promise.resolve();\n          });\n        }\n        if (preventCancel === false) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return Promise.resolve();\n          });\n        }\n        shutdownWithAction(() => WaitForAllPromise(actions.map(action => action()), results => results), true, error);\n      };\n\n      if (signal.aborted === true) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return new Promise((resolveLoop, rejectLoop) => {\n        function next(done) {\n          if (done) {\n            resolveLoop();\n          } else {\n            pipeStep().then(next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep() {\n      if (shuttingDown === true) {\n        return Promise.resolve(true);\n      }\n\n      return writer._readyPromise.then(() => {\n        return ReadableStreamDefaultReaderRead(reader).then(({ value, done }) => {\n          if (done === true) {\n            return true;\n          }\n\n          currentWrite = WritableStreamDefaultWriterWrite(writer, value).catch(() => {});\n          return false;\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (preventAbort === false) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (preventCancel === false) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (preventClose === false) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) === true || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (preventCancel === false) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    pipeLoop().catch(err => {\n      currentWrite = Promise.resolve();\n      rethrowAssertionErrorRejection(err);\n    });\n\n    function waitForWritesToFinish() {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return currentWrite.then(() => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n    }\n\n    function isOrBecomesErrored(stream, promise, action) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        promise.catch(action).catch(rethrowAssertionErrorRejection);\n      }\n    }\n\n    function isOrBecomesClosed(stream, promise, action) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        promise.then(action).catch(rethrowAssertionErrorRejection);\n      }\n    }\n\n    function shutdownWithAction(action, originalIsError, originalError) {\n      if (shuttingDown === true) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {\n        waitForWritesToFinish().then(doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        action().then(\n            () => finalize(originalIsError, originalError),\n            newError => finalize(true, newError)\n        )\n            .catch(rethrowAssertionErrorRejection);\n      }\n    }\n\n    function shutdown(isError, error) {\n      if (shuttingDown === true) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {\n        waitForWritesToFinish().then(() => finalize(isError, error)).catch(rethrowAssertionErrorRejection);\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError, error) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n\nfunction ReadableStreamTee(stream, cloneForBranch2) {\n  assert(IsReadableStream(stream) === true);\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader(stream);\n\n  let closedOrErrored = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1;\n  let reason2;\n  let branch1;\n  let branch2;\n\n  let resolveCancelPromise;\n  const cancelPromise = new Promise(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm() {\n    return ReadableStreamDefaultReaderRead(reader).then(result => {\n      assert(typeIsObject(result));\n      const value = result.value;\n      const done = result.done;\n      assert(typeof done === 'boolean');\n\n      if (done === true && closedOrErrored === false) {\n        if (canceled1 === false) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n        }\n        if (canceled2 === false) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n        }\n        closedOrErrored = true;\n      }\n\n      if (closedOrErrored === true) {\n        return;\n      }\n\n      const value1 = value;\n      const value2 = value;\n\n      // There is no way to access the cloning code right now in the reference implementation.\n      // If we add one then we'll need an implementation for serializable objects.\n      // if (canceled2 === false && cloneForBranch2 === true) {\n      //   value2 = StructuredDeserialize(StructuredSerialize(value2));\n      // }\n\n      if (canceled1 === false) {\n        ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, value1);\n      }\n\n      if (canceled2 === false) {\n        ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, value2);\n      }\n    });\n  }\n\n  function cancel1Algorithm(reason) {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2 === true) {\n      const compositeReason = createArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason) {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1 === true) {\n      const compositeReason = createArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {}\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  reader._closedPromise.catch(r => {\n    if (closedOrErrored === true) {\n      return;\n    }\n\n    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n    closedOrErrored = true;\n  });\n\n  return [branch1, branch2];\n}\n\n// ReadableStream API exposed for controllers.\n\nfunction ReadableStreamAddReadIntoRequest(stream, forAuthorCode) {\n  assert(IsReadableStreamBYOBReader(stream._reader) === true);\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  const promise = new Promise((resolve, reject) => {\n    const readIntoRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _forAuthorCode: forAuthorCode\n    };\n\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  });\n\n  return promise;\n}\n\nfunction ReadableStreamAddReadRequest(stream, forAuthorCode) {\n  assert(IsReadableStreamDefaultReader(stream._reader) === true);\n  assert(stream._state === 'readable');\n\n  const promise = new Promise((resolve, reject) => {\n    const readRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _forAuthorCode: forAuthorCode\n    };\n\n    stream._reader._readRequests.push(readRequest);\n  });\n\n  return promise;\n}\n\nfunction ReadableStreamCancel(stream, reason) {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return Promise.resolve(undefined);\n  }\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return sourceCancelPromise.then(() => undefined);\n}\n\nfunction ReadableStreamClose(stream) {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return undefined;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === true) {\n    for (const { _resolve, _forAuthorCode } of reader._readRequests) {\n      _resolve(ReadableStreamCreateReadResult(undefined, true, _forAuthorCode));\n    }\n    reader._readRequests = [];\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  return undefined;\n}\n\nfunction ReadableStreamCreateReadResult(value, done, forAuthorCode) {\n  let prototype = null;\n  if (forAuthorCode === true) {\n    prototype = Object.prototype;\n  }\n  assert(typeof done === 'boolean');\n  const obj = Object.create(prototype);\n  Object.defineProperty(obj, 'value', { value, enumerable: true, writable: true, configurable: true });\n  Object.defineProperty(obj, 'done', { value: done, enumerable: true, writable: true, configurable: true });\n  return obj;\n}\n\nfunction ReadableStreamError(stream, e) {\n  assert(IsReadableStream(stream) === true);\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return undefined;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === true) {\n    for (const readRequest of reader._readRequests) {\n      readRequest._reject(e);\n    }\n\n    reader._readRequests = [];\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    for (const readIntoRequest of reader._readIntoRequests) {\n      readIntoRequest._reject(e);\n    }\n\n    reader._readIntoRequests = [];\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n  reader._closedPromise.catch(() => {});\n}\n\nfunction ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n  const reader = stream._reader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift();\n  readIntoRequest._resolve(ReadableStreamCreateReadResult(chunk, done, readIntoRequest._forAuthorCode));\n}\n\nfunction ReadableStreamFulfillReadRequest(stream, chunk, done) {\n  const reader = stream._reader;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift();\n  readRequest._resolve(ReadableStreamCreateReadResult(chunk, done, readRequest._forAuthorCode));\n}\n\nfunction ReadableStreamGetNumReadIntoRequests(stream) {\n  return stream._reader._readIntoRequests.length;\n}\n\nfunction ReadableStreamGetNumReadRequests(stream) {\n  return stream._reader._readRequests.length;\n}\n\nfunction ReadableStreamHasBYOBReader(stream) {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (IsReadableStreamBYOBReader(reader) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamHasDefaultReader(stream) {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === false) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nclass ReadableStreamDefaultReader {\n  constructor(stream) {\n    if (IsReadableStream(stream) === false) {\n      throw new TypeError('ReadableStreamDefaultReader can only be constructed with a ReadableStream instance');\n    }\n    if (IsReadableStreamLocked(stream) === true) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = [];\n  }\n\n  get closed() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  cancel(reason) {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  read() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('read from'));\n    }\n\n    return ReadableStreamDefaultReaderRead(this, true);\n  }\n\n  releaseLock() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nclass ReadableStreamBYOBReader {\n  constructor(stream) {\n    if (!IsReadableStream(stream)) {\n      throw new TypeError('ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a ' +\n          'byte source');\n    }\n    if (IsReadableByteStreamController(stream._readableStreamController) === false) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n          'source');\n    }\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = [];\n  }\n\n  get closed() {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  cancel(reason) {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  read(view) {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('read from'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return Promise.reject(new TypeError('view must be an array buffer view'));\n    }\n\n    if (IsDetachedBuffer(view.buffer) === true) {\n      return Promise.reject(new TypeError('Cannot read into a view onto a detached ArrayBuffer'));\n    }\n\n    if (view.byteLength === 0) {\n      return Promise.reject(new TypeError('view must have non-zero byteLength'));\n    }\n\n    return ReadableStreamBYOBReaderRead(this, view, true);\n  }\n\n  releaseLock() {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\n// Abstract operations for the readers.\n\nfunction IsReadableStreamBYOBReader(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamDefaultReader(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamReaderGenericInitialize(reader, stream) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    reader._closedPromise.catch(() => {});\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nfunction ReadableStreamReaderGenericCancel(reader, reason) {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nfunction ReadableStreamReaderGenericRelease(reader) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n        reader,\n        new TypeError('Reader was released and can no longer be used to monitor the stream\\'s closedness'));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n        reader,\n        new TypeError('Reader was released and can no longer be used to monitor the stream\\'s closedness'));\n  }\n  reader._closedPromise.catch(() => {});\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined;\n}\n\nfunction ReadableStreamBYOBReaderRead(reader, view, forAuthorCode = false) {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  // Controllers must implement this.\n  return ReadableByteStreamControllerPullInto(stream._readableStreamController, view, forAuthorCode);\n}\n\nfunction ReadableStreamDefaultReaderRead(reader, forAuthorCode = false) {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return Promise.resolve(ReadableStreamCreateReadResult(undefined, true, forAuthorCode));\n  }\n\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(stream._state === 'readable');\n\n  return stream._readableStreamController[PullSteps](forAuthorCode);\n}\n\n// Controllers\n\nclass ReadableStreamDefaultController {\n  constructor() {\n    throw new TypeError();\n  }\n\n  get desiredSize() {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  close() {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(this) === false) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  enqueue(chunk) {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(this) === false) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  error(e) {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  [CancelSteps](reason) {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  [PullSteps](forAuthorCode) {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested === true && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      return Promise.resolve(ReadableStreamCreateReadResult(chunk, false, forAuthorCode));\n    }\n\n    const pendingPromise = ReadableStreamAddReadRequest(stream, forAuthorCode);\n    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    return pendingPromise;\n  }\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (shouldPull === false) {\n    return undefined;\n  }\n\n  if (controller._pulling === true) {\n    controller._pullAgain = true;\n    return undefined;\n  }\n\n  assert(controller._pullAgain === false);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  pullPromise.then(\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain === true) {\n        controller._pullAgain = false;\n        return ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n      return undefined;\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n\n  return undefined;\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller) {\n  const stream = controller._controlledReadableStream;\n\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === false) {\n    return false;\n  }\n\n  if (controller._started === false) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller) {\n  controller._pullAlgorithm = undefined;\n  controller._cancelAlgorithm = undefined;\n  controller._strategySizeAlgorithm = undefined;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction ReadableStreamDefaultControllerClose(controller) {\n  const stream = controller._controlledReadableStream;\n\n  assert(ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === true);\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nfunction ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n  const stream = controller._controlledReadableStream;\n\n  assert(ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === true);\n\n  if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n\n  return undefined;\n}\n\nfunction ReadableStreamDefaultControllerError(controller, e) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableStreamDefaultControllerGetDesiredSize(controller) {\n  const stream = controller._controlledReadableStream;\n  const state = stream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nfunction ReadableStreamDefaultControllerHasBackpressure(controller) {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller) === true) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n  const state = controller._controlledReadableStream._state;\n\n  if (controller._closeRequested === false && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction SetUpReadableStreamDefaultController(\n  stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  Promise.resolve(startResult).then(\n    () => {\n      controller._started = true;\n\n      assert(controller._pulling === false);\n      assert(controller._pullAgain === false);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark,\n                                                                  sizeAlgorithm) {\n  assert(underlyingSource !== undefined);\n\n  const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingSource, 'start', [controller]);\n  }\n\n  const pullAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSource, 'pull', 0, [controller]);\n  const cancelAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSource, 'cancel', 1, []);\n\n  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,\n                                       highWaterMark, sizeAlgorithm);\n}\n\nclass ReadableStreamBYOBRequest {\n  constructor() {\n    throw new TypeError('ReadableStreamBYOBRequest cannot be used directly');\n  }\n\n  get view() {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  respond(bytesWritten) {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('respond');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view.buffer) === true) {\n      throw new TypeError('The BYOB request\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  respondWithNewView(view) {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('respond');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (IsDetachedBuffer(view.buffer) === true) {\n      throw new TypeError('The supplied view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nclass ReadableByteStreamController {\n  constructor() {\n    throw new TypeError('ReadableByteStreamController constructor cannot be used directly');\n  }\n\n  get byobRequest() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    if (this._byobRequest === undefined && this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos[0];\n      const view = new Uint8Array(firstDescriptor.buffer,\n                                  firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                  firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n      const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, this, view);\n      this._byobRequest = byobRequest;\n    }\n\n    return this._byobRequest;\n  }\n\n  get desiredSize() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  close() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested === true) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  enqueue(chunk) {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    if (this._closeRequested === true) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('You can only enqueue array buffer views when using a ReadableByteStreamController');\n    }\n\n    if (IsDetachedBuffer(chunk.buffer) === true) {\n      throw new TypeError('Cannot enqueue a view onto a detached ArrayBuffer');\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  error(e) {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  [CancelSteps](reason) {\n    if (this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos[0];\n      firstDescriptor.bytesFilled = 0;\n    }\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  [PullSteps](forAuthorCode) {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream) === true);\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift();\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      let view;\n      try {\n        view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n      } catch (viewE) {\n        return Promise.reject(viewE);\n      }\n\n      return Promise.resolve(ReadableStreamCreateReadResult(view, false, forAuthorCode));\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        return Promise.reject(bufferE);\n      }\n\n      const pullIntoDescriptor = {\n        buffer,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        ctor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    const promise = ReadableStreamAddReadRequest(stream, forAuthorCode);\n\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n\n    return promise;\n  }\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nfunction IsReadableByteStreamController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamBYOBRequest(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller) {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (shouldPull === false) {\n    return undefined;\n  }\n\n  if (controller._pulling === true) {\n    controller._pullAgain = true;\n    return undefined;\n  }\n\n  assert(controller._pullAgain === false);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  pullPromise.then(\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain === true) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n\n  return undefined;\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = [];\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.ctor(\n      pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue[0];\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    ArrayBufferCopy(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (ready === false) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos[0] === pullIntoDescriptor);\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested === true) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n  if (controller._byobRequest === undefined) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined;\n  controller._byobRequest._view = undefined;\n  controller._byobRequest = undefined;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n  assert(controller._closeRequested === false);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos[0];\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerPullInto(controller, view, forAuthorCode) {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = view.constructor.BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor;\n\n  const buffer = TransferArrayBuffer(view.buffer);\n  const pullIntoDescriptor = {\n    buffer,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    return ReadableStreamAddReadIntoRequest(stream, forAuthorCode);\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new view.constructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    return Promise.resolve(ReadableStreamCreateReadResult(emptyView, true, forAuthorCode));\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      return Promise.resolve(ReadableStreamCreateReadResult(filledView, false, forAuthorCode));\n    }\n\n    if (controller._closeRequested === true) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      return Promise.reject(e);\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  const promise = ReadableStreamAddReadIntoRequest(stream, forAuthorCode);\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n\n  return promise;\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream) === true) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n  if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {\n    throw new RangeError('bytesWritten out of range');\n  }\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    // TODO: Figure out whether we should detach the buffer or not here.\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n  const firstDescriptor = controller._pendingPullIntos[0];\n\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(stream._state === 'readable');\n\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(controller) {\n  const descriptor = controller._pendingPullIntos.shift();\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested === true) {\n    return false;\n  }\n\n  if (controller._started === false) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) === true && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller) {\n  controller._pullAlgorithm = undefined;\n  controller._cancelAlgorithm = undefined;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nfunction ReadableByteStreamControllerClose(controller) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(controller._closeRequested === false);\n  assert(stream._state === 'readable');\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos[0];\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nfunction ReadableByteStreamControllerEnqueue(controller, chunk) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(controller._closeRequested === false);\n  assert(stream._state === 'readable');\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (ReadableStreamHasDefaultReader(stream) === true) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream) === true) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(IsReadableStreamLocked(stream) === false);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerError(controller, e) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller) {\n  const stream = controller._controlledReadableByteStream;\n  const state = stream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction ReadableByteStreamControllerRespond(controller, bytesWritten) {\n  bytesWritten = Number(bytesWritten);\n  if (IsFiniteNonNegativeNumber(bytesWritten) === false) {\n    throw new RangeError('bytesWritten must be a finite');\n  }\n\n  assert(controller._pendingPullIntos.length > 0);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nfunction ReadableByteStreamControllerRespondWithNewView(controller, view) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos[0];\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.byteLength !== view.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n\n  firstDescriptor.buffer = view.buffer;\n\n  ReadableByteStreamControllerRespondInternal(controller, view.byteLength);\n}\n\nfunction SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,\n                                           highWaterMark, autoAllocateChunkSize) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(Number.isInteger(autoAllocateChunkSize) === true);\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = [];\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  Promise.resolve(startResult).then(\n      () => {\n        controller._started = true;\n\n        assert(controller._pulling === false);\n        assert(controller._pullAgain === false);\n\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      },\n      r => {\n        ReadableByteStreamControllerError(controller, r);\n      }\n  )\n      .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n  assert(underlyingByteSource !== undefined);\n\n  const controller = Object.create(ReadableByteStreamController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingByteSource, 'start', [controller]);\n  }\n\n  const pullAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingByteSource, 'pull', 0, [controller]);\n  const cancelAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingByteSource, 'cancel', 1, []);\n\n  let autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize !== undefined) {\n    autoAllocateChunkSize = Number(autoAllocateChunkSize);\n    if (Number.isInteger(autoAllocateChunkSize) === false || autoAllocateChunkSize <= 0) {\n      throw new RangeError('autoAllocateChunkSize must be a positive integer');\n    }\n  }\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n}\n\nfunction SetUpReadableStreamBYOBRequest(request, controller, view) {\n  assert(IsReadableByteStreamController(controller) === true);\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view) === true);\n  assert(IsDetachedBuffer(view.buffer) === false);\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStream.\n\nfunction isAbortSignal(value) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  // Use the brand check to distinguish a real AbortSignal from a fake one.\n  const aborted = Object.getOwnPropertyDescriptor(AbortSignal.prototype, 'aborted').get;\n  try {\n    aborted.call(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n\n// Helper functions for the readers.\n\nfunction readerLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n\nfunction defaultReaderClosedPromiseInitialize(reader) {\n  reader._closedPromise = new Promise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nfunction defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n  reader._closedPromise = Promise.reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseInitializeAsResolved(reader) {\n  reader._closedPromise = Promise.resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseReject(reader, reason) {\n  assert(reader._closedPromise_resolve !== undefined);\n  assert(reader._closedPromise_reject !== undefined);\n\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseResetToRejected(reader, reason) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  reader._closedPromise = Promise.reject(reason);\n}\n\nfunction defaultReaderClosedPromiseResolve(reader) {\n  assert(reader._closedPromise_resolve !== undefined);\n  assert(reader._closedPromise_reject !== undefined);\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction byobReaderBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name) {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","'use strict';\nconst { createDataProperty } = require('./helpers.js');\n\nmodule.exports = class ByteLengthQueuingStrategy {\n  constructor({ highWaterMark }) {\n    createDataProperty(this, 'highWaterMark', highWaterMark);\n  }\n\n  size(chunk) {\n    return chunk.byteLength;\n  }\n};\n","'use strict';\nconst { createDataProperty } = require('./helpers.js');\n\nmodule.exports = class CountQueuingStrategy {\n  constructor({ highWaterMark }) {\n    createDataProperty(this, 'highWaterMark', highWaterMark);\n  }\n\n  size() {\n    return 1;\n  }\n};\n","'use strict';\nconst assert = require('better-assert');\n\n// Calls to verbose() are purely for debugging the reference implementation and tests. They are not part of the standard\n// and do not appear in the standard text.\nconst verbose = require('debug')('streams:transform-stream:verbose');\nconst { InvokeOrNoop, CreateAlgorithmFromUnderlyingMethod, PromiseCall, typeIsObject,\n        ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction } = require('./helpers.js');\nconst { CreateReadableStream, ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue,\n        ReadableStreamDefaultControllerError, ReadableStreamDefaultControllerGetDesiredSize,\n        ReadableStreamDefaultControllerHasBackpressure,\n        ReadableStreamDefaultControllerCanCloseOrEnqueue } = require('./readable-stream.js');\nconst { CreateWritableStream, WritableStreamDefaultControllerErrorIfNeeded } = require('./writable-stream.js');\n\n// Class TransformStream\n\nclass TransformStream {\n  constructor(transformer = {}, writableStrategy = {}, readableStrategy = {}) {\n    const writableSizeFunction = writableStrategy.size;\n    let writableHighWaterMark = writableStrategy.highWaterMark;\n    const readableSizeFunction = readableStrategy.size;\n    let readableHighWaterMark = readableStrategy.highWaterMark;\n\n    const writableType = transformer.writableType;\n\n    if (writableType !== undefined) {\n      throw new RangeError('Invalid writable type specified');\n    }\n\n    const writableSizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(writableSizeFunction);\n    if (writableHighWaterMark === undefined) {\n      writableHighWaterMark = 1;\n    }\n    writableHighWaterMark = ValidateAndNormalizeHighWaterMark(writableHighWaterMark);\n\n    const readableType = transformer.readableType;\n\n    if (readableType !== undefined) {\n      throw new RangeError('Invalid readable type specified');\n    }\n\n    const readableSizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(readableSizeFunction);\n    if (readableHighWaterMark === undefined) {\n      readableHighWaterMark = 0;\n    }\n    readableHighWaterMark = ValidateAndNormalizeHighWaterMark(readableHighWaterMark);\n\n    let startPromise_resolve;\n    const startPromise = new Promise(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                              readableSizeAlgorithm);\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    const startResult = InvokeOrNoop(transformer, 'start', [this._transformStreamController]);\n    startPromise_resolve(startResult);\n  }\n\n  get readable() {\n    if (IsTransformStream(this) === false) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  get writable() {\n    if (IsTransformStream(this) === false) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\n// Transform Stream Abstract Operations\n\nfunction CreateTransformStream(startAlgorithm, transformAlgorithm, flushAlgorithm, writableHighWaterMark = 1,\n                               writableSizeAlgorithm = () => 1, readableHighWaterMark = 0,\n                               readableSizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve;\n  const startPromise = new Promise(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm,\n                                   readableHighWaterMark, readableSizeAlgorithm) {\n  function startAlgorithm() {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk) {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason) {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm() {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm() {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason) {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return Promise.resolve();\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined;\n  stream._backpressureChangePromise = undefined;\n  stream._backpressureChangePromise_resolve = undefined;\n  TransformStreamSetBackpressure(stream, true);\n\n  // Used by IsWritableStream() which is called by SetUpTransformStreamDefaultController().\n  stream._transformStreamController = undefined;\n}\n\nfunction IsTransformStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream, e) {\n  verbose('TransformStreamError()');\n\n  ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure === true) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream, backpressure) {\n  verbose(`TransformStreamSetBackpressure() [backpressure = ${backpressure}]`);\n\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = new Promise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\nclass TransformStreamDefaultController {\n  constructor() {\n    throw new TypeError('TransformStreamDefaultController instances cannot be created directly');\n  }\n\n  get desiredSize() {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n  }\n\n  enqueue(chunk) {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  error(reason) {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  terminate() {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n  assert(IsTransformStream(stream) === true);\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n  assert(transformer !== undefined);\n\n  const controller = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = chunk => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk);\n      return Promise.resolve();\n    } catch (transformResultE) {\n      return Promise.reject(transformResultE);\n    }\n  };\n  const transformMethod = transformer.transform;\n  if (transformMethod !== undefined) {\n    if (typeof transformMethod !== 'function') {\n      throw new TypeError('transform is not a method');\n    }\n    transformAlgorithm = chunk => PromiseCall(transformMethod, transformer, [chunk, controller]);\n  }\n\n  const flushAlgorithm = CreateAlgorithmFromUnderlyingMethod(transformer, 'flush', 0, [controller]);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller) {\n  controller._transformAlgorithm = undefined;\n  controller._flushAlgorithm = undefined;\n}\n\nfunction TransformStreamDefaultControllerEnqueue(controller, chunk) {\n  verbose('TransformStreamDefaultControllerEnqueue()');\n\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === false) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure === true);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller, e) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromise.catch(r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate(controller) {\n  verbose('TransformStreamDefaultControllerTerminate()');\n\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === true) {\n    ReadableStreamDefaultControllerClose(readableController);\n  }\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n  verbose('TransformStreamDefaultSinkWriteAlgorithm()');\n\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure === true) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return backpressureChangePromise\n        .then(() => {\n          const writable = stream._writable;\n          const state = writable._state;\n          if (state === 'erroring') {\n            throw writable._storedError;\n          }\n          assert(state === 'writable');\n          return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n        });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return Promise.resolve();\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm(stream) {\n  verbose('TransformStreamDefaultSinkCloseAlgorithm()');\n\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return flushPromise.then(() => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    const readableController = readable._readableStreamController;\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === true) {\n      ReadableStreamDefaultControllerClose(readableController);\n    }\n  }).catch(r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream) {\n  verbose('TransformStreamDefaultSourcePullAlgorithm()');\n\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure === true);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\nmodule.exports = { CreateTransformStream, TransformStream };\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name) {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","import {\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  ReadableStream,\n  TransformStream,\n  WritableStream\n} from './ponyfill';\nimport { globals } from './utils';\n\n// Export\nexport * from './ponyfill';\n\nconst exports = {\n  ReadableStream,\n  WritableStream,\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  TransformStream\n};\n\n// Add classes to global scope\nif (typeof globals !== 'undefined') {\n  Object.assign(globals, exports);\n}\n"],"names":["SymbolPolyfill","Symbol","iterator","description","NumberIsInteger","Number","isInteger","value","isFinite","Math","floor","noop","globals","self","window","global","NumberIsNaN","isNaN","x","isFakeDetached","Call","F","V","args","TypeError","Function","prototype","apply","call","PromiseCall","Promise","resolve","reject","exports","o","p","v","Object","defineProperty","writable","enumerable","configurable","elements","slice","dest","destOffset","src","srcOffset","n","Uint8Array","set","IsNonNegativeNumber","Infinity","Number.isNaN","underlyingObject","methodName","algoArgCount","extraArgs","method","undefined","arg","fullArgs","concat","O","P","transferredIshVersion","get","highWaterMark","RangeError","size","chunk","promise","onFulfilled","onRejected","then","promises","successSteps","failureSteps","rejected","rejectionHandler","index","fulfilledCount","total","length","result","Array","promiseIndex","fulfillmentHandler","PerformPromiseThen","resolvePromise","rejectPromise","WaitForAll","results","stepsResult","e","reason","assert","AssertionError","setTimeout","IsFiniteNonNegativeNumber","require$$0","container","pair","_queue","shift","_queueTotalSize","push","CreateAlgorithmFromUnderlyingMethod","InvokeOrNoop","ValidateAndNormalizeHighWaterMark","MakeSizeAlgorithmFromSizeFunction","typeIsObject","require$$1","rethrowAssertionErrorRejection","require$$2","DequeueValue","EnqueueValueWithSize","PeekQueueValue","ResetQueue","require$$3","AbortSteps","ErrorSteps","WritableStream","[object Object]","underlyingSink","strategy","InitializeWritableStream","this","type","sizeAlgorithm","stream","controller","create","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","SetUpWritableStreamDefaultControllerFromUnderlyingSink","locked","IsWritableStream","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","AcquireWritableStreamDefaultWriter","CreateWritableStream","startAlgorithm","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultWriterCloseWithErrorPropagation","writer","_ownerWritableStream","state","_state","WritableStreamCloseQueuedOrInFlight","_storedError","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","hasOwnProperty","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","WritableStreamDealWithRejection","error","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","_started","storedError","writeRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","WritableStreamFinishInFlightClose","_closedPromise_resolve","_closedPromise_reject","_closedPromiseState","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseReject","_closedPromise","catch","WritableStreamUpdateBackpressure","backpressure","_readyPromise","_readyPromise_resolve","_readyPromise_reject","_readyPromiseState","defaultWriterReadyPromiseReset","defaultWriterReadyPromiseResolve","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseInitializeAsRejected","closed","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","desiredSize","defaultWriterLockException","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","ready","WritableStreamDefaultWriterAbort","closeRequest","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDefaultControllerClose","WritableStreamDefaultWriterEnsureClosedPromiseRejected","defaultWriterClosedPromiseResetToRejected","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerGetChunkSize","WritableStreamAddWriteRequest","writeRecord","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerWrite","IsWritableStreamDefaultController","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","_strategyHWM","_writeAlgorithm","_closeAlgorithm","startResult","r","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessClose","WritableStreamMarkFirstWriteRequestInFlight","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamDefaultControllerProcessWrite","name","ArrayBufferCopy","IsDetachedBuffer","TransferArrayBuffer","createArrayFromList","WaitForAllPromise","CancelSteps","PullSteps","ReadableStream","underlyingSource","InitializeReadableStream","String","underlyingByteSource","ReadableByteStreamController","pullAlgorithm","cancelAlgorithm","autoAllocateChunkSize","Number.isInteger","SetUpReadableByteStreamController","SetUpReadableByteStreamControllerFromUnderlyingSource","ReadableStreamDefaultController","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","IsReadableStream","IsReadableStreamLocked","ReadableStreamCancel","mode","AcquireReadableStreamDefaultReader","ReadableStreamBYOBReader","AcquireReadableStreamBYOBReader","readable","preventClose","preventAbort","preventCancel","signal","Boolean","isAbortSignal","ReadableStreamPipeTo","branches","cloneForBranch2","reader","reason1","reason2","branch1","branch2","resolveCancelPromise","closedOrErrored","canceled1","canceled2","cancelPromise","ReadableStreamDefaultReaderRead","done","ReadableStreamDefaultControllerClose","_readableStreamController","value1","value2","ReadableStreamDefaultControllerEnqueue","CreateReadableStream","compositeReason","cancelResult","ReadableStreamDefaultControllerError","ReadableStreamTee","CreateReadableByteStream","IsReadableStreamDisturbed","_disturbed","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerHasBackpressure","ReadableStreamDefaultControllerShouldCallPull","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultReader","_reader","source","shuttingDown","currentWrite","DOMException","actions","shutdownWithAction","map","action","aborted","addEventListener","isOrBecomesErrored","shutdown","isOrBecomesClosed","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","ReadableStreamReaderGenericRelease","removeEventListener","resolveLoop","rejectLoop","next","err","ReadableStreamAddReadIntoRequest","forAuthorCode","readIntoRequest","_forAuthorCode","_readIntoRequests","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamClose","IsReadableStreamDefaultReader","ReadableStreamCreateReadResult","defaultReaderClosedPromiseResolve","obj","ReadableStreamError","defaultReaderClosedPromiseReject","ReadableStreamFulfillReadRequest","ReadableStreamGetNumReadIntoRequests","ReadableStreamGetNumReadRequests","ReadableStreamHasBYOBReader","IsReadableStreamBYOBReader","ReadableStreamHasDefaultReader","ReadableStreamReaderGenericInitialize","defaultReaderBrandCheckException","_ownerReadableStream","readerLockException","ReadableStreamReaderGenericCancel","IsReadableByteStreamController","byobReaderBrandCheckException","view","ArrayBuffer","isView","buffer","byteLength","_controlledReadableByteStream","elementSize","constructor","DataView","BYTES_PER_ELEMENT","ctor","pullIntoDescriptor","byteOffset","bytesFilled","readerType","_pendingPullIntos","emptyView","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","ReadableByteStreamControllerHandleQueueDrain","_closeRequested","ReadableByteStreamControllerError","ReadableByteStreamControllerCallPullIfNeeded","ReadableByteStreamControllerPullInto","ReadableStreamBYOBReaderRead","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","defaultReaderClosedPromiseResetToRejected","IsReadableStreamDefaultController","defaultControllerBrandCheckException","_cancelAlgorithm","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","pendingPromise","_pulling","_pullAlgorithm","_pullAgain","ReadableStreamBYOBRequest","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespondInternal","ReadableByteStreamControllerRespond","firstDescriptor","ReadableByteStreamControllerRespondWithNewView","byobRequest","byteStreamControllerBrandCheckException","_byobRequest","request","SetUpReadableStreamBYOBRequest","ReadableByteStreamControllerGetDesiredSize","firstPendingPullInto","ReadableByteStreamControllerClearAlgorithms","ReadableByteStreamControllerClose","transferredBuffer","ReadableByteStreamControllerEnqueueChunkToQueue","transferredView","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerEnqueue","entry","viewE","_autoAllocateChunkSize","bufferE","ReadableByteStreamControllerShouldCallPull","ReadableByteStreamControllerClearPendingPullIntos","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","ReadableStreamFulfillReadIntoRequest","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInClosedState","remainderSize","end","remainder","ReadableByteStreamControllerRespondInReadableState","descriptor","getOwnPropertyDescriptor","AbortSignal","createDataProperty","ByteLengthQueuingStrategy","CountQueuingStrategy","TransformStream","transformer","writableStrategy","readableStrategy","writableSizeFunction","writableHighWaterMark","readableSizeFunction","readableHighWaterMark","writableType","writableSizeAlgorithm","readableType","readableSizeAlgorithm","startPromise_resolve","InitializeTransformStream","TransformStreamDefaultController","transformAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","transformMethod","transform","flushAlgorithm","SetUpTransformStreamDefaultController","SetUpTransformStreamDefaultControllerFromTransformer","_transformStreamController","IsTransformStream","_readable","_writable","startPromise","backpressureChangePromise","_backpressureChangePromise","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkWriteAlgorithm","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","readableController","TransformStreamError","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamSetBackpressure","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise_resolve","IsTransformStreamDefaultController","_controlledTransformStream","TransformStreamDefaultControllerError","TransformStreamDefaultControllerTerminate","_transformAlgorithm","CreateTransformStream","assign"],"mappings":"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"}