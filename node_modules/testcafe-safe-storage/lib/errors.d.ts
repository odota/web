import { Template } from './utils/template.js';
export declare enum CODES {
    E001 = 1,
    E002 = 2,
    E003 = 3
}
declare type RAU = ReadonlyArray<unknown>;
declare abstract class BaseError<T extends ReadonlyArray<unknown>> extends Error {
    abstract code: CODES;
    abstract template: Template<T>;
    private args;
    constructor(...args: T);
    get message(): string;
}
export declare class LoadedDataInvalid<T extends RAU> extends BaseError<T> {
    code: CODES;
    template: Template<readonly unknown[]>;
}
export declare class SavedDataNotDetected<T extends RAU> extends BaseError<T> {
    code: CODES;
    template: Template<readonly unknown[]>;
}
export declare class MultipleSavedDataDetected<T extends RAU> extends BaseError<T> {
    code: CODES;
    template: Template<readonly unknown[]>;
}
export {};
