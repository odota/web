"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const ensure_directory_1 = __importDefault(require("../utils/ensure-directory"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
const DEFAULT_THUMBNAIL_WIDTH = 240;
const DEFAULT_THUMBNAIL_HEIGHT = 130;
function getThumbnailPath(imagePath) {
    var imageName = path_1.default.basename(imagePath);
    var imageDir = path_1.default.dirname(imagePath);
    return path_1.default.join(imageDir, 'thumbnails', imageName);
}
/**
 * Creates a thumbnail image from the specified PNG image file.
 * @function
 * @async
 * @name generateThumbnail
 * @param {string} sourcePath - Specifies the path to the source image in PNG format.
 * @param {string} thumbnailPath - Specifies the path to the resulting thumbnail image.
 *                                 Defaults to '<sourcePathDirectory>/thumbnails/<sourcePathFileName>'
 * @param {number} width - Specifies the width of the thumbnail image, in pixels (default is 240).
 * @param {number} height - Specifies the height of the thumbnail image, in pixels (default is 130).
 */
async function default_1(sourcePath, thumbnailPath = getThumbnailPath(sourcePath), width = DEFAULT_THUMBNAIL_WIDTH, height = DEFAULT_THUMBNAIL_HEIGHT) {
    if (!await ensure_directory_1.default(thumbnailPath))
        return;
    await exec_1.execFile(binaries_1.default.generateThumbnail, [sourcePath, thumbnailPath, width, height]);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtdGh1bWJuYWlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9nZW5lcmF0ZS10aHVtYm5haWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsaUZBQXdEO0FBQ3hELHdDQUF5QztBQUN6QywyREFBbUM7QUFHbkMsTUFBTSx1QkFBdUIsR0FBSSxHQUFHLENBQUM7QUFDckMsTUFBTSx3QkFBd0IsR0FBRyxHQUFHLENBQUM7QUFFckMsU0FBUyxnQkFBZ0IsQ0FBRSxTQUFTO0lBQ2hDLElBQUksU0FBUyxHQUFHLGNBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsSUFBSSxRQUFRLEdBQUksY0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV4QyxPQUFPLGNBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNZLEtBQUssb0JBQ2hCLFVBQVUsRUFDVixhQUFhLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQzVDLEtBQUssR0FBRyx1QkFBdUIsRUFDL0IsTUFBTSxHQUFHLHdCQUF3QjtJQUVqQyxJQUFJLENBQUMsTUFBTSwwQkFBZSxDQUFDLGFBQWEsQ0FBQztRQUNyQyxPQUFPO0lBRVgsTUFBTSxlQUFRLENBQUMsa0JBQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQVZELDRCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZW5zdXJlRGlyZWN0b3J5IGZyb20gJy4uL3V0aWxzL2Vuc3VyZS1kaXJlY3RvcnknO1xuaW1wb3J0IHsgZXhlY0ZpbGUgfSBmcm9tICcuLi91dGlscy9leGVjJztcbmltcG9ydCBCSU5BUklFUyBmcm9tICcuLi9iaW5hcmllcyc7XG5cblxuY29uc3QgREVGQVVMVF9USFVNQk5BSUxfV0lEVEggID0gMjQwO1xuY29uc3QgREVGQVVMVF9USFVNQk5BSUxfSEVJR0hUID0gMTMwO1xuXG5mdW5jdGlvbiBnZXRUaHVtYm5haWxQYXRoIChpbWFnZVBhdGgpIHtcbiAgICB2YXIgaW1hZ2VOYW1lID0gcGF0aC5iYXNlbmFtZShpbWFnZVBhdGgpO1xuICAgIHZhciBpbWFnZURpciAgPSBwYXRoLmRpcm5hbWUoaW1hZ2VQYXRoKTtcblxuICAgIHJldHVybiBwYXRoLmpvaW4oaW1hZ2VEaXIsICd0aHVtYm5haWxzJywgaW1hZ2VOYW1lKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGh1bWJuYWlsIGltYWdlIGZyb20gdGhlIHNwZWNpZmllZCBQTkcgaW1hZ2UgZmlsZS5cbiAqIEBmdW5jdGlvblxuICogQGFzeW5jXG4gKiBAbmFtZSBnZW5lcmF0ZVRodW1ibmFpbFxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZVBhdGggLSBTcGVjaWZpZXMgdGhlIHBhdGggdG8gdGhlIHNvdXJjZSBpbWFnZSBpbiBQTkcgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IHRodW1ibmFpbFBhdGggLSBTcGVjaWZpZXMgdGhlIHBhdGggdG8gdGhlIHJlc3VsdGluZyB0aHVtYm5haWwgaW1hZ2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvICc8c291cmNlUGF0aERpcmVjdG9yeT4vdGh1bWJuYWlscy88c291cmNlUGF0aEZpbGVOYW1lPidcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgdGhlIHRodW1ibmFpbCBpbWFnZSwgaW4gcGl4ZWxzIChkZWZhdWx0IGlzIDI0MCkuXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gU3BlY2lmaWVzIHRoZSBoZWlnaHQgb2YgdGhlIHRodW1ibmFpbCBpbWFnZSwgaW4gcGl4ZWxzIChkZWZhdWx0IGlzIDEzMCkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChcbiAgICBzb3VyY2VQYXRoLFxuICAgIHRodW1ibmFpbFBhdGggPSBnZXRUaHVtYm5haWxQYXRoKHNvdXJjZVBhdGgpLFxuICAgIHdpZHRoID0gREVGQVVMVF9USFVNQk5BSUxfV0lEVEgsXG4gICAgaGVpZ2h0ID0gREVGQVVMVF9USFVNQk5BSUxfSEVJR0hUXG4pIHtcbiAgICBpZiAoIWF3YWl0IGVuc3VyZURpcmVjdG9yeSh0aHVtYm5haWxQYXRoKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgYXdhaXQgZXhlY0ZpbGUoQklOQVJJRVMuZ2VuZXJhdGVUaHVtYm5haWwsIFtzb3VyY2VQYXRoLCB0aHVtYm5haWxQYXRoLCB3aWR0aCwgaGVpZ2h0XSk7XG59XG4iXX0=