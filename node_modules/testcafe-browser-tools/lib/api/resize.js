"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const get_window_size_1 = __importDefault(require("./get-window-size"));
const find_window_1 = __importDefault(require("./find-window"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
function getCorrectedSize(currentClientAreaSize, currentWindowSize, requestedSize) {
    var horizontalChrome = currentWindowSize.width - currentClientAreaSize.width;
    var verticalChrome = currentWindowSize.height - currentClientAreaSize.height;
    return {
        width: requestedSize.width + horizontalChrome,
        height: requestedSize.height + verticalChrome
    };
}
/**
 * Changes the browser's client area size to the new width and height.
 * @function
 * @async
 * @name resize
 * @param {string | object} windowDescriptor - Specifies the title of the web page opened in the window or a descriptor returned by findWindow.
 * @param {number} currentWidth - Specifies the current width of the browser's client area, in pixels. Use the window.innerWidth property to determine it.
 * @param {number} currentHeight - Specifies the current height of the browser's client area, in pixels. Use the window.innerHeight property to determine it.
 * @param {number} width - Specifies the new client area width, in pixels.
 * @param {number} height - Specifies the new client area height, in pixels.
 **/
async function default_1(windowDescriptor, currentWidth, currentHeight, width, height) {
    var windowDescription = typeof windowDescriptor === 'string' ? await find_window_1.default(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return;
    var resizeArguments = void 0;
    if (os_family_1.default.win)
        resizeArguments = [windowDescription.hwnd];
    else if (os_family_1.default.mac)
        resizeArguments = [windowDescription.processId, windowDescription.windowId];
    else if (os_family_1.default.linux)
        resizeArguments = [windowDescription.windowId];
    else
        return;
    var currentClientAreaSize = { width: currentWidth, height: currentHeight };
    var requestedSize = { width, height };
    var currentWindowSize = await get_window_size_1.default(windowDescription);
    if (!currentWindowSize)
        return;
    var correctedSize = getCorrectedSize(currentClientAreaSize, currentWindowSize, requestedSize);
    resizeArguments = resizeArguments.concat([correctedSize.width, correctedSize.height]);
    await exec_1.execFile(binaries_1.default.resize, resizeArguments);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9yZXNpemUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBMkI7QUFDM0Isd0VBQThDO0FBQzlDLGdFQUF1QztBQUN2Qyx3Q0FBeUM7QUFDekMsMkRBQW1DO0FBRW5DLFNBQVMsZ0JBQWdCLENBQUUscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUUsYUFBYTtJQUM5RSxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDN0UsSUFBSSxjQUFjLEdBQUssaUJBQWlCLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztJQUUvRSxPQUFPO1FBQ0gsS0FBSyxFQUFHLGFBQWEsQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCO1FBQzlDLE1BQU0sRUFBRSxhQUFhLENBQUMsTUFBTSxHQUFHLGNBQWM7S0FDaEQsQ0FBQztBQUNOLENBQUM7QUFFRDs7Ozs7Ozs7OztJQVVJO0FBQ1csS0FBSyxvQkFBVyxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUFNO0lBQ3ZGLElBQUksaUJBQWlCLEdBQUcsT0FBTyxnQkFBZ0IsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0scUJBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUVySCxJQUFJLENBQUMsaUJBQWlCO1FBQ2xCLE9BQU87SUFFWCxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUU3QixJQUFJLG1CQUFFLENBQUMsR0FBRztRQUNOLGVBQWUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFDLElBQUksbUJBQUUsQ0FBQyxHQUFHO1FBQ1gsZUFBZSxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNFLElBQUksbUJBQUUsQ0FBQyxLQUFLO1FBQ2IsZUFBZSxHQUFHLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7O1FBRS9DLE9BQU87SUFFWCxJQUFJLHFCQUFxQixHQUFHLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUM7SUFDM0UsSUFBSSxhQUFhLEdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDOUMsSUFBSSxpQkFBaUIsR0FBTyxNQUFNLHlCQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVuRSxJQUFJLENBQUMsaUJBQWlCO1FBQ2xCLE9BQU87SUFFWCxJQUFJLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUU5RixlQUFlLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFdEYsTUFBTSxlQUFRLENBQUMsa0JBQVEsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQTdCRCw0QkE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1MgZnJvbSAnb3MtZmFtaWx5JztcbmltcG9ydCBnZXRXaW5kb3dTaXplIGZyb20gJy4vZ2V0LXdpbmRvdy1zaXplJztcbmltcG9ydCBmaW5kV2luZG93IGZyb20gJy4vZmluZC13aW5kb3cnO1xuaW1wb3J0IHsgZXhlY0ZpbGUgfSBmcm9tICcuLi91dGlscy9leGVjJztcbmltcG9ydCBCSU5BUklFUyBmcm9tICcuLi9iaW5hcmllcyc7XG5cbmZ1bmN0aW9uIGdldENvcnJlY3RlZFNpemUgKGN1cnJlbnRDbGllbnRBcmVhU2l6ZSwgY3VycmVudFdpbmRvd1NpemUsIHJlcXVlc3RlZFNpemUpIHtcbiAgICB2YXIgaG9yaXpvbnRhbENocm9tZSA9IGN1cnJlbnRXaW5kb3dTaXplLndpZHRoIC0gY3VycmVudENsaWVudEFyZWFTaXplLndpZHRoO1xuICAgIHZhciB2ZXJ0aWNhbENocm9tZSAgID0gY3VycmVudFdpbmRvd1NpemUuaGVpZ2h0IC0gY3VycmVudENsaWVudEFyZWFTaXplLmhlaWdodDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiAgcmVxdWVzdGVkU2l6ZS53aWR0aCArIGhvcml6b250YWxDaHJvbWUsXG4gICAgICAgIGhlaWdodDogcmVxdWVzdGVkU2l6ZS5oZWlnaHQgKyB2ZXJ0aWNhbENocm9tZVxuICAgIH07XG59XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgYnJvd3NlcidzIGNsaWVudCBhcmVhIHNpemUgdG8gdGhlIG5ldyB3aWR0aCBhbmQgaGVpZ2h0LlxuICogQGZ1bmN0aW9uXG4gKiBAYXN5bmNcbiAqIEBuYW1lIHJlc2l6ZVxuICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IHdpbmRvd0Rlc2NyaXB0b3IgLSBTcGVjaWZpZXMgdGhlIHRpdGxlIG9mIHRoZSB3ZWIgcGFnZSBvcGVuZWQgaW4gdGhlIHdpbmRvdyBvciBhIGRlc2NyaXB0b3IgcmV0dXJuZWQgYnkgZmluZFdpbmRvdy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50V2lkdGggLSBTcGVjaWZpZXMgdGhlIGN1cnJlbnQgd2lkdGggb2YgdGhlIGJyb3dzZXIncyBjbGllbnQgYXJlYSwgaW4gcGl4ZWxzLiBVc2UgdGhlIHdpbmRvdy5pbm5lcldpZHRoIHByb3BlcnR5IHRvIGRldGVybWluZSBpdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SGVpZ2h0IC0gU3BlY2lmaWVzIHRoZSBjdXJyZW50IGhlaWdodCBvZiB0aGUgYnJvd3NlcidzIGNsaWVudCBhcmVhLCBpbiBwaXhlbHMuIFVzZSB0aGUgd2luZG93LmlubmVySGVpZ2h0IHByb3BlcnR5IHRvIGRldGVybWluZSBpdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFNwZWNpZmllcyB0aGUgbmV3IGNsaWVudCBhcmVhIHdpZHRoLCBpbiBwaXhlbHMuXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gU3BlY2lmaWVzIHRoZSBuZXcgY2xpZW50IGFyZWEgaGVpZ2h0LCBpbiBwaXhlbHMuXG4gKiovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAod2luZG93RGVzY3JpcHRvciwgY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIHdpbmRvd0Rlc2NyaXB0aW9uID0gdHlwZW9mIHdpbmRvd0Rlc2NyaXB0b3IgPT09ICdzdHJpbmcnID8gYXdhaXQgZmluZFdpbmRvdyh3aW5kb3dEZXNjcmlwdG9yKSA6IHdpbmRvd0Rlc2NyaXB0b3I7XG5cbiAgICBpZiAoIXdpbmRvd0Rlc2NyaXB0aW9uKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgcmVzaXplQXJndW1lbnRzID0gdm9pZCAwO1xuXG4gICAgaWYgKE9TLndpbilcbiAgICAgICAgcmVzaXplQXJndW1lbnRzID0gW3dpbmRvd0Rlc2NyaXB0aW9uLmh3bmRdO1xuICAgIGVsc2UgaWYgKE9TLm1hYylcbiAgICAgICAgcmVzaXplQXJndW1lbnRzID0gW3dpbmRvd0Rlc2NyaXB0aW9uLnByb2Nlc3NJZCwgd2luZG93RGVzY3JpcHRpb24ud2luZG93SWRdO1xuICAgIGVsc2UgaWYgKE9TLmxpbnV4KVxuICAgICAgICByZXNpemVBcmd1bWVudHMgPSBbd2luZG93RGVzY3JpcHRpb24ud2luZG93SWRdO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIGN1cnJlbnRDbGllbnRBcmVhU2l6ZSA9IHsgd2lkdGg6IGN1cnJlbnRXaWR0aCwgaGVpZ2h0OiBjdXJyZW50SGVpZ2h0IH07XG4gICAgdmFyIHJlcXVlc3RlZFNpemUgICAgICAgICA9IHsgd2lkdGgsIGhlaWdodCB9O1xuICAgIHZhciBjdXJyZW50V2luZG93U2l6ZSAgICAgPSBhd2FpdCBnZXRXaW5kb3dTaXplKHdpbmRvd0Rlc2NyaXB0aW9uKTtcblxuICAgIGlmICghY3VycmVudFdpbmRvd1NpemUpXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciBjb3JyZWN0ZWRTaXplID0gZ2V0Q29ycmVjdGVkU2l6ZShjdXJyZW50Q2xpZW50QXJlYVNpemUsIGN1cnJlbnRXaW5kb3dTaXplLCByZXF1ZXN0ZWRTaXplKTtcblxuICAgIHJlc2l6ZUFyZ3VtZW50cyA9IHJlc2l6ZUFyZ3VtZW50cy5jb25jYXQoW2NvcnJlY3RlZFNpemUud2lkdGgsIGNvcnJlY3RlZFNpemUuaGVpZ2h0XSk7XG5cbiAgICBhd2FpdCBleGVjRmlsZShCSU5BUklFUy5yZXNpemUsIHJlc2l6ZUFyZ3VtZW50cyk7XG59XG4iXX0=