"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const os_1 = require("os");
const find_window_1 = __importDefault(require("./find-window"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
/**
 * Checks if the specified browser window is maximized.
 * @function
 * @async
 * @name isMaximized
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow.
 * @return {boolean} `true` if the browser window is maximized
 **/
async function default_1(windowDescriptor) {
    var windowDescription = typeof windowDescriptor === 'string' ? await find_window_1.default(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return false;
    var commandArguments = void 0;
    // TODO: implement for macOS
    if (os_family_1.default.win)
        commandArguments = [windowDescription.hwnd];
    else
        return false;
    var result = await exec_1.execFile(binaries_1.default.maximize, commandArguments.concat('status'));
    return result.replace(os_1.EOL, '').toLowerCase() === 'true';
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbWF4aW1pemVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9pcy1tYXhpbWl6ZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBMkI7QUFDM0IsMkJBQXlCO0FBQ3pCLGdFQUF1QztBQUN2Qyx3Q0FBeUM7QUFDekMsMkRBQW1DO0FBR25DOzs7Ozs7O0lBT0k7QUFDVyxLQUFLLG9CQUFXLGdCQUFnQjtJQUMzQyxJQUFJLGlCQUFpQixHQUFHLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLHFCQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFFckgsSUFBSSxDQUFDLGlCQUFpQjtRQUNsQixPQUFPLEtBQUssQ0FBQztJQUVqQixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDO0lBRTlCLDRCQUE0QjtJQUM1QixJQUFJLG1CQUFFLENBQUMsR0FBRztRQUNOLGdCQUFnQixHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7O1FBRTVDLE9BQU8sS0FBSyxDQUFDO0lBRWpCLElBQUksTUFBTSxHQUFHLE1BQU0sZUFBUSxDQUFDLGtCQUFRLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRWxGLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDO0FBQzVELENBQUM7QUFqQkQsNEJBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgZmluZFdpbmRvdyBmcm9tICcuL2ZpbmQtd2luZG93JztcbmltcG9ydCB7IGV4ZWNGaWxlIH0gZnJvbSAnLi4vdXRpbHMvZXhlYyc7XG5pbXBvcnQgQklOQVJJRVMgZnJvbSAnLi4vYmluYXJpZXMnO1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgYnJvd3NlciB3aW5kb3cgaXMgbWF4aW1pemVkLlxuICogQGZ1bmN0aW9uXG4gKiBAYXN5bmNcbiAqIEBuYW1lIGlzTWF4aW1pemVkXG4gKiBAcGFyYW0ge3N0cmluZyB8IG9iamVjdH0gd2luZG93RGVzY3JpcHRvciAtIFRoZSB0aXRsZSBvZiB0aGUgd2ViIHBhZ2Ugb3BlbmVkIGluIHRoZSB3aW5kb3cgb3IgYSBkZXNjcmlwdG9yIHJldHVybmVkIGJ5IGZpbmRXaW5kb3cuXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyb3dzZXIgd2luZG93IGlzIG1heGltaXplZFxuICoqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKHdpbmRvd0Rlc2NyaXB0b3IpIHtcbiAgICB2YXIgd2luZG93RGVzY3JpcHRpb24gPSB0eXBlb2Ygd2luZG93RGVzY3JpcHRvciA9PT0gJ3N0cmluZycgPyBhd2FpdCBmaW5kV2luZG93KHdpbmRvd0Rlc2NyaXB0b3IpIDogd2luZG93RGVzY3JpcHRvcjtcblxuICAgIGlmICghd2luZG93RGVzY3JpcHRpb24pXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBjb21tYW5kQXJndW1lbnRzID0gdm9pZCAwO1xuXG4gICAgLy8gVE9ETzogaW1wbGVtZW50IGZvciBtYWNPU1xuICAgIGlmIChPUy53aW4pXG4gICAgICAgIGNvbW1hbmRBcmd1bWVudHMgPSBbd2luZG93RGVzY3JpcHRpb24uaHduZF07XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZXhlY0ZpbGUoQklOQVJJRVMubWF4aW1pemUsIGNvbW1hbmRBcmd1bWVudHMuY29uY2F0KCdzdGF0dXMnKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoRU9MLCAnJykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIl19