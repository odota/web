"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const find_window_1 = __importDefault(require("./find-window"));
const os_family_1 = __importDefault(require("os-family"));
const exec_1 = require("../utils/exec");
const ensure_directory_1 = __importDefault(require("../utils/ensure-directory"));
const binaries_1 = __importDefault(require("../binaries"));
/**
 * Takes a screenshot of the browser window where the specified web page is opened.
 * @function
 * @async
 * @name screenshot
 * @param {string | object} windowDescriptor - Specifies the title of the web page opened in the window or a descriptor returned by findWindow.
 * @param {string} screenshotPath - Specifies the full path to the screenshot file. For example, D:\Temp\chrome-screenshot.jpg.
 */
async function default_1(windowDescriptor, screenshotPath) {
    if (!await ensure_directory_1.default(screenshotPath))
        return;
    var windowDescription = typeof windowDescriptor === 'string' ? await find_window_1.default(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return;
    var screenshotArguments = void 0;
    if (os_family_1.default.win)
        screenshotArguments = [windowDescription.hwnd, windowDescription.browser];
    else if (os_family_1.default.mac)
        screenshotArguments = [windowDescription.cocoaId];
    else
        screenshotArguments = [windowDescription.windowId];
    await exec_1.execFile(binaries_1.default.screenshot, screenshotArguments.concat(screenshotPath));
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuc2hvdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvc2NyZWVuc2hvdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdFQUF1QztBQUN2QywwREFBMkI7QUFDM0Isd0NBQXlDO0FBQ3pDLGlGQUF3RDtBQUN4RCwyREFBbUM7QUFHbkM7Ozs7Ozs7R0FPRztBQUNZLEtBQUssb0JBQVcsZ0JBQWdCLEVBQUUsY0FBYztJQUMzRCxJQUFJLENBQUMsTUFBTSwwQkFBZSxDQUFDLGNBQWMsQ0FBQztRQUN0QyxPQUFPO0lBRVgsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLGdCQUFnQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxxQkFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0lBRXJILElBQUksQ0FBQyxpQkFBaUI7UUFDbEIsT0FBTztJQUVYLElBQUksbUJBQW1CLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFFakMsSUFBSSxtQkFBRSxDQUFDLEdBQUc7UUFDTixtQkFBbUIsR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6RSxJQUFJLG1CQUFFLENBQUMsR0FBRztRQUNYLG1CQUFtQixHQUFHLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7O1FBRWxELG1CQUFtQixHQUFHLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdkQsTUFBTSxlQUFRLENBQUMsa0JBQVEsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQW5CRCw0QkFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmluZFdpbmRvdyBmcm9tICcuL2ZpbmQtd2luZG93JztcbmltcG9ydCBPUyBmcm9tICdvcy1mYW1pbHknO1xuaW1wb3J0IHsgZXhlY0ZpbGUgfSBmcm9tICcuLi91dGlscy9leGVjJztcbmltcG9ydCBlbnN1cmVEaXJlY3RvcnkgZnJvbSAnLi4vdXRpbHMvZW5zdXJlLWRpcmVjdG9yeSc7XG5pbXBvcnQgQklOQVJJRVMgZnJvbSAnLi4vYmluYXJpZXMnO1xuXG5cbi8qKlxuICogVGFrZXMgYSBzY3JlZW5zaG90IG9mIHRoZSBicm93c2VyIHdpbmRvdyB3aGVyZSB0aGUgc3BlY2lmaWVkIHdlYiBwYWdlIGlzIG9wZW5lZC5cbiAqIEBmdW5jdGlvblxuICogQGFzeW5jXG4gKiBAbmFtZSBzY3JlZW5zaG90XG4gKiBAcGFyYW0ge3N0cmluZyB8IG9iamVjdH0gd2luZG93RGVzY3JpcHRvciAtIFNwZWNpZmllcyB0aGUgdGl0bGUgb2YgdGhlIHdlYiBwYWdlIG9wZW5lZCBpbiB0aGUgd2luZG93IG9yIGEgZGVzY3JpcHRvciByZXR1cm5lZCBieSBmaW5kV2luZG93LlxuICogQHBhcmFtIHtzdHJpbmd9IHNjcmVlbnNob3RQYXRoIC0gU3BlY2lmaWVzIHRoZSBmdWxsIHBhdGggdG8gdGhlIHNjcmVlbnNob3QgZmlsZS4gRm9yIGV4YW1wbGUsIEQ6XFxUZW1wXFxjaHJvbWUtc2NyZWVuc2hvdC5qcGcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICh3aW5kb3dEZXNjcmlwdG9yLCBzY3JlZW5zaG90UGF0aCkge1xuICAgIGlmICghYXdhaXQgZW5zdXJlRGlyZWN0b3J5KHNjcmVlbnNob3RQYXRoKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHdpbmRvd0Rlc2NyaXB0aW9uID0gdHlwZW9mIHdpbmRvd0Rlc2NyaXB0b3IgPT09ICdzdHJpbmcnID8gYXdhaXQgZmluZFdpbmRvdyh3aW5kb3dEZXNjcmlwdG9yKSA6IHdpbmRvd0Rlc2NyaXB0b3I7XG5cbiAgICBpZiAoIXdpbmRvd0Rlc2NyaXB0aW9uKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgc2NyZWVuc2hvdEFyZ3VtZW50cyA9IHZvaWQgMDtcblxuICAgIGlmIChPUy53aW4pXG4gICAgICAgIHNjcmVlbnNob3RBcmd1bWVudHMgPSBbd2luZG93RGVzY3JpcHRpb24uaHduZCwgd2luZG93RGVzY3JpcHRpb24uYnJvd3Nlcl07XG4gICAgZWxzZSBpZiAoT1MubWFjKVxuICAgICAgICBzY3JlZW5zaG90QXJndW1lbnRzID0gW3dpbmRvd0Rlc2NyaXB0aW9uLmNvY29hSWRdO1xuICAgIGVsc2VcbiAgICAgICAgc2NyZWVuc2hvdEFyZ3VtZW50cyA9IFt3aW5kb3dEZXNjcmlwdGlvbi53aW5kb3dJZF07XG5cbiAgICBhd2FpdCBleGVjRmlsZShCSU5BUklFUy5zY3JlZW5zaG90LCBzY3JlZW5zaG90QXJndW1lbnRzLmNvbmNhdChzY3JlZW5zaG90UGF0aCkpO1xufVxuIl19