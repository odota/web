"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const find_window_1 = __importDefault(require("./find-window"));
const get_window_size_1 = __importDefault(require("./get-window-size"));
const delay_1 = __importDefault(require("../utils/delay"));
const DEFAULT_WATCHING_INTERVAL = 2000;
/**
 * Pause execution of a Promise chain while the specified browser window is opened.
 * @function
 * @name watchWindow
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow
 * @param {number} [watchingInterval=2000] - A time interval in milliseconds between checking the window state
 * @returns Promise<undefined> A Promise which resolves when the browser window is closed.
 **/
async function default_1(windowDescriptor, watchingInterval = DEFAULT_WATCHING_INTERVAL) {
    var windowDescription = typeof windowDescriptor === 'string' ? await find_window_1.default(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return;
    var windowSize = await get_window_size_1.default(windowDescription);
    while (windowSize && windowSize.width && windowSize.height) {
        await delay_1.default(watchingInterval);
        windowSize = await get_window_size_1.default(windowDescription);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2gtd2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS93YXRjaC13aW5kb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBdUM7QUFDdkMsd0VBQThDO0FBQzlDLDJEQUFtQztBQUduQyxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQztBQUV2Qzs7Ozs7OztJQU9JO0FBQ1csS0FBSyxvQkFBVyxnQkFBZ0IsRUFBRSxnQkFBZ0IsR0FBRyx5QkFBeUI7SUFDekYsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLGdCQUFnQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxxQkFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0lBRXJILElBQUksQ0FBQyxpQkFBaUI7UUFDbEIsT0FBTztJQUVYLElBQUksVUFBVSxHQUFHLE1BQU0seUJBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXhELE9BQU8sVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUN4RCxNQUFNLGVBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlCLFVBQVUsR0FBRyxNQUFNLHlCQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUN2RDtBQUNMLENBQUM7QUFaRCw0QkFZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaW5kV2luZG93IGZyb20gJy4vZmluZC13aW5kb3cnO1xuaW1wb3J0IGdldFdpbmRvd1NpemUgZnJvbSAnLi9nZXQtd2luZG93LXNpemUnO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4uL3V0aWxzL2RlbGF5JztcblxuXG5jb25zdCBERUZBVUxUX1dBVENISU5HX0lOVEVSVkFMID0gMjAwMDtcblxuLyoqXG4gKiBQYXVzZSBleGVjdXRpb24gb2YgYSBQcm9taXNlIGNoYWluIHdoaWxlIHRoZSBzcGVjaWZpZWQgYnJvd3NlciB3aW5kb3cgaXMgb3BlbmVkLlxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSB3YXRjaFdpbmRvd1xuICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IHdpbmRvd0Rlc2NyaXB0b3IgLSBUaGUgdGl0bGUgb2YgdGhlIHdlYiBwYWdlIG9wZW5lZCBpbiB0aGUgd2luZG93IG9yIGEgZGVzY3JpcHRvciByZXR1cm5lZCBieSBmaW5kV2luZG93XG4gKiBAcGFyYW0ge251bWJlcn0gW3dhdGNoaW5nSW50ZXJ2YWw9MjAwMF0gLSBBIHRpbWUgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gY2hlY2tpbmcgdGhlIHdpbmRvdyBzdGF0ZVxuICogQHJldHVybnMgUHJvbWlzZTx1bmRlZmluZWQ+IEEgUHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aGVuIHRoZSBicm93c2VyIHdpbmRvdyBpcyBjbG9zZWQuXG4gKiovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAod2luZG93RGVzY3JpcHRvciwgd2F0Y2hpbmdJbnRlcnZhbCA9IERFRkFVTFRfV0FUQ0hJTkdfSU5URVJWQUwpIHtcbiAgICB2YXIgd2luZG93RGVzY3JpcHRpb24gPSB0eXBlb2Ygd2luZG93RGVzY3JpcHRvciA9PT0gJ3N0cmluZycgPyBhd2FpdCBmaW5kV2luZG93KHdpbmRvd0Rlc2NyaXB0b3IpIDogd2luZG93RGVzY3JpcHRvcjtcblxuICAgIGlmICghd2luZG93RGVzY3JpcHRpb24pXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciB3aW5kb3dTaXplID0gYXdhaXQgZ2V0V2luZG93U2l6ZSh3aW5kb3dEZXNjcmlwdGlvbik7XG5cbiAgICB3aGlsZSAod2luZG93U2l6ZSAmJiB3aW5kb3dTaXplLndpZHRoICYmIHdpbmRvd1NpemUuaGVpZ2h0KSB7XG4gICAgICAgIGF3YWl0IGRlbGF5KHdhdGNoaW5nSW50ZXJ2YWwpO1xuICAgICAgICB3aW5kb3dTaXplID0gYXdhaXQgZ2V0V2luZG93U2l6ZSh3aW5kb3dEZXNjcmlwdGlvbik7XG4gICAgfVxufVxuIl19