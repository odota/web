"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const find_window_1 = __importDefault(require("./find-window"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
function getBoundsFromString(boundsString) {
    return boundsString.split('\n');
}
async function getWindowBounds(processId, windowId) {
    var boundsString = await exec_1.execFile(binaries_1.default.getWindowBounds, [processId, windowId]);
    return getBoundsFromString(boundsString);
}
async function getWindowMaxBounds(processId, windowId) {
    var windowBounds = await getWindowBounds(processId, windowId);
    var maxBoundsString = await exec_1.execFile(binaries_1.default.getWindowMaxBounds, windowBounds);
    return getBoundsFromString(maxBoundsString);
}
async function maximizeWindowMac(windowDescription) {
    var { processId, windowId } = windowDescription;
    var windowBounds = await getWindowMaxBounds(processId, windowId);
    await exec_1.execFile(binaries_1.default.setWindowBounds, [processId, windowId].concat(windowBounds));
}
/**
 * Maximizes the specified browser window.
 * @function
 * @async
 * @name maximize
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow.
 **/
async function default_1(windowDescriptor) {
    var windowDescription = typeof windowDescriptor === 'string' ? await find_window_1.default(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return;
    var commandArguments = void 0;
    if (os_family_1.default.win)
        commandArguments = [windowDescription.hwnd];
    else if (os_family_1.default.linux)
        commandArguments = [windowDescription.windowId];
    else if (os_family_1.default.mac) {
        await maximizeWindowMac(windowDescription);
        return;
    }
    else
        return;
    await exec_1.execFile(binaries_1.default.maximize, commandArguments);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4aW1pemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL21heGltaXplLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQTJCO0FBQzNCLGdFQUF1QztBQUN2Qyx3Q0FBeUM7QUFDekMsMkRBQW1DO0FBRW5DLFNBQVMsbUJBQW1CLENBQUUsWUFBWTtJQUN0QyxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELEtBQUssVUFBVSxlQUFlLENBQUUsU0FBUyxFQUFFLFFBQVE7SUFDL0MsSUFBSSxZQUFZLEdBQUcsTUFBTSxlQUFRLENBQUMsa0JBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUVuRixPQUFPLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxLQUFLLFVBQVUsa0JBQWtCLENBQUUsU0FBUyxFQUFFLFFBQVE7SUFDbEQsSUFBSSxZQUFZLEdBQU0sTUFBTSxlQUFlLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2pFLElBQUksZUFBZSxHQUFHLE1BQU0sZUFBUSxDQUFDLGtCQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFaEYsT0FBTyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsS0FBSyxVQUFVLGlCQUFpQixDQUFFLGlCQUFpQjtJQUMvQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLGlCQUFpQixDQUFDO0lBQ2hELElBQUksWUFBWSxHQUFhLE1BQU0sa0JBQWtCLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sZUFBUSxDQUFDLGtCQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFDRDs7Ozs7O0lBTUk7QUFDVyxLQUFLLG9CQUFXLGdCQUFnQjtJQUMzQyxJQUFJLGlCQUFpQixHQUFHLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLHFCQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFFckgsSUFBSSxDQUFDLGlCQUFpQjtRQUNsQixPQUFPO0lBRVgsSUFBSSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUU5QixJQUFJLG1CQUFFLENBQUMsR0FBRztRQUNOLGdCQUFnQixHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0MsSUFBSSxtQkFBRSxDQUFDLEtBQUs7UUFDYixnQkFBZ0IsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9DLElBQUksbUJBQUUsQ0FBQyxHQUFHLEVBQUU7UUFDYixNQUFNLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFM0MsT0FBTztLQUNWOztRQUVHLE9BQU87SUFFWCxNQUFNLGVBQVEsQ0FBQyxrQkFBUSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFyQkQsNEJBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgZmluZFdpbmRvdyBmcm9tICcuL2ZpbmQtd2luZG93JztcbmltcG9ydCB7IGV4ZWNGaWxlIH0gZnJvbSAnLi4vdXRpbHMvZXhlYyc7XG5pbXBvcnQgQklOQVJJRVMgZnJvbSAnLi4vYmluYXJpZXMnO1xuXG5mdW5jdGlvbiBnZXRCb3VuZHNGcm9tU3RyaW5nIChib3VuZHNTdHJpbmcpIHtcbiAgICByZXR1cm4gYm91bmRzU3RyaW5nLnNwbGl0KCdcXG4nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93Qm91bmRzIChwcm9jZXNzSWQsIHdpbmRvd0lkKSB7XG4gICAgdmFyIGJvdW5kc1N0cmluZyA9IGF3YWl0IGV4ZWNGaWxlKEJJTkFSSUVTLmdldFdpbmRvd0JvdW5kcywgW3Byb2Nlc3NJZCwgd2luZG93SWRdKTtcblxuICAgIHJldHVybiBnZXRCb3VuZHNGcm9tU3RyaW5nKGJvdW5kc1N0cmluZyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFdpbmRvd01heEJvdW5kcyAocHJvY2Vzc0lkLCB3aW5kb3dJZCkge1xuICAgIHZhciB3aW5kb3dCb3VuZHMgICAgPSBhd2FpdCBnZXRXaW5kb3dCb3VuZHMocHJvY2Vzc0lkLCB3aW5kb3dJZCk7XG4gICAgdmFyIG1heEJvdW5kc1N0cmluZyA9IGF3YWl0IGV4ZWNGaWxlKEJJTkFSSUVTLmdldFdpbmRvd01heEJvdW5kcywgd2luZG93Qm91bmRzKTtcblxuICAgIHJldHVybiBnZXRCb3VuZHNGcm9tU3RyaW5nKG1heEJvdW5kc1N0cmluZyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1heGltaXplV2luZG93TWFjICh3aW5kb3dEZXNjcmlwdGlvbikge1xuICAgIHZhciB7IHByb2Nlc3NJZCwgd2luZG93SWQgfSA9IHdpbmRvd0Rlc2NyaXB0aW9uO1xuICAgIHZhciB3aW5kb3dCb3VuZHMgICAgICAgICAgID0gYXdhaXQgZ2V0V2luZG93TWF4Qm91bmRzKHByb2Nlc3NJZCwgd2luZG93SWQpO1xuXG4gICAgYXdhaXQgZXhlY0ZpbGUoQklOQVJJRVMuc2V0V2luZG93Qm91bmRzLCBbcHJvY2Vzc0lkLCB3aW5kb3dJZF0uY29uY2F0KHdpbmRvd0JvdW5kcykpO1xufVxuLyoqXG4gKiBNYXhpbWl6ZXMgdGhlIHNwZWNpZmllZCBicm93c2VyIHdpbmRvdy5cbiAqIEBmdW5jdGlvblxuICogQGFzeW5jXG4gKiBAbmFtZSBtYXhpbWl6ZVxuICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IHdpbmRvd0Rlc2NyaXB0b3IgLSBUaGUgdGl0bGUgb2YgdGhlIHdlYiBwYWdlIG9wZW5lZCBpbiB0aGUgd2luZG93IG9yIGEgZGVzY3JpcHRvciByZXR1cm5lZCBieSBmaW5kV2luZG93LlxuICoqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKHdpbmRvd0Rlc2NyaXB0b3IpIHtcbiAgICB2YXIgd2luZG93RGVzY3JpcHRpb24gPSB0eXBlb2Ygd2luZG93RGVzY3JpcHRvciA9PT0gJ3N0cmluZycgPyBhd2FpdCBmaW5kV2luZG93KHdpbmRvd0Rlc2NyaXB0b3IpIDogd2luZG93RGVzY3JpcHRvcjtcblxuICAgIGlmICghd2luZG93RGVzY3JpcHRpb24pXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciBjb21tYW5kQXJndW1lbnRzID0gdm9pZCAwO1xuXG4gICAgaWYgKE9TLndpbilcbiAgICAgICAgY29tbWFuZEFyZ3VtZW50cyA9IFt3aW5kb3dEZXNjcmlwdGlvbi5od25kXTtcbiAgICBlbHNlIGlmIChPUy5saW51eClcbiAgICAgICAgY29tbWFuZEFyZ3VtZW50cyA9IFt3aW5kb3dEZXNjcmlwdGlvbi53aW5kb3dJZF07XG4gICAgZWxzZSBpZiAoT1MubWFjKSB7XG4gICAgICAgIGF3YWl0IG1heGltaXplV2luZG93TWFjKHdpbmRvd0Rlc2NyaXB0aW9uKTtcblxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgYXdhaXQgZXhlY0ZpbGUoQklOQVJJRVMubWF4aW1pemUsIGNvbW1hbmRBcmd1bWVudHMpO1xufVxuIl19