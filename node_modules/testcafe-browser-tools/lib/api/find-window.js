"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const os_1 = require("os");
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
const EXIT_CODES = __importStar(require("../exit-codes"));
const errors_1 = require("../errors");
/**
 * Retrieves a platform-specific window descriptor for the window that contains a web page with the specified title.
 * @function
 * @async
 * @name findWindow
 * @param {string} pageTitle - The title of the web page opened in a window whose descriptor should be retrieved.
 * @returns {object} a platform-specific window descriptor that can be used as a window identifier.
 **/
async function runFindWindowBinary(pageTitle) {
    try {
        return await exec_1.execFile(binaries_1.default.findWindow, [pageTitle]);
    }
    catch (err) {
        if (!(err instanceof errors_1.NativeBinaryHasFailedError))
            throw err;
        if (err.data.exitCode === EXIT_CODES.WINDOW_NOT_FOUND)
            return null;
        if (err.data.exitCode === EXIT_CODES.DISPLAY_NOT_FOUND)
            throw new errors_1.UnableToOpenDisplayError(err.data);
        if (os_family_1.default.mac && err.data.exitCode === EXIT_CODES.PERMISSION_ERROR)
            throw new errors_1.UnableToAccessScreenRecordingAPIError(err.data);
        throw err;
    }
}
async function default_1(pageTitle) {
    var res = await runFindWindowBinary(pageTitle);
    if (!res)
        return res;
    var windowParams = res.split(os_1.EOL);
    if (os_family_1.default.win)
        return { hwnd: windowParams[0], browser: windowParams[1] };
    if (os_family_1.default.mac)
        return { processId: windowParams[0], cocoaId: windowParams[1], windowId: windowParams[2] };
    if (os_family_1.default.linux)
        return { windowId: windowParams[0] };
    return null;
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC13aW5kb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2ZpbmQtd2luZG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBEQUEyQjtBQUMzQiwyQkFBeUI7QUFDekIsd0NBQXlDO0FBQ3pDLDJEQUFtQztBQUNuQywwREFBNEM7QUFDNUMsc0NBSW1CO0FBR25COzs7Ozs7O0lBT0k7QUFDSixLQUFLLFVBQVUsbUJBQW1CLENBQUUsU0FBUztJQUN6QyxJQUFJO1FBQ0EsT0FBTyxNQUFNLGVBQVEsQ0FBQyxrQkFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxtQ0FBMEIsQ0FBQztZQUM1QyxNQUFNLEdBQUcsQ0FBQztRQUVkLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDLGdCQUFnQjtZQUNqRCxPQUFPLElBQUksQ0FBQztRQUVoQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxpQkFBaUI7WUFDbEQsTUFBTSxJQUFJLGlDQUF3QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRCxJQUFJLG1CQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxnQkFBZ0I7WUFDM0QsTUFBTSxJQUFJLDhDQUFxQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU5RCxNQUFNLEdBQUcsQ0FBQztLQUNiO0FBQ0wsQ0FBQztBQUVjLEtBQUssb0JBQVcsU0FBUztJQUNwQyxJQUFJLEdBQUcsR0FBRyxNQUFNLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRS9DLElBQUksQ0FBQyxHQUFHO1FBQ0osT0FBTyxHQUFHLENBQUM7SUFFZixJQUFJLFlBQVksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQUcsQ0FBQyxDQUFDO0lBRWxDLElBQUksbUJBQUUsQ0FBQyxHQUFHO1FBQ04sT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRS9ELElBQUksbUJBQUUsQ0FBQyxHQUFHO1FBQ04sT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFL0YsSUFBSSxtQkFBRSxDQUFDLEtBQUs7UUFDUixPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRXpDLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFsQkQsNEJBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgeyBleGVjRmlsZSB9IGZyb20gJy4uL3V0aWxzL2V4ZWMnO1xuaW1wb3J0IEJJTkFSSUVTIGZyb20gJy4uL2JpbmFyaWVzJztcbmltcG9ydCAqIGFzIEVYSVRfQ09ERVMgZnJvbSAnLi4vZXhpdC1jb2Rlcyc7XG5pbXBvcnQge1xuICAgIE5hdGl2ZUJpbmFyeUhhc0ZhaWxlZEVycm9yLFxuICAgIFVuYWJsZVRvQWNjZXNzU2NyZWVuUmVjb3JkaW5nQVBJRXJyb3IsXG4gICAgVW5hYmxlVG9PcGVuRGlzcGxheUVycm9yXG59IGZyb20gJy4uL2Vycm9ycyc7XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBwbGF0Zm9ybS1zcGVjaWZpYyB3aW5kb3cgZGVzY3JpcHRvciBmb3IgdGhlIHdpbmRvdyB0aGF0IGNvbnRhaW5zIGEgd2ViIHBhZ2Ugd2l0aCB0aGUgc3BlY2lmaWVkIHRpdGxlLlxuICogQGZ1bmN0aW9uXG4gKiBAYXN5bmNcbiAqIEBuYW1lIGZpbmRXaW5kb3dcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWdlVGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIHdlYiBwYWdlIG9wZW5lZCBpbiBhIHdpbmRvdyB3aG9zZSBkZXNjcmlwdG9yIHNob3VsZCBiZSByZXRyaWV2ZWQuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBhIHBsYXRmb3JtLXNwZWNpZmljIHdpbmRvdyBkZXNjcmlwdG9yIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB3aW5kb3cgaWRlbnRpZmllci5cbiAqKi9cbmFzeW5jIGZ1bmN0aW9uIHJ1bkZpbmRXaW5kb3dCaW5hcnkgKHBhZ2VUaXRsZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBleGVjRmlsZShCSU5BUklFUy5maW5kV2luZG93LCBbcGFnZVRpdGxlXSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgTmF0aXZlQmluYXJ5SGFzRmFpbGVkRXJyb3IpKVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuXG4gICAgICAgIGlmIChlcnIuZGF0YS5leGl0Q29kZSA9PT0gRVhJVF9DT0RFUy5XSU5ET1dfTk9UX0ZPVU5EKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgaWYgKGVyci5kYXRhLmV4aXRDb2RlID09PSBFWElUX0NPREVTLkRJU1BMQVlfTk9UX0ZPVU5EKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuYWJsZVRvT3BlbkRpc3BsYXlFcnJvcihlcnIuZGF0YSk7XG5cbiAgICAgICAgaWYgKE9TLm1hYyAmJiBlcnIuZGF0YS5leGl0Q29kZSA9PT0gRVhJVF9DT0RFUy5QRVJNSVNTSU9OX0VSUk9SKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuYWJsZVRvQWNjZXNzU2NyZWVuUmVjb3JkaW5nQVBJRXJyb3IoZXJyLmRhdGEpO1xuXG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChwYWdlVGl0bGUpIHtcbiAgICB2YXIgcmVzID0gYXdhaXQgcnVuRmluZFdpbmRvd0JpbmFyeShwYWdlVGl0bGUpO1xuXG4gICAgaWYgKCFyZXMpXG4gICAgICAgIHJldHVybiByZXM7XG5cbiAgICB2YXIgd2luZG93UGFyYW1zID0gcmVzLnNwbGl0KEVPTCk7XG5cbiAgICBpZiAoT1Mud2luKVxuICAgICAgICByZXR1cm4geyBod25kOiB3aW5kb3dQYXJhbXNbMF0sIGJyb3dzZXI6IHdpbmRvd1BhcmFtc1sxXSB9O1xuXG4gICAgaWYgKE9TLm1hYylcbiAgICAgICAgcmV0dXJuIHsgcHJvY2Vzc0lkOiB3aW5kb3dQYXJhbXNbMF0sIGNvY29hSWQ6IHdpbmRvd1BhcmFtc1sxXSwgd2luZG93SWQ6IHdpbmRvd1BhcmFtc1syXSB9O1xuXG4gICAgaWYgKE9TLmxpbnV4KVxuICAgICAgICByZXR1cm4geyB3aW5kb3dJZDogd2luZG93UGFyYW1zWzBdIH07XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cbiJdfQ==