"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const os_1 = require("os");
const os_family_1 = __importDefault(require("os-family"));
const read_file_relative_1 = require("read-file-relative");
const linux_platform_info_1 = require("linux-platform-info");
const package_json_1 = require("../package.json");
const HIDDEN_DIR_PREFIX = '.';
const MAC_APP_NAME = 'TestCafe Browser Tools.app';
const MAC_APP_DIR = path_1.join(os_1.homedir(), HIDDEN_DIR_PREFIX + package_json_1.name, MAC_APP_NAME);
const MAC_APP_LOCAL_DIR = path_1.join(__dirname, `../bin/mac/${MAC_APP_NAME}`);
const MAC_BINARY_PATH = binary => path_1.join(MAC_APP_DIR, `Contents/MacOS/${binary}`);
var BINARIES = void 0;
if (os_family_1.default.win) {
    BINARIES = {
        findWindow: read_file_relative_1.toAbsPath('../bin/win/find-window.exe'),
        getWindowSize: read_file_relative_1.toAbsPath('../bin/win/get-window-size.exe'),
        close: read_file_relative_1.toAbsPath('../bin/win/close.exe'),
        screenshot: read_file_relative_1.toAbsPath('../bin/win/screenshot.exe'),
        generateThumbnail: read_file_relative_1.toAbsPath('../bin/win/generate-thumbnail.exe'),
        resize: read_file_relative_1.toAbsPath('../bin/win/resize.exe'),
        maximize: read_file_relative_1.toAbsPath('../bin/win/maximize.exe'),
        bringToFront: read_file_relative_1.toAbsPath('../bin/win/bring-to-front.exe')
    };
}
else if (os_family_1.default.mac) {
    BINARIES = {
        app: MAC_BINARY_PATH(package_json_1.name),
        appDir: MAC_APP_DIR,
        appLocalDir: MAC_APP_LOCAL_DIR,
        main: read_file_relative_1.toAbsPath('../bin/mac/main'),
        open: 'open',
        findWindow: 'find-window',
        getWindowSize: 'get-window-size',
        getWindowBounds: 'get-window-bounds',
        getWindowMaxBounds: 'get-window-max-bounds',
        setWindowBounds: 'set-window-bounds',
        close: 'close',
        screenshot: 'screenshot',
        resize: 'resize',
        generateThumbnail: 'generate-thumbnail',
        bringToFront: 'bring-to-front'
    };
}
else if (os_family_1.default.linux) {
    BINARIES = {
        findWindow: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/find-window`),
        close: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/close`),
        getWindowSize: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/get-window-size`),
        resize: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/resize`),
        maximize: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/maximize`),
        screenshot: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/screenshot`),
        generateThumbnail: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/generate-thumbnail`),
        bringToFront: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/bring-to-front`)
    };
}
else
    BINARIES = {};
exports.default = BINARIES;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmluYXJpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBNEI7QUFDNUIsMkJBQTZCO0FBQzdCLDBEQUEyQjtBQUMzQiwyREFBK0M7QUFDL0MsNkRBQStDO0FBQy9DLGtEQUFzRDtBQUd0RCxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUM5QixNQUFNLFlBQVksR0FBUSw0QkFBNEIsQ0FBQztBQUN2RCxNQUFNLFdBQVcsR0FBUyxXQUFJLENBQUMsWUFBTyxFQUFFLEVBQUUsaUJBQWlCLEdBQUcsbUJBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6RixNQUFNLGlCQUFpQixHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sZUFBZSxHQUFLLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBSSxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUVsRixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUV0QixJQUFJLG1CQUFFLENBQUMsR0FBRyxFQUFFO0lBQ1IsUUFBUSxHQUFHO1FBQ1AsVUFBVSxFQUFTLDhCQUFTLENBQUMsNEJBQTRCLENBQUM7UUFDMUQsYUFBYSxFQUFNLDhCQUFTLENBQUMsZ0NBQWdDLENBQUM7UUFDOUQsS0FBSyxFQUFjLDhCQUFTLENBQUMsc0JBQXNCLENBQUM7UUFDcEQsVUFBVSxFQUFTLDhCQUFTLENBQUMsMkJBQTJCLENBQUM7UUFDekQsaUJBQWlCLEVBQUUsOEJBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztRQUNqRSxNQUFNLEVBQWEsOEJBQVMsQ0FBQyx1QkFBdUIsQ0FBQztRQUNyRCxRQUFRLEVBQVcsOEJBQVMsQ0FBQyx5QkFBeUIsQ0FBQztRQUN2RCxZQUFZLEVBQU8sOEJBQVMsQ0FBQywrQkFBK0IsQ0FBQztLQUNoRSxDQUFDO0NBQ0w7S0FDSSxJQUFJLG1CQUFFLENBQUMsR0FBRyxFQUFFO0lBQ2IsUUFBUSxHQUFHO1FBQ1AsR0FBRyxFQUFpQixlQUFlLENBQUMsbUJBQVcsQ0FBQztRQUNoRCxNQUFNLEVBQWMsV0FBVztRQUMvQixXQUFXLEVBQVMsaUJBQWlCO1FBQ3JDLElBQUksRUFBZ0IsOEJBQVMsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRCxJQUFJLEVBQWdCLE1BQU07UUFDMUIsVUFBVSxFQUFVLGFBQWE7UUFDakMsYUFBYSxFQUFPLGlCQUFpQjtRQUNyQyxlQUFlLEVBQUssbUJBQW1CO1FBQ3ZDLGtCQUFrQixFQUFFLHVCQUF1QjtRQUMzQyxlQUFlLEVBQUssbUJBQW1CO1FBQ3ZDLEtBQUssRUFBZSxPQUFPO1FBQzNCLFVBQVUsRUFBVSxZQUFZO1FBQ2hDLE1BQU0sRUFBYyxRQUFRO1FBQzVCLGlCQUFpQixFQUFHLG9CQUFvQjtRQUN4QyxZQUFZLEVBQVEsZ0JBQWdCO0tBQ3ZDLENBQUM7Q0FDTDtLQUNJLElBQUksbUJBQUUsQ0FBQyxLQUFLLEVBQUU7SUFDZixRQUFRLEdBQUc7UUFDUCxVQUFVLEVBQVMsOEJBQVMsQ0FBQyxnQkFBZ0IsOEJBQVEsY0FBYyxDQUFDO1FBQ3BFLEtBQUssRUFBYyw4QkFBUyxDQUFDLGdCQUFnQiw4QkFBUSxRQUFRLENBQUM7UUFDOUQsYUFBYSxFQUFNLDhCQUFTLENBQUMsZ0JBQWdCLDhCQUFRLGtCQUFrQixDQUFDO1FBQ3hFLE1BQU0sRUFBYSw4QkFBUyxDQUFDLGdCQUFnQiw4QkFBUSxTQUFTLENBQUM7UUFDL0QsUUFBUSxFQUFXLDhCQUFTLENBQUMsZ0JBQWdCLDhCQUFRLFdBQVcsQ0FBQztRQUNqRSxVQUFVLEVBQVMsOEJBQVMsQ0FBQyxnQkFBZ0IsOEJBQVEsYUFBYSxDQUFDO1FBQ25FLGlCQUFpQixFQUFFLDhCQUFTLENBQUMsZ0JBQWdCLDhCQUFRLHFCQUFxQixDQUFDO1FBQzNFLFlBQVksRUFBTyw4QkFBUyxDQUFDLGdCQUFnQiw4QkFBUSxpQkFBaUIsQ0FBQztLQUMxRSxDQUFDO0NBQ0w7O0lBRUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUVsQixrQkFBZSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBob21lZGlyIH0gZnJvbSAnb3MnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyB0b0Fic1BhdGggfSBmcm9tICdyZWFkLWZpbGUtcmVsYXRpdmUnO1xuaW1wb3J0IHsgcGxhdGZvcm0gfSBmcm9tICdsaW51eC1wbGF0Zm9ybS1pbmZvJztcbmltcG9ydCB7IG5hbWUgYXMgcGFja2FnZU5hbWUgfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuXG5cbmNvbnN0IEhJRERFTl9ESVJfUFJFRklYID0gJy4nO1xuY29uc3QgTUFDX0FQUF9OQU1FICAgICAgPSAnVGVzdENhZmUgQnJvd3NlciBUb29scy5hcHAnO1xuY29uc3QgTUFDX0FQUF9ESVIgICAgICAgPSBqb2luKGhvbWVkaXIoKSwgSElEREVOX0RJUl9QUkVGSVggKyBwYWNrYWdlTmFtZSwgTUFDX0FQUF9OQU1FKTtcbmNvbnN0IE1BQ19BUFBfTE9DQUxfRElSID0gam9pbihfX2Rpcm5hbWUsIGAuLi9iaW4vbWFjLyR7TUFDX0FQUF9OQU1FfWApO1xuY29uc3QgTUFDX0JJTkFSWV9QQVRIICAgPSBiaW5hcnkgPT4gam9pbihNQUNfQVBQX0RJUiwgYENvbnRlbnRzL01hY09TLyR7YmluYXJ5fWApO1xuXG52YXIgQklOQVJJRVMgPSB2b2lkIDA7XG5cbmlmIChPUy53aW4pIHtcbiAgICBCSU5BUklFUyA9IHtcbiAgICAgICAgZmluZFdpbmRvdzogICAgICAgIHRvQWJzUGF0aCgnLi4vYmluL3dpbi9maW5kLXdpbmRvdy5leGUnKSxcbiAgICAgICAgZ2V0V2luZG93U2l6ZTogICAgIHRvQWJzUGF0aCgnLi4vYmluL3dpbi9nZXQtd2luZG93LXNpemUuZXhlJyksXG4gICAgICAgIGNsb3NlOiAgICAgICAgICAgICB0b0Fic1BhdGgoJy4uL2Jpbi93aW4vY2xvc2UuZXhlJyksXG4gICAgICAgIHNjcmVlbnNob3Q6ICAgICAgICB0b0Fic1BhdGgoJy4uL2Jpbi93aW4vc2NyZWVuc2hvdC5leGUnKSxcbiAgICAgICAgZ2VuZXJhdGVUaHVtYm5haWw6IHRvQWJzUGF0aCgnLi4vYmluL3dpbi9nZW5lcmF0ZS10aHVtYm5haWwuZXhlJyksXG4gICAgICAgIHJlc2l6ZTogICAgICAgICAgICB0b0Fic1BhdGgoJy4uL2Jpbi93aW4vcmVzaXplLmV4ZScpLFxuICAgICAgICBtYXhpbWl6ZTogICAgICAgICAgdG9BYnNQYXRoKCcuLi9iaW4vd2luL21heGltaXplLmV4ZScpLFxuICAgICAgICBicmluZ1RvRnJvbnQ6ICAgICAgdG9BYnNQYXRoKCcuLi9iaW4vd2luL2JyaW5nLXRvLWZyb250LmV4ZScpXG4gICAgfTtcbn1cbmVsc2UgaWYgKE9TLm1hYykge1xuICAgIEJJTkFSSUVTID0ge1xuICAgICAgICBhcHA6ICAgICAgICAgICAgICAgIE1BQ19CSU5BUllfUEFUSChwYWNrYWdlTmFtZSksXG4gICAgICAgIGFwcERpcjogICAgICAgICAgICAgTUFDX0FQUF9ESVIsXG4gICAgICAgIGFwcExvY2FsRGlyOiAgICAgICAgTUFDX0FQUF9MT0NBTF9ESVIsXG4gICAgICAgIG1haW46ICAgICAgICAgICAgICAgdG9BYnNQYXRoKCcuLi9iaW4vbWFjL21haW4nKSxcbiAgICAgICAgb3BlbjogICAgICAgICAgICAgICAnb3BlbicsXG4gICAgICAgIGZpbmRXaW5kb3c6ICAgICAgICAgJ2ZpbmQtd2luZG93JyxcbiAgICAgICAgZ2V0V2luZG93U2l6ZTogICAgICAnZ2V0LXdpbmRvdy1zaXplJyxcbiAgICAgICAgZ2V0V2luZG93Qm91bmRzOiAgICAnZ2V0LXdpbmRvdy1ib3VuZHMnLFxuICAgICAgICBnZXRXaW5kb3dNYXhCb3VuZHM6ICdnZXQtd2luZG93LW1heC1ib3VuZHMnLFxuICAgICAgICBzZXRXaW5kb3dCb3VuZHM6ICAgICdzZXQtd2luZG93LWJvdW5kcycsXG4gICAgICAgIGNsb3NlOiAgICAgICAgICAgICAgJ2Nsb3NlJyxcbiAgICAgICAgc2NyZWVuc2hvdDogICAgICAgICAnc2NyZWVuc2hvdCcsXG4gICAgICAgIHJlc2l6ZTogICAgICAgICAgICAgJ3Jlc2l6ZScsXG4gICAgICAgIGdlbmVyYXRlVGh1bWJuYWlsOiAgJ2dlbmVyYXRlLXRodW1ibmFpbCcsXG4gICAgICAgIGJyaW5nVG9Gcm9udDogICAgICAgJ2JyaW5nLXRvLWZyb250J1xuICAgIH07XG59XG5lbHNlIGlmIChPUy5saW51eCkge1xuICAgIEJJTkFSSUVTID0ge1xuICAgICAgICBmaW5kV2luZG93OiAgICAgICAgdG9BYnNQYXRoKGAuLi9iaW4vbGludXgvJHtwbGF0Zm9ybX0vZmluZC13aW5kb3dgKSxcbiAgICAgICAgY2xvc2U6ICAgICAgICAgICAgIHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L2Nsb3NlYCksXG4gICAgICAgIGdldFdpbmRvd1NpemU6ICAgICB0b0Fic1BhdGgoYC4uL2Jpbi9saW51eC8ke3BsYXRmb3JtfS9nZXQtd2luZG93LXNpemVgKSxcbiAgICAgICAgcmVzaXplOiAgICAgICAgICAgIHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L3Jlc2l6ZWApLFxuICAgICAgICBtYXhpbWl6ZTogICAgICAgICAgdG9BYnNQYXRoKGAuLi9iaW4vbGludXgvJHtwbGF0Zm9ybX0vbWF4aW1pemVgKSxcbiAgICAgICAgc2NyZWVuc2hvdDogICAgICAgIHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L3NjcmVlbnNob3RgKSxcbiAgICAgICAgZ2VuZXJhdGVUaHVtYm5haWw6IHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L2dlbmVyYXRlLXRodW1ibmFpbGApLFxuICAgICAgICBicmluZ1RvRnJvbnQ6ICAgICAgdG9BYnNQYXRoKGAuLi9iaW4vbGludXgvJHtwbGF0Zm9ybX0vYnJpbmctdG8tZnJvbnRgKVxuICAgIH07XG59XG5lbHNlXG4gICAgQklOQVJJRVMgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgQklOQVJJRVM7XG4iXX0=