"use strict";

var _tokentype = require("./tokentype.js");

var _state = require("./state.js");

var _whitespace = require("./whitespace.js");

var _identifier = require("./identifier.js");

var _util = require("./util.js");

var _parseutil = require("./parseutil.js");

var _scopeflags = require("./scopeflags.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

const pp = _state.Parser.prototype; // ### Statement parsing
// Parse a program. Initializes the parser, reads any number of
// statements, and wraps them in a Program node.  Optionally takes a
// `program` argument.  If present, the statements will be appended
// to its body instead of creating a new node.

pp.parseTopLevel = function (node) {
  let exports = Object.create(null);
  if (!node.body) node.body = [];

  while (this.type !== _tokentype.types.eof) {
    let stmt = this.parseStatement(null, true, exports);
    node.body.push(stmt);
  }

  if (this.inModule) for (var _i = 0, _Object$keys = Object.keys(this.undefinedExports); _i < _Object$keys.length; _i++) {
    let name = _Object$keys[_i];
    this.raiseRecoverable(this.undefinedExports[name].start, `Export '${name}' is not defined`);
  }
  this.adaptDirectivePrologue(node.body);
  this.next();
  node.sourceType = this.options.sourceType;
  return this.finishNode(node, "Program");
};

const loopLabel = {
  kind: "loop"
},
      switchLabel = {
  kind: "switch"
};

pp.isLet = function (context) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
  _whitespace.skipWhiteSpace.lastIndex = this.pos;

  let skip = _whitespace.skipWhiteSpace.exec(this.input);

  let next = this.pos + skip[0].length,
      nextCh = this.input.charCodeAt(next); // For ambiguous cases, determine if a LexicalDeclaration (or only a
  // Statement) is allowed here. If context is not empty then only a Statement
  // is allowed. However, `let [` is an explicit negative lookahead for
  // ExpressionStatement, so special-case it first.

  if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) return true; // '[', '/', astral

  if (context) return false;
  if (nextCh === 123) return true; // '{'

  if ((0, _identifier.isIdentifierStart)(nextCh, true)) {
    let pos = next + 1;

    while ((0, _identifier.isIdentifierChar)(nextCh = this.input.charCodeAt(pos), true)) ++pos;

    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) return true;
    let ident = this.input.slice(next, pos);
    if (!_identifier.keywordRelationalOperator.test(ident)) return true;
  }

  return false;
}; // check 'async [no LineTerminator here] function'
// - 'async /*foo*/ function' is OK.
// - 'async /*\n*/ function' is invalid.


pp.isAsyncFunction = function () {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
  _whitespace.skipWhiteSpace.lastIndex = this.pos;

  let skip = _whitespace.skipWhiteSpace.exec(this.input);

  let next = this.pos + skip[0].length,
      after;
  return !_whitespace.lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !((0, _identifier.isIdentifierChar)(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00));
}; // Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.


pp.parseStatement = function (context, topLevel, exports) {
  let starttype = this.type,
      node = this.startNode(),
      kind;

  if (this.isLet(context)) {
    starttype = _tokentype.types._var;
    kind = "let";
  } // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.


  switch (starttype) {
    case _tokentype.types._break:
    case _tokentype.types._continue:
      return this.parseBreakContinueStatement(node, starttype.keyword);

    case _tokentype.types._debugger:
      return this.parseDebuggerStatement(node);

    case _tokentype.types._do:
      return this.parseDoStatement(node);

    case _tokentype.types._for:
      return this.parseForStatement(node);

    case _tokentype.types._function:
      // Function as sole body of either an if statement or a labeled statement
      // works, but not when it is part of a labeled statement that is the sole
      // body of an if statement.
      if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) this.unexpected();
      return this.parseFunctionStatement(node, false, !context);

    case _tokentype.types._class:
      if (context) this.unexpected();
      return this.parseClass(node, true);

    case _tokentype.types._if:
      return this.parseIfStatement(node);

    case _tokentype.types._return:
      return this.parseReturnStatement(node);

    case _tokentype.types._switch:
      return this.parseSwitchStatement(node);

    case _tokentype.types._throw:
      return this.parseThrowStatement(node);

    case _tokentype.types._try:
      return this.parseTryStatement(node);

    case _tokentype.types._const:
    case _tokentype.types._var:
      kind = kind || this.value;
      if (context && kind !== "var") this.unexpected();
      return this.parseVarStatement(node, kind);

    case _tokentype.types._while:
      return this.parseWhileStatement(node);

    case _tokentype.types._with:
      return this.parseWithStatement(node);

    case _tokentype.types.braceL:
      return this.parseBlock(true, node);

    case _tokentype.types.semi:
      return this.parseEmptyStatement(node);

    case _tokentype.types._export:
    case _tokentype.types._import:
      if (this.options.ecmaVersion > 10 && starttype === _tokentype.types._import) {
        _whitespace.skipWhiteSpace.lastIndex = this.pos;

        let skip = _whitespace.skipWhiteSpace.exec(this.input);

        let next = this.pos + skip[0].length,
            nextCh = this.input.charCodeAt(next);
        if (nextCh === 40 || nextCh === 46) // '(' or '.'
          return this.parseExpressionStatement(node, this.parseExpression());
      }

      if (!this.options.allowImportExportEverywhere) {
        if (!topLevel) this.raise(this.start, "'import' and 'export' may only appear at the top level");
        if (!this.inModule) this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
      }

      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node, exports);
    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.

    default:
      if (this.isAsyncFunction()) {
        if (context) this.unexpected();
        this.next();
        return this.parseFunctionStatement(node, true, !context);
      }

      let maybeName = this.value,
          expr = this.parseExpression();
      if (starttype === _tokentype.types.name && expr.type === "Identifier" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr, context);else return this.parseExpressionStatement(node, expr);
  }
};

pp.parseBreakContinueStatement = function (node, keyword) {
  let isBreak = keyword === "break";
  this.next();
  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {
    node.label = this.parseIdent();
    this.semicolon();
  } // Verify that there is an actual destination to break or
  // continue to.

  let i = 0;

  for (; i < this.labels.length; ++i) {
    let lab = this.labels[i];

    if (node.label == null || lab.name === node.label.name) {
      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
      if (node.label && isBreak) break;
    }
  }

  if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
};

pp.parseDebuggerStatement = function (node) {
  this.next();
  this.semicolon();
  return this.finishNode(node, "DebuggerStatement");
};

pp.parseDoStatement = function (node) {
  this.next();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("do");
  this.labels.pop();
  this.expect(_tokentype.types._while);
  node.test = this.parseParenExpression();
  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();
  return this.finishNode(node, "DoWhileStatement");
}; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.


pp.parseForStatement = function (node) {
  this.next();
  let awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
  this.labels.push(loopLabel);
  this.enterScope(0);
  this.expect(_tokentype.types.parenL);

  if (this.type === _tokentype.types.semi) {
    if (awaitAt > -1) this.unexpected(awaitAt);
    return this.parseFor(node, null);
  }

  let isLet = this.isLet();

  if (this.type === _tokentype.types._var || this.type === _tokentype.types._const || isLet) {
    let init = this.startNode(),
        kind = isLet ? "let" : this.value;
    this.next();
    this.parseVar(init, true, kind);
    this.finishNode(init, "VariableDeclaration");

    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init.declarations.length === 1) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === _tokentype.types._in) {
          if (awaitAt > -1) this.unexpected(awaitAt);
        } else node.await = awaitAt > -1;
      }

      return this.parseForIn(node, init);
    }

    if (awaitAt > -1) this.unexpected(awaitAt);
    return this.parseFor(node, init);
  }

  let startsWithLet = this.isContextual("let"),
      isForOf = false;
  let refDestructuringErrors = new _parseutil.DestructuringErrors();
  let init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);

  if (this.type === _tokentype.types._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
    if (this.options.ecmaVersion >= 9) {
      if (this.type === _tokentype.types._in) {
        if (awaitAt > -1) this.unexpected(awaitAt);
      } else node.await = awaitAt > -1;
    }

    if (startsWithLet && isForOf) this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
    this.toAssignable(init, false, refDestructuringErrors);
    this.checkLValPattern(init);
    return this.parseForIn(node, init);
  } else {
    this.checkExpressionErrors(refDestructuringErrors, true);
  }

  if (awaitAt > -1) this.unexpected(awaitAt);
  return this.parseFor(node, init);
};

pp.parseFunctionStatement = function (node, isAsync, declarationPosition) {
  this.next();
  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
};

pp.parseIfStatement = function (node) {
  this.next();
  node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode

  node.consequent = this.parseStatement("if");
  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement("if") : null;
  return this.finishNode(node, "IfStatement");
};

pp.parseReturnStatement = function (node) {
  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, "'return' outside of function");
  this.next(); // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {
    node.argument = this.parseExpression();
    this.semicolon();
  }
  return this.finishNode(node, "ReturnStatement");
};

pp.parseSwitchStatement = function (node) {
  this.next();
  node.discriminant = this.parseParenExpression();
  node.cases = [];
  this.expect(_tokentype.types.braceL);
  this.labels.push(switchLabel);
  this.enterScope(0); // Statements under must be grouped (by label) in SwitchCase
  // nodes. `cur` is used to keep the node that we are currently
  // adding statements to.

  let cur;

  for (let sawDefault = false; this.type !== _tokentype.types.braceR;) {
    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {
      let isCase = this.type === _tokentype.types._case;
      if (cur) this.finishNode(cur, "SwitchCase");
      node.cases.push(cur = this.startNode());
      cur.consequent = [];
      this.next();

      if (isCase) {
        cur.test = this.parseExpression();
      } else {
        if (sawDefault) this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
        sawDefault = true;
        cur.test = null;
      }

      this.expect(_tokentype.types.colon);
    } else {
      if (!cur) this.unexpected();
      cur.consequent.push(this.parseStatement(null));
    }
  }

  this.exitScope();
  if (cur) this.finishNode(cur, "SwitchCase");
  this.next(); // Closing brace

  this.labels.pop();
  return this.finishNode(node, "SwitchStatement");
};

pp.parseThrowStatement = function (node) {
  this.next();
  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, "Illegal newline after throw");
  node.argument = this.parseExpression();
  this.semicolon();
  return this.finishNode(node, "ThrowStatement");
}; // Reused empty array added for node fields that are always empty.


const empty = [];

pp.parseTryStatement = function (node) {
  this.next();
  node.block = this.parseBlock();
  node.handler = null;

  if (this.type === _tokentype.types._catch) {
    let clause = this.startNode();
    this.next();

    if (this.eat(_tokentype.types.parenL)) {
      clause.param = this.parseBindingAtom();
      let simple = clause.param.type === "Identifier";
      this.enterScope(simple ? _scopeflags.SCOPE_SIMPLE_CATCH : 0);
      this.checkLValPattern(clause.param, simple ? _scopeflags.BIND_SIMPLE_CATCH : _scopeflags.BIND_LEXICAL);
      this.expect(_tokentype.types.parenR);
    } else {
      if (this.options.ecmaVersion < 10) this.unexpected();
      clause.param = null;
      this.enterScope(0);
    }

    clause.body = this.parseBlock(false);
    this.exitScope();
    node.handler = this.finishNode(clause, "CatchClause");
  }

  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;
  if (!node.handler && !node.finalizer) this.raise(node.start, "Missing catch or finally clause");
  return this.finishNode(node, "TryStatement");
};

pp.parseVarStatement = function (node, kind) {
  this.next();
  this.parseVar(node, false, kind);
  this.semicolon();
  return this.finishNode(node, "VariableDeclaration");
};

pp.parseWhileStatement = function (node) {
  this.next();
  node.test = this.parseParenExpression();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("while");
  this.labels.pop();
  return this.finishNode(node, "WhileStatement");
};

pp.parseWithStatement = function (node) {
  if (this.strict) this.raise(this.start, "'with' in strict mode");
  this.next();
  node.object = this.parseParenExpression();
  node.body = this.parseStatement("with");
  return this.finishNode(node, "WithStatement");
};

pp.parseEmptyStatement = function (node) {
  this.next();
  return this.finishNode(node, "EmptyStatement");
};

pp.parseLabeledStatement = function (node, maybeName, expr, context) {
  for (var _iterator = _createForOfIteratorHelperLoose(this.labels), _step; !(_step = _iterator()).done;) {
    let label = _step.value;
    if (label.name === maybeName) this.raise(expr.start, "Label '" + maybeName + "' is already declared");
  }

  let kind = this.type.isLoop ? "loop" : this.type === _tokentype.types._switch ? "switch" : null;

  for (let i = this.labels.length - 1; i >= 0; i--) {
    let label = this.labels[i];

    if (label.statementStart === node.start) {
      // Update information about previous labels on this node
      label.statementStart = this.start;
      label.kind = kind;
    } else break;
  }

  this.labels.push({
    name: maybeName,
    kind,
    statementStart: this.start
  });
  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
  this.labels.pop();
  node.label = expr;
  return this.finishNode(node, "LabeledStatement");
};

pp.parseExpressionStatement = function (node, expr) {
  node.expression = expr;
  this.semicolon();
  return this.finishNode(node, "ExpressionStatement");
}; // Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).


pp.parseBlock = function (createNewLexicalScope = true, node = this.startNode(), exitStrict) {
  node.body = [];
  this.expect(_tokentype.types.braceL);
  if (createNewLexicalScope) this.enterScope(0);

  while (this.type !== _tokentype.types.braceR) {
    let stmt = this.parseStatement(null);
    node.body.push(stmt);
  }

  if (exitStrict) this.strict = false;
  this.next();
  if (createNewLexicalScope) this.exitScope();
  return this.finishNode(node, "BlockStatement");
}; // Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.


pp.parseFor = function (node, init) {
  node.init = init;
  this.expect(_tokentype.types.semi);
  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();
  this.expect(_tokentype.types.semi);
  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();
  this.expect(_tokentype.types.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, "ForStatement");
}; // Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.


pp.parseForIn = function (node, init) {
  const isForIn = this.type === _tokentype.types._in;
  this.next();

  if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
    this.raise(init.start, `${isForIn ? "for-in" : "for-of"} loop variable declaration may not have an initializer`);
  }

  node.left = init;
  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
  this.expect(_tokentype.types.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
}; // Parse a list of variable declarations.


pp.parseVar = function (node, isFor, kind) {
  node.declarations = [];
  node.kind = kind;

  for (;;) {
    let decl = this.startNode();
    this.parseVarId(decl, kind);

    if (this.eat(_tokentype.types.eq)) {
      decl.init = this.parseMaybeAssign(isFor);
    } else if (kind === "const" && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
      this.unexpected();
    } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === _tokentype.types._in || this.isContextual("of")))) {
      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
    } else {
      decl.init = null;
    }

    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
    if (!this.eat(_tokentype.types.comma)) break;
  }

  return node;
};

pp.parseVarId = function (decl, kind) {
  decl.id = this.parseBindingAtom();
  this.checkLValPattern(decl.id, kind === "var" ? _scopeflags.BIND_VAR : _scopeflags.BIND_LEXICAL, false);
};

const FUNC_STATEMENT = 1,
      FUNC_HANGING_STATEMENT = 2,
      FUNC_NULLABLE_ID = 4; // Parse a function declaration or literal (depending on the
// `statement & FUNC_STATEMENT`).
// Remove `allowExpressionBody` for 7.0.0, as it is only called with false

pp.parseFunction = function (node, statement, allowExpressionBody, isAsync, forInit) {
  this.initFunction(node);

  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
    if (this.type === _tokentype.types.star && statement & FUNC_HANGING_STATEMENT) this.unexpected();
    node.generator = this.eat(_tokentype.types.star);
  }

  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;

  if (statement & FUNC_STATEMENT) {
    node.id = statement & FUNC_NULLABLE_ID && this.type !== _tokentype.types.name ? null : this.parseIdent();
    if (node.id && !(statement & FUNC_HANGING_STATEMENT)) // If it is a regular function declaration in sloppy mode, then it is
      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
      // mode depends on properties of the current scope (see
      // treatFunctionsAsVar).
      this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? _scopeflags.BIND_VAR : _scopeflags.BIND_LEXICAL : _scopeflags.BIND_FUNCTION);
  }

  let oldYieldPos = this.yieldPos,
      oldAwaitPos = this.awaitPos,
      oldAwaitIdentPos = this.awaitIdentPos;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope((0, _scopeflags.functionFlags)(node.async, node.generator));
  if (!(statement & FUNC_STATEMENT)) node.id = this.type === _tokentype.types.name ? this.parseIdent() : null;
  this.parseFunctionParams(node);
  this.parseFunctionBody(node, allowExpressionBody, false, forInit);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
};

pp.parseFunctionParams = function (node) {
  this.expect(_tokentype.types.parenL);
  node.params = this.parseBindingList(_tokentype.types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
}; // Parse a class declaration or literal (depending on the
// `isStatement` parameter).


pp.parseClass = function (node, isStatement) {
  this.next(); // ecma-262 14.6 Class Definitions
  // A class definition is always strict mode code.

  const oldStrict = this.strict;
  this.strict = true;
  this.parseClassId(node, isStatement);
  this.parseClassSuper(node);
  const privateNameMap = this.enterClassBody();
  const classBody = this.startNode();
  let hadConstructor = false;
  classBody.body = [];
  this.expect(_tokentype.types.braceL);

  while (this.type !== _tokentype.types.braceR) {
    const element = this.parseClassElement(node.superClass !== null);

    if (element) {
      classBody.body.push(element);

      if (element.type === "MethodDefinition" && element.kind === "constructor") {
        if (hadConstructor) this.raise(element.start, "Duplicate constructor in the same class");
        hadConstructor = true;
      } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
        this.raiseRecoverable(element.key.start, `Identifier '#${element.key.name}' has already been declared`);
      }
    }
  }

  this.strict = oldStrict;
  this.next();
  node.body = this.finishNode(classBody, "ClassBody");
  this.exitClassBody();
  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
};

pp.parseClassElement = function (constructorAllowsSuper) {
  if (this.eat(_tokentype.types.semi)) return null;
  const ecmaVersion = this.options.ecmaVersion;
  const node = this.startNode();
  let keyName = "";
  let isGenerator = false;
  let isAsync = false;
  let kind = "method";
  let isStatic = false;

  if (this.eatContextual("static")) {
    // Parse static init block
    if (ecmaVersion >= 13 && this.eat(_tokentype.types.braceL)) {
      this.parseClassStaticBlock(node);
      return node;
    }

    if (this.isClassElementNameStart() || this.type === _tokentype.types.star) {
      isStatic = true;
    } else {
      keyName = "static";
    }
  }

  node.static = isStatic;

  if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
    if ((this.isClassElementNameStart() || this.type === _tokentype.types.star) && !this.canInsertSemicolon()) {
      isAsync = true;
    } else {
      keyName = "async";
    }
  }

  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(_tokentype.types.star)) {
    isGenerator = true;
  }

  if (!keyName && !isAsync && !isGenerator) {
    const lastValue = this.value;

    if (this.eatContextual("get") || this.eatContextual("set")) {
      if (this.isClassElementNameStart()) {
        kind = lastValue;
      } else {
        keyName = lastValue;
      }
    }
  } // Parse element name


  if (keyName) {
    // 'async', 'get', 'set', or 'static' were not a keyword contextually.
    // The last token is any of those. Make it the element name.
    node.computed = false;
    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
    node.key.name = keyName;
    this.finishNode(node.key, "Identifier");
  } else {
    this.parseClassElementName(node);
  } // Parse element value


  if (ecmaVersion < 13 || this.type === _tokentype.types.parenL || kind !== "method" || isGenerator || isAsync) {
    const isConstructor = !node.static && checkKeyName(node, "constructor");
    const allowsDirectSuper = isConstructor && constructorAllowsSuper; // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.

    if (isConstructor && kind !== "method") this.raise(node.key.start, "Constructor can't have get/set modifier");
    node.kind = isConstructor ? "constructor" : kind;
    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
  } else {
    this.parseClassField(node);
  }

  return node;
};

pp.isClassElementNameStart = function () {
  return this.type === _tokentype.types.name || this.type === _tokentype.types.privateId || this.type === _tokentype.types.num || this.type === _tokentype.types.string || this.type === _tokentype.types.bracketL || this.type.keyword;
};

pp.parseClassElementName = function (element) {
  if (this.type === _tokentype.types.privateId) {
    if (this.value === "constructor") {
      this.raise(this.start, "Classes can't have an element named '#constructor'");
    }

    element.computed = false;
    element.key = this.parsePrivateIdent();
  } else {
    this.parsePropertyName(element);
  }
};

pp.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
  // Check key and flags
  const key = method.key;

  if (method.kind === "constructor") {
    if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
    if (isAsync) this.raise(key.start, "Constructor can't be an async method");
  } else if (method.static && checkKeyName(method, "prototype")) {
    this.raise(key.start, "Classes may not have a static property named prototype");
  } // Parse value


  const value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper); // Check value

  if (method.kind === "get" && value.params.length !== 0) this.raiseRecoverable(value.start, "getter should have no params");
  if (method.kind === "set" && value.params.length !== 1) this.raiseRecoverable(value.start, "setter should have exactly one param");
  if (method.kind === "set" && value.params[0].type === "RestElement") this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
  return this.finishNode(method, "MethodDefinition");
};

pp.parseClassField = function (field) {
  if (checkKeyName(field, "constructor")) {
    this.raise(field.key.start, "Classes can't have a field named 'constructor'");
  } else if (field.static && checkKeyName(field, "prototype")) {
    this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
  }

  if (this.eat(_tokentype.types.eq)) {
    // To raise SyntaxError if 'arguments' exists in the initializer.
    const scope = this.currentThisScope();
    const inClassFieldInit = scope.inClassFieldInit;
    scope.inClassFieldInit = true;
    field.value = this.parseMaybeAssign();
    scope.inClassFieldInit = inClassFieldInit;
  } else {
    field.value = null;
  }

  this.semicolon();
  return this.finishNode(field, "PropertyDefinition");
};

pp.parseClassStaticBlock = function (node) {
  node.body = [];
  let oldLabels = this.labels;
  this.labels = [];
  this.enterScope(_scopeflags.SCOPE_CLASS_STATIC_BLOCK | _scopeflags.SCOPE_SUPER);

  while (this.type !== _tokentype.types.braceR) {
    let stmt = this.parseStatement(null);
    node.body.push(stmt);
  }

  this.next();
  this.exitScope();
  this.labels = oldLabels;
  return this.finishNode(node, "StaticBlock");
};

pp.parseClassId = function (node, isStatement) {
  if (this.type === _tokentype.types.name) {
    node.id = this.parseIdent();
    if (isStatement) this.checkLValSimple(node.id, _scopeflags.BIND_LEXICAL, false);
  } else {
    if (isStatement === true) this.unexpected();
    node.id = null;
  }
};

pp.parseClassSuper = function (node) {
  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts(false) : null;
};

pp.enterClassBody = function () {
  const element = {
    declared: Object.create(null),
    used: []
  };
  this.privateNameStack.push(element);
  return element.declared;
};

pp.exitClassBody = function () {
  const _this$privateNameStac = this.privateNameStack.pop(),
        declared = _this$privateNameStac.declared,
        used = _this$privateNameStac.used;

  const len = this.privateNameStack.length;
  const parent = len === 0 ? null : this.privateNameStack[len - 1];

  for (let i = 0; i < used.length; ++i) {
    const id = used[i];

    if (!(0, _util.hasOwn)(declared, id.name)) {
      if (parent) {
        parent.used.push(id);
      } else {
        this.raiseRecoverable(id.start, `Private field '#${id.name}' must be declared in an enclosing class`);
      }
    }
  }
};

function isPrivateNameConflicted(privateNameMap, element) {
  const name = element.key.name;
  const curr = privateNameMap[name];
  let next = "true";

  if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
    next = (element.static ? "s" : "i") + element.kind;
  } // `class { get #a(){}; static set #a(_){} }` is also conflict.


  if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
    privateNameMap[name] = "true";
    return false;
  } else if (!curr) {
    privateNameMap[name] = next;
    return false;
  } else {
    return true;
  }
}

function checkKeyName(node, name) {
  const computed = node.computed,
        key = node.key;
  return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
} // Parses module export declaration.


pp.parseExport = function (node, exports) {
  this.next(); // export * from '...'

  if (this.eat(_tokentype.types.star)) {
    if (this.options.ecmaVersion >= 11) {
      if (this.eatContextual("as")) {
        node.exported = this.parseModuleExportName();
        this.checkExport(exports, node.exported.name, this.lastTokStart);
      } else {
        node.exported = null;
      }
    }

    this.expectContextual("from");
    if (this.type !== _tokentype.types.string) this.unexpected();
    node.source = this.parseExprAtom();
    this.semicolon();
    return this.finishNode(node, "ExportAllDeclaration");
  }

  if (this.eat(_tokentype.types._default)) {
    // export default ...
    this.checkExport(exports, "default", this.lastTokStart);
    let isAsync;

    if (this.type === _tokentype.types._function || (isAsync = this.isAsyncFunction())) {
      let fNode = this.startNode();
      this.next();
      if (isAsync) this.next();
      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
    } else if (this.type === _tokentype.types._class) {
      let cNode = this.startNode();
      node.declaration = this.parseClass(cNode, "nullableID");
    } else {
      node.declaration = this.parseMaybeAssign();
      this.semicolon();
    }

    return this.finishNode(node, "ExportDefaultDeclaration");
  } // export var|const|let|function|class ...


  if (this.shouldParseExportStatement()) {
    node.declaration = this.parseStatement(null);
    if (node.declaration.type === "VariableDeclaration") this.checkVariableExport(exports, node.declaration.declarations);else this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
    node.specifiers = [];
    node.source = null;
  } else {
    // export { x, y as z } [from '...']
    node.declaration = null;
    node.specifiers = this.parseExportSpecifiers(exports);

    if (this.eatContextual("from")) {
      if (this.type !== _tokentype.types.string) this.unexpected();
      node.source = this.parseExprAtom();
    } else {
      for (var _iterator2 = _createForOfIteratorHelperLoose(node.specifiers), _step2; !(_step2 = _iterator2()).done;) {
        let spec = _step2.value;
        // check for keywords used as local names
        this.checkUnreserved(spec.local); // check if export is defined

        this.checkLocalExport(spec.local);

        if (spec.local.type === "Literal") {
          this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
        }
      }

      node.source = null;
    }

    this.semicolon();
  }

  return this.finishNode(node, "ExportNamedDeclaration");
};

pp.checkExport = function (exports, name, pos) {
  if (!exports) return;
  if ((0, _util.hasOwn)(exports, name)) this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
  exports[name] = true;
};

pp.checkPatternExport = function (exports, pat) {
  let type = pat.type;
  if (type === "Identifier") this.checkExport(exports, pat.name, pat.start);else if (type === "ObjectPattern") {
    for (var _iterator3 = _createForOfIteratorHelperLoose(pat.properties), _step3; !(_step3 = _iterator3()).done;) {
      let prop = _step3.value;
      this.checkPatternExport(exports, prop);
    }
  } else if (type === "ArrayPattern") {
    for (var _iterator4 = _createForOfIteratorHelperLoose(pat.elements), _step4; !(_step4 = _iterator4()).done;) {
      let elt = _step4.value;
      if (elt) this.checkPatternExport(exports, elt);
    }
  } else if (type === "Property") this.checkPatternExport(exports, pat.value);else if (type === "AssignmentPattern") this.checkPatternExport(exports, pat.left);else if (type === "RestElement") this.checkPatternExport(exports, pat.argument);else if (type === "ParenthesizedExpression") this.checkPatternExport(exports, pat.expression);
};

pp.checkVariableExport = function (exports, decls) {
  if (!exports) return;

  for (var _iterator5 = _createForOfIteratorHelperLoose(decls), _step5; !(_step5 = _iterator5()).done;) {
    let decl = _step5.value;
    this.checkPatternExport(exports, decl.id);
  }
};

pp.shouldParseExportStatement = function () {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
}; // Parses a comma-separated list of module exports.


pp.parseExportSpecifiers = function (exports) {
  let nodes = [],
      first = true; // export { x, y as z } [from '...']

  this.expect(_tokentype.types.braceL);

  while (!this.eat(_tokentype.types.braceR)) {
    if (!first) {
      this.expect(_tokentype.types.comma);
      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
    } else first = false;

    let node = this.startNode();
    node.local = this.parseModuleExportName();
    node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;
    this.checkExport(exports, node.exported[node.exported.type === "Identifier" ? "name" : "value"], node.exported.start);
    nodes.push(this.finishNode(node, "ExportSpecifier"));
  }

  return nodes;
}; // Parses import declaration.


pp.parseImport = function (node) {
  this.next(); // import '...'

  if (this.type === _tokentype.types.string) {
    node.specifiers = empty;
    node.source = this.parseExprAtom();
  } else {
    node.specifiers = this.parseImportSpecifiers();
    this.expectContextual("from");
    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
  }

  this.semicolon();
  return this.finishNode(node, "ImportDeclaration");
}; // Parses a comma-separated list of module imports.


pp.parseImportSpecifiers = function () {
  let nodes = [],
      first = true;

  if (this.type === _tokentype.types.name) {
    // import defaultObj, { x, y as z } from '...'
    let node = this.startNode();
    node.local = this.parseIdent();
    this.checkLValSimple(node.local, _scopeflags.BIND_LEXICAL);
    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
    if (!this.eat(_tokentype.types.comma)) return nodes;
  }

  if (this.type === _tokentype.types.star) {
    let node = this.startNode();
    this.next();
    this.expectContextual("as");
    node.local = this.parseIdent();
    this.checkLValSimple(node.local, _scopeflags.BIND_LEXICAL);
    nodes.push(this.finishNode(node, "ImportNamespaceSpecifier"));
    return nodes;
  }

  this.expect(_tokentype.types.braceL);

  while (!this.eat(_tokentype.types.braceR)) {
    if (!first) {
      this.expect(_tokentype.types.comma);
      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
    } else first = false;

    let node = this.startNode();
    node.imported = this.parseModuleExportName();

    if (this.eatContextual("as")) {
      node.local = this.parseIdent();
    } else {
      this.checkUnreserved(node.imported);
      node.local = node.imported;
    }

    this.checkLValSimple(node.local, _scopeflags.BIND_LEXICAL);
    nodes.push(this.finishNode(node, "ImportSpecifier"));
  }

  return nodes;
};

pp.parseModuleExportName = function () {
  if (this.options.ecmaVersion >= 13 && this.type === _tokentype.types.string) {
    const stringLiteral = this.parseLiteral(this.value);

    if (_util.loneSurrogate.test(stringLiteral.value)) {
      this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
    }

    return stringLiteral;
  }

  return this.parseIdent(true);
}; // Set `ExpressionStatement#directive` property for directive prologues.


pp.adaptDirectivePrologue = function (statements) {
  for (let i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
    statements[i].directive = statements[i].expression.raw.slice(1, -1);
  }
};

pp.isDirectiveCandidate = function (statement) {
  return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && ( // Reject parenthesized strings.
  this.input[statement.start] === "\"" || this.input[statement.start] === "'");
};