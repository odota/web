"use strict";

var _path = require("path");

var _fs = require("fs");

var acorn = _interopRequireWildcard(require("acorn"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let inputFilePaths = [],
    forceFileName = false,
    fileMode = false,
    silent = false,
    compact = false,
    tokenize = false;
const options = {};

function help(status) {
  const print = status === 0 ? console.log : console.error;
  print("usage: " + (0, _path.basename)(process.argv[1]) + " [--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|...|--ecma2015|--ecma2016|--ecma2017|--ecma2018|...]");
  print("        [--tokenize] [--locations] [--allow-hash-bang] [--allow-await-outside-function] [--compact] [--silent] [--module] [--help] [--] [<infile>...]");
  process.exit(status);
}

for (let i = 2; i < process.argv.length; ++i) {
  const arg = process.argv[i];
  if (arg[0] !== "-" || arg === "-") inputFilePaths.push(arg);else if (arg === "--") {
    inputFilePaths.push(...process.argv.slice(i + 1));
    forceFileName = true;
    break;
  } else if (arg === "--locations") options.locations = true;else if (arg === "--allow-hash-bang") options.allowHashBang = true;else if (arg === "--allow-await-outside-function") options.allowAwaitOutsideFunction = true;else if (arg === "--silent") silent = true;else if (arg === "--compact") compact = true;else if (arg === "--help") help(0);else if (arg === "--tokenize") tokenize = true;else if (arg === "--module") options.sourceType = "module";else {
    let match = arg.match(/^--ecma(\d+)$/);
    if (match) options.ecmaVersion = +match[1];else help(1);
  }
}

function run(codeList) {
  let result = [],
      fileIdx = 0;

  try {
    codeList.forEach((code, idx) => {
      fileIdx = idx;

      if (!tokenize) {
        result = acorn.parse(code, options);
        options.program = result;
      } else {
        let tokenizer = acorn.tokenizer(code, options),
            token;

        do {
          token = tokenizer.getToken();
          result.push(token);
        } while (token.type !== acorn.tokTypes.eof);
      }
    });
  } catch (e) {
    console.error(fileMode ? e.message.replace(/\(\d+:\d+\)$/, m => m.slice(0, 1) + inputFilePaths[fileIdx] + " " + m.slice(1)) : e.message);
    process.exit(1);
  }

  if (!silent) console.log(JSON.stringify(result, null, compact ? null : 2));
}

if (fileMode = inputFilePaths.length && (forceFileName || !inputFilePaths.includes("-") || inputFilePaths.length !== 1)) {
  run(inputFilePaths.map(path => (0, _fs.readFileSync)(path, "utf8")));
} else {
  let code = "";
  process.stdin.resume();
  process.stdin.on("data", chunk => code += chunk);
  process.stdin.on("end", () => run([code]));
}