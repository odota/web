"use strict";

exports.__esModule = true;
exports.Parser = void 0;

var _identifier = require("./identifier.js");

var _tokentype = require("./tokentype.js");

var _whitespace = require("./whitespace.js");

var _options = require("./options.js");

var _util = require("./util.js");

var _scopeflags = require("./scopeflags.js");

class Parser {
  constructor(options, input, startPos) {
    this.options = options = (0, _options.getOptions)(options);
    this.sourceFile = options.sourceFile;
    this.keywords = (0, _util.wordsRegexp)(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
    let reserved = "";

    if (options.allowReserved !== true) {
      reserved = _identifier.reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
      if (options.sourceType === "module") reserved += " await";
    }

    this.reservedWords = (0, _util.wordsRegexp)(reserved);
    let reservedStrict = (reserved ? reserved + " " : "") + _identifier.reservedWords.strict;
    this.reservedWordsStrict = (0, _util.wordsRegexp)(reservedStrict);
    this.reservedWordsStrictBind = (0, _util.wordsRegexp)(reservedStrict + " " + _identifier.reservedWords.strictBind);
    this.input = String(input); // Used to signal to callers of `readWord1` whether the word
    // contained any escape sequences. This is needed because words with
    // escape sequences must not be interpreted as keywords.

    this.containsEsc = false; // Set up token state
    // The current position of the tokenizer in the input.

    if (startPos) {
      this.pos = startPos;
      this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;
    } else {
      this.pos = this.lineStart = 0;
      this.curLine = 1;
    } // Properties of the current token:
    // Its type


    this.type = _tokentype.types.eof; // For tokens that include more information than their type, the value

    this.value = null; // Its start and end offset

    this.start = this.end = this.pos; // And, if locations are used, the {line, column} object
    // corresponding to those offsets

    this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token

    this.lastTokEndLoc = this.lastTokStartLoc = null;
    this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic
    // context to predict whether a regular expression is allowed in a
    // given position.

    this.context = this.initialContext();
    this.exprAllowed = true; // Figure out if it's a module code.

    this.inModule = options.sourceType === "module";
    this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function

    this.potentialArrowAt = -1;
    this.potentialArrowInForAwait = false; // Positions to delayed-check that yield/await does not exist in default parameters.

    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0; // Labels in scope.

    this.labels = []; // Thus-far undefined exports.

    this.undefinedExports = Object.create(null); // If enabled, skip leading hashbang line.

    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") this.skipLineComment(2); // Scope tracking for duplicate variable names (see scope.js)

    this.scopeStack = [];
    this.enterScope(_scopeflags.SCOPE_TOP); // For RegExp validation

    this.regexpState = null; // The stack of private names.
    // Each element has two properties: 'declared' and 'used'.
    // When it exited from the outermost class definition, all used private names must be declared.

    this.privateNameStack = [];
  }

  parse() {
    let node = this.options.program || this.startNode();
    this.nextToken();
    return this.parseTopLevel(node);
  }

  get inFunction() {
    return (this.currentVarScope().flags & _scopeflags.SCOPE_FUNCTION) > 0;
  }

  get inGenerator() {
    return (this.currentVarScope().flags & _scopeflags.SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
  }

  get inAsync() {
    return (this.currentVarScope().flags & _scopeflags.SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
  }

  get canAwait() {
    for (let i = this.scopeStack.length - 1; i >= 0; i--) {
      let scope = this.scopeStack[i];
      if (scope.inClassFieldInit || scope.flags & _scopeflags.SCOPE_CLASS_STATIC_BLOCK) return false;
      if (scope.flags & _scopeflags.SCOPE_FUNCTION) return (scope.flags & _scopeflags.SCOPE_ASYNC) > 0;
    }

    return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
  }

  get allowSuper() {
    const _this$currentThisScop = this.currentThisScope(),
          flags = _this$currentThisScop.flags,
          inClassFieldInit = _this$currentThisScop.inClassFieldInit;

    return (flags & _scopeflags.SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
  }

  get allowDirectSuper() {
    return (this.currentThisScope().flags & _scopeflags.SCOPE_DIRECT_SUPER) > 0;
  }

  get treatFunctionsAsVar() {
    return this.treatFunctionsAsVarInScope(this.currentScope());
  }

  get allowNewDotTarget() {
    const _this$currentThisScop2 = this.currentThisScope(),
          flags = _this$currentThisScop2.flags,
          inClassFieldInit = _this$currentThisScop2.inClassFieldInit;

    return (flags & (_scopeflags.SCOPE_FUNCTION | _scopeflags.SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;
  }

  get inClassStaticBlock() {
    return (this.currentVarScope().flags & _scopeflags.SCOPE_CLASS_STATIC_BLOCK) > 0;
  }

  static extend(...plugins) {
    let cls = this;

    for (let i = 0; i < plugins.length; i++) cls = plugins[i](cls);

    return cls;
  }

  static parse(input, options) {
    return new this(options, input).parse();
  }

  static parseExpressionAt(input, pos, options) {
    let parser = new this(options, input, pos);
    parser.nextToken();
    return parser.parseExpression();
  }

  static tokenizer(input, options) {
    return new this(options, input);
  }

}

exports.Parser = Parser;