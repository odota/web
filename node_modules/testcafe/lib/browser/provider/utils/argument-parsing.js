"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConfig = exports.getModes = exports.getPathFromParsedModes = exports.splitEscaped = exports.isMatchTrue = exports.findMatch = exports.hasMatch = void 0;
const lodash_1 = require("lodash");
const os_family_1 = __importDefault(require("os-family"));
const CONFIG_TERMINATOR_RE = /(\s+|^)-/;
function hasMatch(array, re) {
    return !!lodash_1.find(array, el => el.match(re));
}
exports.hasMatch = hasMatch;
function findMatch(array, re) {
    const element = lodash_1.find(array, el => el.match(re));
    return element ? element.match(re)[1] : '';
}
exports.findMatch = findMatch;
function isMatchTrue(array, re) {
    const match = findMatch(array, re);
    return match && match !== '0' && match !== 'false';
}
exports.isMatchTrue = isMatchTrue;
function splitEscaped(str, splitterChar) {
    const result = [''];
    for (let i = 0; i < str.length; i++) {
        if (str[i] === splitterChar) {
            result.push('');
            continue;
        }
        if (str[i] === '\\' && (str[i + 1] === '\\' || str[i + 1] === splitterChar))
            i++;
        result[result.length - 1] += str[i];
    }
    return result;
}
exports.splitEscaped = splitEscaped;
function getPathFromParsedModes(modes, availableModes = []) {
    if (!modes.length)
        return '';
    if (availableModes.some(mode => mode === modes[0]))
        return '';
    let path = modes.shift();
    if (os_family_1.default.win && modes.length && path.match(/^[A-Za-z]$/))
        path += ':' + modes.shift();
    return path;
}
exports.getPathFromParsedModes = getPathFromParsedModes;
function getModes(modes, availableModes = []) {
    const result = {};
    availableModes = availableModes.slice();
    availableModes.forEach(key => {
        result[key] = false;
    });
    while (modes.length && availableModes.length) {
        if (modes[0] === availableModes[0]) {
            result[availableModes[0]] = true;
            modes.shift();
        }
        availableModes.shift();
    }
    return result;
}
exports.getModes = getModes;
function parseConfig(str) {
    const configTerminatorMatch = str.match(CONFIG_TERMINATOR_RE);
    if (!configTerminatorMatch)
        return { modesString: str, userArgs: '' };
    return {
        modesString: str.substr(0, configTerminatorMatch.index),
        userArgs: str.substr(configTerminatorMatch.index + configTerminatorMatch[1].length),
    };
}
exports.parseConfig = parseConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnQtcGFyc2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL3V0aWxzL2FyZ3VtZW50LXBhcnNpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsbUNBQTZDO0FBQzdDLDBEQUEyQjtBQUUzQixNQUFNLG9CQUFvQixHQUFHLFVBQVUsQ0FBQztBQUV4QyxTQUFnQixRQUFRLENBQUUsS0FBSyxFQUFFLEVBQUU7SUFDL0IsT0FBTyxDQUFDLENBQUMsYUFBVyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRkQsNEJBRUM7QUFFRCxTQUFnQixTQUFTLENBQUUsS0FBSyxFQUFFLEVBQUU7SUFDaEMsTUFBTSxPQUFPLEdBQUcsYUFBVyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV2RCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQy9DLENBQUM7QUFKRCw4QkFJQztBQUVELFNBQWdCLFdBQVcsQ0FBRSxLQUFLLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRW5DLE9BQU8sS0FBSyxJQUFJLEtBQUssS0FBSyxHQUFHLElBQUksS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUN2RCxDQUFDO0FBSkQsa0NBSUM7QUFFRCxTQUFnQixZQUFZLENBQUUsR0FBRyxFQUFFLFlBQVk7SUFDM0MsTUFBTSxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwQixLQUFL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YXMgZmluZEVsZW1lbnQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5cbmNvbnN0IENPTkZJR19URVJNSU5BVE9SX1JFID0gLyhcXHMrfF4pLS87XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNNYXRjaCAoYXJyYXksIHJlKSB7XG4gICAgcmV0dXJuICEhZmluZEVsZW1lbnQoYXJyYXksIGVsID0+IGVsLm1hdGNoKHJlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWF0Y2ggKGFycmF5LCByZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBmaW5kRWxlbWVudChhcnJheSwgZWwgPT4gZWwubWF0Y2gocmUpKTtcblxuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5tYXRjaChyZSlbMV0gOiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTWF0Y2hUcnVlIChhcnJheSwgcmUpIHtcbiAgICBjb25zdCBtYXRjaCA9IGZpbmRNYXRjaChhcnJheSwgcmUpO1xuXG4gICAgcmV0dXJuIG1hdGNoICYmIG1hdGNoICE9PSAnMCcgJiYgbWF0Y2ggIT09ICdmYWxzZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdEVzY2FwZWQgKHN0ciwgc3BsaXR0ZXJDaGFyKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gWycnXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzdHJbaV0gPT09IHNwbGl0dGVyQ2hhcikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyW2ldID09PSAnXFxcXCcgJiYgKHN0cltpICsgMV0gPT09ICdcXFxcJyB8fCBzdHIgW2kgKyAxXSA9PT0gc3BsaXR0ZXJDaGFyKSlcbiAgICAgICAgICAgIGkrKztcblxuICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IHN0cltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aEZyb21QYXJzZWRNb2RlcyAobW9kZXMsIGF2YWlsYWJsZU1vZGVzID0gW10pIHtcbiAgICBpZiAoIW1vZGVzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgaWYgKGF2YWlsYWJsZU1vZGVzLnNvbWUobW9kZSA9PiBtb2RlID09PSBtb2Rlc1swXSkpXG4gICAgICAgIHJldHVybiAnJztcblxuICAgIGxldCBwYXRoID0gbW9kZXMuc2hpZnQoKTtcblxuICAgIGlmIChPUy53aW4gJiYgbW9kZXMubGVuZ3RoICYmIHBhdGgubWF0Y2goL15bQS1aYS16XSQvKSlcbiAgICAgICAgcGF0aCArPSAnOicgKyBtb2Rlcy5zaGlmdCgpO1xuXG4gICAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RlcyAobW9kZXMsIGF2YWlsYWJsZU1vZGVzID0gW10pIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgIGF2YWlsYWJsZU1vZGVzID0gYXZhaWxhYmxlTW9kZXMuc2xpY2UoKTtcblxuICAgIGF2YWlsYWJsZU1vZGVzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIHdoaWxlIChtb2Rlcy5sZW5ndGggJiYgYXZhaWxhYmxlTW9kZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChtb2Rlc1swXSA9PT0gYXZhaWxhYmxlTW9kZXNbMF0pIHtcbiAgICAgICAgICAgIHJlc3VsdFthdmFpbGFibGVNb2Rlc1swXV0gPSB0cnVlO1xuXG4gICAgICAgICAgICBtb2Rlcy5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXZhaWxhYmxlTW9kZXMuc2hpZnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb25maWcgKHN0cikge1xuICAgIGNvbnN0IGNvbmZpZ1Rlcm1pbmF0b3JNYXRjaCA9IHN0ci5tYXRjaChDT05GSUdfVEVSTUlOQVRPUl9SRSk7XG5cbiAgICBpZiAoIWNvbmZpZ1Rlcm1pbmF0b3JNYXRjaClcbiAgICAgICAgcmV0dXJuIHsgbW9kZXNTdHJpbmc6IHN0ciwgdXNlckFyZ3M6ICcnIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBtb2Rlc1N0cmluZzogc3RyLnN1YnN0cigwLCBjb25maWdUZXJtaW5hdG9yTWF0Y2guaW5kZXgpLFxuICAgICAgICB1c2VyQXJnczogICAgc3RyLnN1YnN0cihjb25maWdUZXJtaW5hdG9yTWF0Y2guaW5kZXggKyBjb25maWdUZXJtaW5hdG9yTWF0Y2hbMV0ubGVuZ3RoKSxcbiAgICB9O1xufVxuIl19