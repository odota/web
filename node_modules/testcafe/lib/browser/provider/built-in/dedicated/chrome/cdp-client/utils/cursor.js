"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CursorUICdp = exports.CursorState = void 0;
const clientsManager = __importStar(require("../clients-manager"));
const axis_values_1 = __importDefault(require("../../../../../../../shared/utils/values/axis-values"));
const DEFAULT_COLOR = { r: 50, g: 50, b: 50, a: 0.5 };
const LEFT_BUTTON_DOWN_COLOR = { r: 200, g: 50, b: 50, a: 0.5 };
const RIGHT_BUTTON_DOWN_COLOR = { r: 50, g: 200, b: 50, a: 0.5 };
const CURSOR_RECT = {
    width: 20,
    height: 20,
};
const HIGHTLIGHT_CONFIG = {
    showInfo: true,
    showStyles: true,
    showRulers: true,
    showExtensionLines: true,
    eventTargetColor: DEFAULT_COLOR,
};
var CursorState;
(function (CursorState) {
    CursorState[CursorState["default"] = 0] = "default";
    CursorState[CursorState["leftButtonDown"] = 1] = "leftButtonDown";
    CursorState[CursorState["rightButtonDown"] = 2] = "rightButtonDown";
})(CursorState = exports.CursorState || (exports.CursorState = {}));
class CursorUICdp {
    constructor() {
        this._position = new axis_values_1.default(0, 0);
        this._visible = false;
        this._state = CursorState.default;
    }
    get currentColor() {
        if (this._state === CursorState.leftButtonDown)
            return LEFT_BUTTON_DOWN_COLOR;
        if (this._state === CursorState.rightButtonDown)
            return RIGHT_BUTTON_DOWN_COLOR;
        return DEFAULT_COLOR;
    }
    get overlay() {
        return clientsManager.getClient().Overlay;
    }
    get DOM() {
        return clientsManager.getClient().DOM;
    }
    isVisible() {
        return this._visible;
    }
    async move(position) {
        this._position = position;
        if (this.isVisible())
            await this.show();
    }
    async hide() {
        this._visible = false;
        await this.overlay.hideHighlight();
    }
    async show() {
        this._visible = true;
        if (this._state === CursorState.default)
            await this.overlay.highlightRect(Object.assign({}, CURSOR_RECT, { color: this.currentColor }, this._position));
        else {
            const nodeForLocation = await this.DOM.getNodeForLocation(this._position);
            const config = { highlightConfig: Object.assign({ contentColor: this.currentColor }, HIGHTLIGHT_CONFIG) };
            await this.overlay.highlightNode(Object.assign(nodeForLocation, config));
        }
    }
    async leftButtonDown() {
        this._state = CursorState.leftButtonDown;
        await this.show();
    }
    async rightButtonDown() {
        this._state = CursorState.rightButtonDown;
        await this.show();
    }
    async buttonUp() {
        this._state = CursorState.default;
        await this.show();
    }
}
exports.CursorUICdp = CursorUICdp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Vyc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9jZHAtY2xpZW50L3V0aWxzL2N1cnNvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsbUVBQXFEO0FBQ3JELHVHQUFrRztBQUdsRyxNQUFNLGFBQWEsR0FBYSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNoRSxNQUFNLHNCQUFzQixHQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2pFLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFFakUsTUFBTSxXQUFXLEdBQUc7SUFDaEIsS0FBSyxFQUFHLEVBQUU7SUFDVixNQUFNLEVBQUUsRUFBRTtDQUNiLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFxQztJQUN4RCxRQUFRLEVBQVksSUFBSTtJQUN4QixVQUFVLEVBQVUsSUFBSTtJQUN4QixVQUFVLEVBQVUsSUFBSTtJQUN4QixrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCLGdCQUFnQixFQUFJLGFBQWE7Q0FDcEMsQ0FBQztBQUVGLElBQVksV0FJWDtBQUpELFdBQVksV0FBVztJQUNuQixtREFBTyxDQUFBO0lBQ1AsaUVBQWMsQ0FBQTtJQUNkLG1FQUFlLENBQUE7QUFDbkIsQ0FBQyxFQUpXLFdBQVcsR0FBWCxtQkFBVyxLQUFY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LXByb3RvY29sL3R5cGVzL3Byb3RvY29sJztcbmltcG9ydCBQcm90b2NvbFByb3h5QXBpIGZyb20gJ2RldnRvb2xzLXByb3RvY29sL3R5cGVzL3Byb3RvY29sLXByb3h5LWFwaSc7XG5pbXBvcnQgKiBhcyBjbGllbnRzTWFuYWdlciBmcm9tICcuLi9jbGllbnRzLW1hbmFnZXInO1xuaW1wb3J0IEF4aXNWYWx1ZXMsIHsgQXhpc1ZhbHVlc0RhdGEgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi8uLi9zaGFyZWQvdXRpbHMvdmFsdWVzL2F4aXMtdmFsdWVzJztcbmltcG9ydCB7IEN1cnNvclVJIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2FjdGlvbnMvdHlwZXMnO1xuXG5jb25zdCBERUZBVUxUX0NPTE9SICAgICAgICAgICA9IHsgcjogNTAsIGc6IDUwLCBiOiA1MCwgYTogMC41IH07XG5jb25zdCBMRUZUX0JVVFRPTl9ET1dOX0NPTE9SICA9IHsgcjogMjAwLCBnOiA1MCwgYjogNTAsIGE6IDAuNSB9O1xuY29uc3QgUklHSFRfQlVUVE9OX0RPV05fQ09MT1IgPSB7IHI6IDUwLCBnOiAyMDAsIGI6IDUwLCBhOiAwLjUgfTtcblxuY29uc3QgQ1VSU09SX1JFQ1QgPSB7XG4gICAgd2lkdGg6ICAyMCxcbiAgICBoZWlnaHQ6IDIwLFxufTtcblxuY29uc3QgSElHSFRMSUdIVF9DT05GSUc6IFByb3RvY29sLk92ZXJsYXkuSGlnaGxpZ2h0Q29uZmlnID0ge1xuICAgIHNob3dJbmZvOiAgICAgICAgICAgdHJ1ZSxcbiAgICBzaG93U3R5bGVzOiAgICAgICAgIHRydWUsXG4gICAgc2hvd1J1bGVyczogICAgICAgICB0cnVlLFxuICAgIHNob3dFeHRlbnNpb25MaW5lczogdHJ1ZSxcbiAgICBldmVudFRhcmdldENvbG9yOiAgIERFRkFVTFRfQ09MT1IsXG59O1xuXG5leHBvcnQgZW51bSBDdXJzb3JTdGF0ZSB7XG4gICAgZGVmYXVsdCxcbiAgICBsZWZ0QnV0dG9uRG93bixcbiAgICByaWdodEJ1dHRvbkRvd24sXG59XG5cbmV4cG9ydCBjbGFzcyBDdXJzb3JVSUNkcCBpbXBsZW1lbnRzIEN1cnNvclVJIHtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjogQXhpc1ZhbHVlc0RhdGE8bnVtYmVyPjtcbiAgICBwcml2YXRlIF92aXNpYmxlOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3N0YXRlOiBDdXJzb3JTdGF0ZTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gbmV3IEF4aXNWYWx1ZXM8bnVtYmVyPigwLCAwKTtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhdGUgICAgPSBDdXJzb3JTdGF0ZS5kZWZhdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGN1cnJlbnRDb2xvciAoKTogUHJvdG9jb2wuRE9NLlJHQkEge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IEN1cnNvclN0YXRlLmxlZnRCdXR0b25Eb3duKVxuICAgICAgICAgICAgcmV0dXJuIExFRlRfQlVUVE9OX0RPV05fQ09MT1I7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gQ3Vyc29yU3RhdGUucmlnaHRCdXR0b25Eb3duKVxuICAgICAgICAgICAgcmV0dXJuIFJJR0hUX0JVVFRPTl9ET1dOX0NPTE9SO1xuICAgICAgICByZXR1cm4gREVGQVVMVF9DT0xPUjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBvdmVybGF5ICgpOiBQcm90b2NvbFByb3h5QXBpLk92ZXJsYXlBcGkge1xuICAgICAgICByZXR1cm4gY2xpZW50c01hbmFnZXIuZ2V0Q2xpZW50KCkuT3ZlcmxheTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBET00gKCk6IFByb3RvY29sUHJveHlBcGkuRE9NQXBpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudHNNYW5hZ2VyLmdldENsaWVudCgpLkRPTTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNWaXNpYmxlICgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG1vdmUgKHBvc2l0aW9uOiBBeGlzVmFsdWVzRGF0YTxudW1iZXI+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlKCkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNob3coKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGlkZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICBhd2FpdCB0aGlzLm92ZXJsYXkuaGlkZUhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzaG93ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBDdXJzb3JTdGF0ZS5kZWZhdWx0KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5vdmVybGF5LmhpZ2hsaWdodFJlY3QoT2JqZWN0LmFzc2lnbih7IH0sIENVUlNPUl9SRUNULCB7IGNvbG9yOiB0aGlzLmN1cnJlbnRDb2xvciB9LCB0aGlzLl9wb3NpdGlvbikpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVGb3JMb2NhdGlvbiA9IGF3YWl0IHRoaXMuRE9NLmdldE5vZGVGb3JMb2NhdGlvbih0aGlzLl9wb3NpdGlvbik7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgICAgICAgICAgPSB7IGhpZ2hsaWdodENvbmZpZzogT2JqZWN0LmFzc2lnbih7IGNvbnRlbnRDb2xvcjogdGhpcy5jdXJyZW50Q29sb3IgfSwgSElHSFRMSUdIVF9DT05GSUcpIH07XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMub3ZlcmxheS5oaWdobGlnaHROb2RlKE9iamVjdC5hc3NpZ24obm9kZUZvckxvY2F0aW9uLCBjb25maWcgKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbGVmdEJ1dHRvbkRvd24gKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEN1cnNvclN0YXRlLmxlZnRCdXR0b25Eb3duO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuc2hvdygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByaWdodEJ1dHRvbkRvd24gKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEN1cnNvclN0YXRlLnJpZ2h0QnV0dG9uRG93bjtcblxuICAgICAgICBhd2FpdCB0aGlzLnNob3coKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYnV0dG9uVXAgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEN1cnNvclN0YXRlLmRlZmF1bHQ7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zaG93KCk7XG4gICAgfVxufVxuIl19