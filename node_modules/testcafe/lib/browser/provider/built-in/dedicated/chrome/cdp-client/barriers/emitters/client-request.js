"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const event_emitter_1 = __importDefault(require("../../../../../../../../shared/utils/event-emitter"));
const REQUEST_SEND_EVENT = 'request-send';
const REQUEST_COMPLETED_EVENT = 'request-completed';
const REQUEST_ERROR_EVENT = 'request-error';
class CdpClientRequestEmitter extends event_emitter_1.default {
    constructor(Network, frameId) {
        super();
        this._cdpOffFunctions = [];
        // @ts-ignore
        this._cdpOffFunctions.push(Network.on('requestWillBeSent', (e) => {
            if (e.type !== 'Fetch' && e.type !== 'XHR' || (e.frameId || '') !== frameId)
                return;
            this.emit(REQUEST_SEND_EVENT, e.requestId);
        }));
        // @ts-ignore
        this._cdpOffFunctions.push(Network.on('loadingFinished', (e) => {
            this.emit(REQUEST_COMPLETED_EVENT, e.requestId);
        }));
        // @ts-ignore
        this._cdpOffFunctions.push(Network.on('loadingFailed', (e) => {
            this.emit(REQUEST_ERROR_EVENT, e.requestId);
        }));
    }
    onRequestSend(listener) {
        this.on(REQUEST_SEND_EVENT, listener);
    }
    onRequestCompleted(listener) {
        this.on(REQUEST_COMPLETED_EVENT, listener);
    }
    onRequestError(listener) {
        this.on(REQUEST_ERROR_EVENT, listener);
    }
    offAll() {
        super.offAll();
        for (const cdpOff of this._cdpOffFunctions)
            cdpOff();
    }
}
exports.default = CdpClientRequestEmitter;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LXJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci9wcm92aWRlci9idWlsdC1pbi9kZWRpY2F0ZWQvY2hyb21lL2NkcC1jbGllbnQvYmFycmllcnMvZW1pdHRlcnMvY2xpZW50LXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1R0FBOEU7QUFhOUUsTUFBTSxrQkFBa0IsR0FBUSxjQUFjLENBQUM7QUFDL0MsTUFBTSx1QkFBdUIsR0FBRyxtQkFBbUIsQ0FBQztBQUNwRCxNQUFNLG1CQUFtQixHQUFPLGVBQWUsQ0FBQztBQUVoRCxNQUFxQix1QkFBd0IsU0FBUSx1QkFBWTtJQUc3RCxZQUFvQixPQUFtQixFQUFFLE9BQWU7UUFDcEQsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBRTNCLGFBQWE7UUFDYixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUF5QixFQUFFLEVBQUU7WUFDckYsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEtBQUssT0FBTztnQkFDdkUsT0FBTztZQUVYLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDSixhQUFhO1FBQ2IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBdUIsRUFBRSxFQUFFO1lBQ2pGLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDSixhQUFhO1FBQ2IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQXFCLEVBQUUsRUFBRTtZQUM3RSxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVNLGFBQWEsQ0FBRSxRQUFvQztRQUN0RCxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxrQkFBa0IsQ0FBRSxRQUFvQztRQUMzRCxJQUFJLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxjQUFjLENBQUUsUUFBb0M7UUFDdkQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sTUFBTTtRQUNULEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVmLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLGdCQUFnQjtZQUN0QyxNQUFNLEVBQUUsQ0FBQztJQUNqQixDQUFDO0NBQ0o7QUEzQ0QsMENBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zaGFyZWQvdXRpbHMvZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0RW1pdHRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgUHJvdG9jb2xQcm94eUFwaSBmcm9tICdkZXZ0b29scy1wcm90b2NvbC90eXBlcy9wcm90b2NvbC1wcm94eS1hcGknO1xuaW1wb3J0IE5ldHdvcmtBcGkgPSBQcm90b2NvbFByb3h5QXBpLk5ldHdvcmtBcGk7XG5pbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wnO1xuaW1wb3J0IFJlcXVlc3RXaWxsQmVTZW50RXZlbnQgPSBQcm90b2NvbC5OZXR3b3JrLlJlcXVlc3RXaWxsQmVTZW50RXZlbnQ7XG5pbXBvcnQgTG9hZGluZ0ZpbmlzaGVkRXZlbnQgPSBQcm90b2NvbC5OZXR3b3JrLkxvYWRpbmdGaW5pc2hlZEV2ZW50O1xuaW1wb3J0IExvYWRpbmdGYWlsZWRFdmVudCA9IFByb3RvY29sLk5ldHdvcmsuTG9hZGluZ0ZhaWxlZEV2ZW50O1xuXG5cbnR5cGUgQ2xpZW50UmVxdWVzdFR5cGUgPSBzdHJpbmc7XG50eXBlIENsaWVudFJlcXVlc3RFdmVudExpc3RlbmVyID0gKHJlcTogQ2xpZW50UmVxdWVzdFR5cGUpID0+IHZvaWQ7XG5cbmNvbnN0IFJFUVVFU1RfU0VORF9FVkVOVCAgICAgID0gJ3JlcXVlc3Qtc2VuZCc7XG5jb25zdCBSRVFVRVNUX0NPTVBMRVRFRF9FVkVOVCA9ICdyZXF1ZXN0LWNvbXBsZXRlZCc7XG5jb25zdCBSRVFVRVNUX0VSUk9SX0VWRU5UICAgICA9ICdyZXF1ZXN0LWVycm9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2RwQ2xpZW50UmVxdWVzdEVtaXR0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIgaW1wbGVtZW50cyBDbGllbnRSZXF1ZXN0RW1pdHRlcjxDbGllbnRSZXF1ZXN0VHlwZT4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NkcE9mZkZ1bmN0aW9uczogKCgpID0+IHZvaWQpW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKE5ldHdvcms6IE5ldHdvcmtBcGksIGZyYW1lSWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2NkcE9mZkZ1bmN0aW9ucyA9IFtdO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fY2RwT2ZmRnVuY3Rpb25zLnB1c2goTmV0d29yay5vbigncmVxdWVzdFdpbGxCZVNlbnQnLCAoZTogUmVxdWVzdFdpbGxCZVNlbnRFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ0ZldGNoJyAmJiBlLnR5cGUgIT09ICdYSFInIHx8IChlLmZyYW1lSWQgfHwgJycpICE9PSBmcmFtZUlkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5lbWl0KFJFUVVFU1RfU0VORF9FVkVOVCwgZS5yZXF1ZXN0SWQpO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fY2RwT2ZmRnVuY3Rpb25zLnB1c2goTmV0d29yay5vbignbG9hZGluZ0ZpbmlzaGVkJywgKGU6IExvYWRpbmdGaW5pc2hlZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoUkVRVUVTVF9DT01QTEVURURfRVZFTlQsIGUucmVxdWVzdElkKTtcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuX2NkcE9mZkZ1bmN0aW9ucy5wdXNoKE5ldHdvcmsub24oJ2xvYWRpbmdGYWlsZWQnLCAoZTogTG9hZGluZ0ZhaWxlZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoUkVRVUVTVF9FUlJPUl9FVkVOVCwgZS5yZXF1ZXN0SWQpO1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uUmVxdWVzdFNlbmQgKGxpc3RlbmVyOiBDbGllbnRSZXF1ZXN0RXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgICAgICB0aGlzLm9uKFJFUVVFU1RfU0VORF9FVkVOVCwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblJlcXVlc3RDb21wbGV0ZWQgKGxpc3RlbmVyOiBDbGllbnRSZXF1ZXN0RXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgICAgICB0aGlzLm9uKFJFUVVFU1RfQ09NUExFVEVEX0VWRU5ULCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIG9uUmVxdWVzdEVycm9yIChsaXN0ZW5lcjogQ2xpZW50UmVxdWVzdEV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbihSRVFVRVNUX0VSUk9SX0VWRU5ULCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIG9mZkFsbCAoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLm9mZkFsbCgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgY2RwT2ZmIG9mIHRoaXMuX2NkcE9mZkZ1bmN0aW9ucylcbiAgICAgICAgICAgIGNkcE9mZigpO1xuICAgIH1cbn1cbiJdfQ==