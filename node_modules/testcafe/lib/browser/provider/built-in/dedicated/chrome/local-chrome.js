"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.startOnDocker = exports.start = void 0;
const testcafe_browser_tools_1 = __importDefault(require("testcafe-browser-tools"));
const process_1 = require("../../../../../utils/process");
const browser_starter_1 = __importDefault(require("../../../utils/browser-starter"));
const build_chrome_args_1 = require("./build-chrome-args");
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const timer_1 = __importDefault(require("../../../../../utils/timer"));
const delay_1 = __importDefault(require("../../../../../utils/delay"));
const browserStarter = new browser_starter_1.default();
const LIST_TABS_TIMEOUT = 10000;
const LIST_TABS_DELAY = 500;
async function start(pageUrl, { browserName, config, cdpPort, tempProfileDir, inDocker }) {
    const chromeInfo = await testcafe_browser_tools_1.default.getBrowserInfo(config.path || browserName);
    const chromeOpenParameters = Object.assign({}, chromeInfo);
    chromeOpenParameters.cmd = build_chrome_args_1.buildChromeArgs({ config, cdpPort, platformArgs: chromeOpenParameters.cmd, tempProfileDir, inDocker });
    await browserStarter.startBrowser(chromeOpenParameters, pageUrl);
}
exports.start = start;
async function tryListTabs(cdpPort) {
    try {
        return { tabs: await chrome_remote_interface_1.default.List({ port: cdpPort }) };
    }
    catch (error) {
        return { error };
    }
}
async function startOnDocker(pageUrl, { browserName, config, cdpPort, tempProfileDir, inDocker }) {
    await start('', { browserName, config, cdpPort, tempProfileDir, inDocker });
    let { tabs, error } = await tryListTabs(cdpPort);
    const timer = new timer_1.default(LIST_TABS_TIMEOUT);
    //NOTE: We should repeat getting 'List' after a while because we can get an error if the browser isn't ready.
    while ((error || !tabs.length) && !timer.expired) {
        await delay_1.default(LIST_TABS_DELAY);
        ({ tabs, error } = await tryListTabs(cdpPort));
    }
    if (error)
        throw error;
    const target = tabs.filter(t => t.type === 'page')[0];
    const { Target } = await chrome_remote_interface_1.default({ target, port: cdpPort });
    await Target.createTarget({ url: pageUrl });
    await chrome_remote_interface_1.default.Close({ id: target.id, port: cdpPort });
}
exports.startOnDocker = startOnDocker;
async function stop({ browserId }) {
    // NOTE: Chrome on Linux closes only after the second SIGTERM signall
    if (!await process_1.killBrowserProcess(browserId))
        await process_1.killBrowserProcess(browserId);
}
exports.stop = stop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtY2hyb21lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9sb2NhbC1jaHJvbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0ZBQWtEO0FBQ2xELDBEQUFrRTtBQUNsRSxxRkFBNEQ7QUFDNUQsMkRBQXNEO0FBQ3RELHNGQUFtRDtBQUNuRCx1RUFBK0M7QUFDL0MsdUVBQStDO0FBRS9DLE1BQU0sY0FBYyxHQUFHLElBQUkseUJBQWMsRUFBRSxDQUFDO0FBRTVDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLE1BQU0sZUFBZSxHQUFLLEdBQUcsQ0FBQztBQUV2QixLQUFLLFVBQVUsS0FBSyxDQUFFLE9BQU8sRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUU7SUFDNUYsTUFBTSxVQUFVLEdBQWEsTUFBTSxnQ0FBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxDQUFDO0lBQzNGLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFM0Qsb0JBQW9CLENBQUMsR0FBRyxHQUFHLG1DQUFlLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFbEksTUFBTSxjQUFjLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFQRCxzQkFPQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUUsT0FBTztJQUMvQixJQUFJO1FBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlDQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUMvRDtJQUNELE9BQU8sS0FBSyxFQUFFO1FBQ1YsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQztBQUVNLEtBQUssVUFBVSxhQUFhLENBQUUsT0FBTyxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRTtJQUNwRyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUU1RSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELE1BQU0sS0FBSyxHQUFXLElBQUksZUFBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFbkQsNkdBQTZHO0lBQzdHLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQzlDLE1BQU0sZUFBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTdCLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNsRDtJQUVELElBQUksS0FBSztRQUNMLE1BQU0sS0FBSyxDQUFDO0lBRWhCLE1BQU0sTUFBTSxHQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLGlDQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFakUsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDNUMsTUFBTSxpQ0FBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFyQkQsc0NBcUJDO0FBRU0sS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFFLFNBQVMsRUFBRTtJQUNyQyxxRUFBcUU7SUFDckUsSUFBSSxDQUFDLE1BQU0sNEJBQWtCLENBQUMsU0FBUyxDQUFDO1FBQ3BDLE1BQU0sNEJBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUpELG9CQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJyb3dzZXJUb29scyBmcm9tICd0ZXN0Y2FmZS1icm93c2VyLXRvb2xzJztcbmltcG9ydCB7IGtpbGxCcm93c2VyUHJvY2VzcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3Byb2Nlc3MnO1xuaW1wb3J0IEJyb3dzZXJTdGFydGVyIGZyb20gJy4uLy4uLy4uL3V0aWxzL2Jyb3dzZXItc3RhcnRlcic7XG5pbXBvcnQgeyBidWlsZENocm9tZUFyZ3MgfSBmcm9tICcuL2J1aWxkLWNocm9tZS1hcmdzJztcbmltcG9ydCByZW1vdGVDaHJvbWUgZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3RpbWVyJztcbmltcG9ydCBkZWxheSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy9kZWxheSc7XG5cbmNvbnN0IGJyb3dzZXJTdGFydGVyID0gbmV3IEJyb3dzZXJTdGFydGVyKCk7XG5cbmNvbnN0IExJU1RfVEFCU19USU1FT1VUID0gMTAwMDA7XG5jb25zdCBMSVNUX1RBQlNfREVMQVkgICA9IDUwMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0IChwYWdlVXJsLCB7IGJyb3dzZXJOYW1lLCBjb25maWcsIGNkcFBvcnQsIHRlbXBQcm9maWxlRGlyLCBpbkRvY2tlciB9KSB7XG4gICAgY29uc3QgY2hyb21lSW5mbyAgICAgICAgICAgPSBhd2FpdCBicm93c2VyVG9vbHMuZ2V0QnJvd3NlckluZm8oY29uZmlnLnBhdGggfHwgYnJvd3Nlck5hbWUpO1xuICAgIGNvbnN0IGNocm9tZU9wZW5QYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgY2hyb21lSW5mbyk7XG5cbiAgICBjaHJvbWVPcGVuUGFyYW1ldGVycy5jbWQgPSBidWlsZENocm9tZUFyZ3MoeyBjb25maWcsIGNkcFBvcnQsIHBsYXRmb3JtQXJnczogY2hyb21lT3BlblBhcmFtZXRlcnMuY21kLCB0ZW1wUHJvZmlsZURpciwgaW5Eb2NrZXIgfSk7XG5cbiAgICBhd2FpdCBicm93c2VyU3RhcnRlci5zdGFydEJyb3dzZXIoY2hyb21lT3BlblBhcmFtZXRlcnMsIHBhZ2VVcmwpO1xufVxuXG5hc3luYyBmdW5jdGlvbiB0cnlMaXN0VGFicyAoY2RwUG9ydCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB7IHRhYnM6IGF3YWl0IHJlbW90ZUNocm9tZS5MaXN0KHsgcG9ydDogY2RwUG9ydCB9KSB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydE9uRG9ja2VyIChwYWdlVXJsLCB7IGJyb3dzZXJOYW1lLCBjb25maWcsIGNkcFBvcnQsIHRlbXBQcm9maWxlRGlyLCBpbkRvY2tlciB9KSB7XG4gICAgYXdhaXQgc3RhcnQoJycsIHsgYnJvd3Nlck5hbWUsIGNvbmZpZywgY2RwUG9ydCwgdGVtcFByb2ZpbGVEaXIsIGluRG9ja2VyIH0pO1xuXG4gICAgbGV0IHsgdGFicywgZXJyb3IgfSA9IGF3YWl0IHRyeUxpc3RUYWJzKGNkcFBvcnQpO1xuICAgIGNvbnN0IHRpbWVyICAgICAgICAgPSBuZXcgVGltZXIoTElTVF9UQUJTX1RJTUVPVVQpO1xuXG4gICAgLy9OT1RFOiBXZSBzaG91bGQgcmVwZWF0IGdldHRpbmcgJ0xpc3QnIGFmdGVyIGEgd2hpbGUgYmVjYXVzZSB3ZSBjYW4gZ2V0IGFuIGVycm9yIGlmIHRoZSBicm93c2VyIGlzbid0IHJlYWR5LlxuICAgIHdoaWxlICgoZXJyb3IgfHwgIXRhYnMubGVuZ3RoKSAmJiAhdGltZXIuZXhwaXJlZCkge1xuICAgICAgICBhd2FpdCBkZWxheShMSVNUX1RBQlNfREVMQVkpO1xuXG4gICAgICAgICh7IHRhYnMsIGVycm9yIH0gPSBhd2FpdCB0cnlMaXN0VGFicyhjZHBQb3J0KSk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKVxuICAgICAgICB0aHJvdyBlcnJvcjtcblxuICAgIGNvbnN0IHRhcmdldCAgICAgPSB0YWJzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ3BhZ2UnKVswXTtcbiAgICBjb25zdCB7IFRhcmdldCB9ID0gYXdhaXQgcmVtb3RlQ2hyb21lKHsgdGFyZ2V0LCBwb3J0OiBjZHBQb3J0IH0pO1xuXG4gICAgYXdhaXQgVGFyZ2V0LmNyZWF0ZVRhcmdldCh7IHVybDogcGFnZVVybCB9KTtcbiAgICBhd2FpdCByZW1vdGVDaHJvbWUuQ2xvc2UoeyBpZDogdGFyZ2V0LmlkLCBwb3J0OiBjZHBQb3J0IH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RvcCAoeyBicm93c2VySWQgfSkge1xuICAgIC8vIE5PVEU6IENocm9tZSBvbiBMaW51eCBjbG9zZXMgb25seSBhZnRlciB0aGUgc2Vjb25kIFNJR1RFUk0gc2lnbmFsbFxuICAgIGlmICghYXdhaXQga2lsbEJyb3dzZXJQcm9jZXNzKGJyb3dzZXJJZCkpXG4gICAgICAgIGF3YWl0IGtpbGxCcm93c2VyUHJvY2Vzcyhicm93c2VySWQpO1xufVxuIl19