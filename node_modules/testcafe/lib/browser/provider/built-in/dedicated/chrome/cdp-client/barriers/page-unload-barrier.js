"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PageUnloadBarrier {
    constructor(Page, frameId) {
        this._watchdog = null;
        this._unloaded = false;
        this._waitResolve = null;
        // @ts-ignore
        this._offLifecycleEvent = Page.on('lifecycleEvent', (e) => {
            if (e.name !== 'unload' || (e.frameId || '') !== frameId)
                return;
            this._unloaded = true;
            if (this._waitResolve)
                this._finishWaiting();
        });
    }
    _finishWaiting() {
        if (this._watchdog)
            clearTimeout(this._watchdog);
        this._offLifecycleEvent();
        this._waitResolve(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
        this._watchdog = null;
        this._waitResolve = null;
    }
    wait() {
        return new Promise((resolve) => {
            this._waitResolve = resolve;
            if (!this._unloaded) {
                this._finishWaiting();
                return;
            }
            this._watchdog = setTimeout(() => this._finishWaiting(), PageUnloadBarrier.TIMEOUT);
        });
    }
}
exports.default = PageUnloadBarrier;
PageUnloadBarrier.TIMEOUT = 500;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS11bmxvYWQtYmFycmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2RlZGljYXRlZC9jaHJvbWUvY2RwLWNsaWVudC9iYXJyaWVycy9wYWdlLXVubG9hZC1iYXJyaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsTUFBcUIsaUJBQWlCO0lBUWxDLFlBQW9CLElBQWEsRUFBRSxPQUFlO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQU0sSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQU0sS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBRXpCLGFBQWE7UUFDYixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQXNCLEVBQUUsRUFBRTtZQUMzRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsS0FBSyxPQUFPO2dCQUNwRCxPQUFPO1lBRVgsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFFdEIsSUFBSSxJQUFJLENBQUMsWUFBWTtnQkFDakIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUztZQUNkLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQWEsRUFBRSxDQUFDLENBQUMsK0RBQStEO1FBRXJGLElBQUksQ0FBQyxTQUFTLEdBQU0sSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFTSxJQUFJO1FBQ1AsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztZQUU1QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDakIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUV0QixPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEYsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQWhETCxvQ0FpREM7QUFoRDJCLHlCQUFPLEdBQUcsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3RvY29sUHJveHlBcGkgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wvdHlwZXMvcHJvdG9jb2wtcHJveHktYXBpJztcbmltcG9ydCBQYWdlQXBpID0gUHJvdG9jb2xQcm94eUFwaS5QYWdlQXBpO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBMaWZlY3ljbGVFdmVudEV2ZW50ID0gUHJvdG9jb2wuUGFnZS5MaWZlY3ljbGVFdmVudEV2ZW50O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VVbmxvYWRCYXJyaWVyIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUSU1FT1VUID0gNTAwO1xuXG4gICAgcHJpdmF0ZSBfd2F0Y2hkb2c6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgbnVsbDtcbiAgICBwcml2YXRlIF91bmxvYWRlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF93YWl0UmVzb2x2ZTogKCgpID0+IHZvaWQpIHwgbnVsbDtcbiAgICBwcml2YXRlIF9vZmZMaWZlY3ljbGVFdmVudDogKCkgPT4gdm9pZDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoUGFnZTogUGFnZUFwaSwgZnJhbWVJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3dhdGNoZG9nICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdW5sb2FkZWQgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fd2FpdFJlc29sdmUgPSBudWxsO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fb2ZmTGlmZWN5Y2xlRXZlbnQgPSBQYWdlLm9uKCdsaWZlY3ljbGVFdmVudCcsIChlOiBMaWZlY3ljbGVFdmVudEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5uYW1lICE9PSAndW5sb2FkJyB8fCAoZS5mcmFtZUlkIHx8ICcnKSAhPT0gZnJhbWVJZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMuX3VubG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3dhaXRSZXNvbHZlKVxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaFdhaXRpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZmluaXNoV2FpdGluZyAoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl93YXRjaGRvZylcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl93YXRjaGRvZyk7XG5cbiAgICAgICAgdGhpcy5fb2ZmTGlmZWN5Y2xlRXZlbnQoKTtcbiAgICAgICAgdGhpcy5fd2FpdFJlc29sdmUhKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuXG4gICAgICAgIHRoaXMuX3dhdGNoZG9nICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5fd2FpdFJlc29sdmUgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyB3YWl0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSA9IHJlc29sdmU7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fdW5sb2FkZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hXYWl0aW5nKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3dhdGNoZG9nID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLl9maW5pc2hXYWl0aW5nKCksIFBhZ2VVbmxvYWRCYXJyaWVyLlRJTUVPVVQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=