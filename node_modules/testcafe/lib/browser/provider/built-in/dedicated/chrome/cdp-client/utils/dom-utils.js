"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParents = exports.getParentNode = exports.getImgMapName = exports.containsElement = exports.getNodeText = exports.closest = exports.isIframeWindow = exports.isDocumentElement = exports.getDocumentElement = exports.isNodeEqual = exports.isDomElement = exports.getScrollingElement = exports.isImgElement = exports.isBodyElement = exports.isHtmlElement = exports.getTagName = exports.findIframeByWindow = exports.getIFrameByIndex = exports.getIframeByElement = void 0;
const execution_context_1 = __importDefault(require("../execution-context"));
const index_1 = require("./index");
const clientsManager = __importStar(require("../clients-manager"));
async function getIframeByElement({ objectId }) {
    const { Runtime, DOM } = clientsManager.getClient();
    const frame = await Runtime.callFunctionOn({
        functionDeclaration: `function () {
            return this.ownerDocument.defaultView.frameElement
        }`,
        objectId,
    });
    if (frame.result.value !== null)
        return index_1.describeNode(DOM, frame.result.objectId || '');
    return null;
}
exports.getIframeByElement = getIframeByElement;
async function getIFrameByIndex(objectId, index) {
    const { Runtime, DOM } = clientsManager.getClient();
    const frame = await Runtime.callFunctionOn({
        functionDeclaration: `function (index) {
                return this[index];
            }`,
        objectId: objectId,
        arguments: [{ value: index }],
    });
    const frameObjectId = frame.result.objectId;
    if (frameObjectId)
        return index_1.describeNode(DOM, frameObjectId);
    return null;
}
exports.getIFrameByIndex = getIFrameByIndex;
async function findIframeByWindow(context) {
    const { Runtime } = clientsManager.getClient();
    const expression = `
        (function findIframes(parentDocument, result = []) {
            if (!parentDocument)
                return [];
        
            const children = parentDocument.querySelectorAll('iframe');
        
            for (const child of children) {
                result.push(child, ...findIframes(child.contentDocument));
            }
        
            return result;
        })(document);
   `;
    const frames = await Runtime.evaluate({ expression });
    let index = 0;
    let frame = await getIFrameByIndex(frames.result.objectId, index);
    while (frame) {
        if (context.frameId === frame.frameId)
            return frame;
        index++;
        frame = await getIFrameByIndex(frames.result.objectId, index);
    }
    return null;
}
exports.findIframeByWindow = findIframeByWindow;
function getTagName(node) {
    return node.nodeName.toLowerCase();
}
exports.getTagName = getTagName;
function hasTagName(node, tagName) {
    return node.nodeName.toLowerCase() === tagName.toLowerCase();
}
function isHtmlElement(node) {
    return hasTagName(node, 'html');
}
exports.isHtmlElement = isHtmlElement;
function isBodyElement(node) {
    return hasTagName(node, 'body');
}
exports.isBodyElement = isBodyElement;
function isImgElement(node) {
    return hasTagName(node, 'img');
}
exports.isImgElement = isImgElement;
async function getScrollingElement(node) {
    const client = clientsManager.getClient();
    const args = {
        functionDeclaration: `function () {
            const doc = this !== window ? this.ownerDocument : document;
            
            return doc.scrollingElement;
        }`,
    };
    if (node)
        args.objectId = node.objectId;
    else
        args.executionContextId = execution_context_1.default.top.ctxId;
    const { result } = await client.Runtime.callFunctionOn(args);
    return index_1.describeNode(client.DOM, result.objectId || '');
}
exports.getScrollingElement = getScrollingElement;
function isDomElement(node) {
    return node.nodeType === 1;
}
exports.isDomElement = isDomElement;
function isNodeEqual(el1, el2) {
    return el1.backendNodeId === el2.backendNodeId;
}
exports.isNodeEqual = isNodeEqual;
async function getDocumentElement(win) {
    const { Runtime, DOM } = clientsManager.getClient();
    const { exceptionDetails, result: resultObj } = await Runtime.evaluate({
        expression: 'document.documentElement',
        contextId: win.ctxId,
    });
    if (exceptionDetails)
        throw exceptionDetails;
    return index_1.describeNode(DOM, resultObj.objectId);
}
exports.getDocumentElement = getDocumentElement;
async function isDocumentElement(el) {
    const docEl = await getDocumentElement(execution_context_1.default.current);
    return isNodeEqual(el, docEl);
}
exports.isDocumentElement = isDocumentElement;
async function isIframeWindow() {
    return false;
}
exports.isIframeWindow = isIframeWindow;
async function closest(el, selector) {
    const { Runtime, DOM } = clientsManager.getClient();
    const { exceptionDetails, result: resultObj } = await Runtime.callFunctionOn({
        arguments: [{ objectId: el.objectId }, { value: selector }],
        functionDeclaration: `function (el, selector) {
            debugger;
            return window["%proxyless%"].nativeMethods.closest.call(el, selector);
        }`,
        executionContextId: execution_context_1.default.getCurrentContextId(),
    });
    if (exceptionDetails)
        throw exceptionDetails;
    return resultObj.value ? index_1.describeNode(DOM, resultObj.value.objectId) : null;
}
exports.closest = closest;
async function getNodeText(el) {
    const { Runtime } = clientsManager.getClient();
    const { exceptionDetails, result: resultObj } = await Runtime.callFunctionOn({
        arguments: [{ objectId: el.objectId }],
        functionDeclaration: `function (el) {
            return window["%proxyless%"].nativeMethods.nodeTextContentGetter.call(el);
        }`,
        executionContextId: execution_context_1.default.getCurrentContextId(),
    });
    if (exceptionDetails)
        throw exceptionDetails;
    return resultObj.value;
}
exports.getNodeText = getNodeText;
async function containsElement(el1, el2) {
    const { Runtime } = clientsManager.getClient();
    const { exceptionDetails, result: resultObj } = await Runtime.callFunctionOn({
        arguments: [{ objectId: el1.objectId }, { objectId: el2.objectId }],
        functionDeclaration: `function (el1, el2) {
            do {
                if (el2.parentNode === el1)
                    return true;
            }
            while(el2 = el2.parentNode);
            return false;
        }`,
        executionContextId: execution_context_1.default.getCurrentContextId(),
    });
    if (exceptionDetails)
        throw exceptionDetails;
    return resultObj.value;
}
exports.containsElement = containsElement;
function getImgMapName(el) {
    if (!el.attributes)
        return '';
    const useMapIndex = el.attributes.indexOf('usemap');
    if (useMapIndex === -1)
        return '';
    return el.attributes[useMapIndex + 1].substring(1);
}
exports.getImgMapName = getImgMapName;
async function getParentNode({ objectId }) {
    const { Runtime, DOM } = clientsManager.getClient();
    const parent = await Runtime.callFunctionOn({
        functionDeclaration: `function () {
            const el = this.assignedSlot || this;

            return this.parentNode || el.host;
        }`,
        objectId,
    });
    if (parent.result.value !== null && parent.result.objectId)
        return index_1.describeNode(DOM, parent.result.objectId || '');
    return null;
}
exports.getParentNode = getParentNode;
async function getParents(el) {
    // TODO: check this method
    const result = [];
    let parent = await getParentNode(el);
    while (parent) {
        result.push(parent);
        parent = await getParentNode(parent);
    }
    return result;
}
exports.getParents = getParents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9jZHAtY2xpZW50L3V0aWxzL2RvbS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsNkVBQW9EO0FBQ3BELG1DQUF1QztBQUN2QyxtRUFBcUQ7QUFHOUMsS0FBSyxVQUFVLGtCQUFrQixDQUFFLEVBQUUsUUFBUSxFQUFjO0lBQzlELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXBELE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUN2QyxtQkFBbUIsRUFBRTs7VUFFbkI7UUFDRixRQUFRO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJO1FBQzNCLE9BQU8sb0JBQVksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7SUFFMUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQWRELGdEQWNDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQixDQUFFLFFBQTRCLEVBQUUsS0FBYTtJQUMvRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUVwRCxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDdkMsbUJBQW1CLEVBQUU7O2NBRWY7UUFDTixRQUFRLEVBQUcsUUFBUTtRQUNuQixTQUFTLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztLQUNoQyxDQUFDLENBQUM7SUFFSCxNQUFNLGFB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QUFDaEIsQ0FBQztBQWhCRCxzQ0FnQkM7QUFFTSxLQUFLLFVBQVUsVUFBVSxDQUFFLEVBQWM7SUFDNUMsMEJBQTBCO0lBQzFCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUVsQixJQUFJLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVyQyxPQUFPLE1BQU0sRUFBRTtRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEIsTUFBTSxHQUFHLE1BQU0sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQWJELGdDQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sL3R5cGVzL3Byb3RvY29sJztcbmltcG9ydCBFeGVjdXRpb25Db250ZXh0IGZyb20gJy4uL2V4ZWN1dGlvbi1jb250ZXh0JztcbmltcG9ydCB7IGRlc2NyaWJlTm9kZSB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0ICogYXMgY2xpZW50c01hbmFnZXIgZnJvbSAnLi4vY2xpZW50cy1tYW5hZ2VyJztcbmltcG9ydCB7IFNlcnZlck5vZGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJZnJhbWVCeUVsZW1lbnQgKHsgb2JqZWN0SWQgfTogU2VydmVyTm9kZSk6IFByb21pc2U8U2VydmVyTm9kZSB8IG51bGw+IHtcbiAgICBjb25zdCB7IFJ1bnRpbWUsIERPTSB9ID0gY2xpZW50c01hbmFnZXIuZ2V0Q2xpZW50KCk7XG5cbiAgICBjb25zdCBmcmFtZSA9IGF3YWl0IFJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24oe1xuICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uOiBgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5mcmFtZUVsZW1lbnRcbiAgICAgICAgfWAsXG4gICAgICAgIG9iamVjdElkLFxuICAgIH0pO1xuXG4gICAgaWYgKGZyYW1lLnJlc3VsdC52YWx1ZSAhPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlTm9kZShET00sIGZyYW1lLnJlc3VsdC5vYmplY3RJZCB8fCAnJyk7XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldElGcmFtZUJ5SW5kZXggKG9iamVjdElkOiBzdHJpbmcgfCB1bmRlZmluZWQsIGluZGV4OiBudW1iZXIpOiBQcm9taXNlPFNlcnZlck5vZGUgfCBudWxsPiB7XG4gICAgY29uc3QgeyBSdW50aW1lLCBET00gfSA9IGNsaWVudHNNYW5hZ2VyLmdldENsaWVudCgpO1xuXG4gICAgY29uc3QgZnJhbWUgPSBhd2FpdCBSdW50aW1lLmNhbGxGdW5jdGlvbk9uKHtcbiAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbjogYGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2luZGV4XTtcbiAgICAgICAgICAgIH1gLFxuICAgICAgICBvYmplY3RJZDogIG9iamVjdElkLFxuICAgICAgICBhcmd1bWVudHM6IFt7IHZhbHVlOiBpbmRleCB9XSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGZyYW1lT2JqZWN0SWQgPSBmcmFtZS5yZXN1bHQub2JqZWN0SWQ7XG5cbiAgICBpZiAoZnJhbWVPYmplY3RJZClcbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlTm9kZShET00sIGZyYW1lT2JqZWN0SWQpO1xuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kSWZyYW1lQnlXaW5kb3cgKGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPFNlcnZlck5vZGUgfCBudWxsPiB7XG4gICAgY29uc3QgeyBSdW50aW1lIH0gPSBjbGllbnRzTWFuYWdlci5nZXRDbGllbnQoKTtcblxuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBgXG4gICAgICAgIChmdW5jdGlvbiBmaW5kSWZyYW1lcyhwYXJlbnREb2N1bWVudCwgcmVzdWx0ID0gW10pIHtcbiAgICAgICAgICAgIGlmICghcGFyZW50RG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50RG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaWZyYW1lJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkLCAuLi5maW5kSWZyYW1lcyhjaGlsZC5jb250ZW50RG9jdW1lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KShkb2N1bWVudCk7XG4gICBgO1xuXG4gICAgY29uc3QgZnJhbWVzID0gYXdhaXQgUnVudGltZS5ldmFsdWF0ZSh7IGV4cHJlc3Npb24gfSk7XG4gICAgbGV0IGluZGV4ICAgID0gMDtcbiAgICBsZXQgZnJhbWUgICAgPSBhd2FpdCBnZXRJRnJhbWVCeUluZGV4KGZyYW1lcy5yZXN1bHQub2JqZWN0SWQsIGluZGV4KTtcblxuICAgIHdoaWxlIChmcmFtZSkge1xuICAgICAgICBpZiAoY29udGV4dC5mcmFtZUlkID09PSBmcmFtZS5mcmFtZUlkKVxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lO1xuXG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgZnJhbWUgPSBhd2FpdCBnZXRJRnJhbWVCeUluZGV4KGZyYW1lcy5yZXN1bHQub2JqZWN0SWQsIGluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhZ05hbWUgKG5vZGU6IFNlcnZlck5vZGUpOiBzdHJpbmcge1xuICAgIHJldHVybiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGhhc1RhZ05hbWUgKG5vZGU6IFNlcnZlck5vZGUsIHRhZ05hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQgKG5vZGU6IFNlcnZlck5vZGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaGFzVGFnTmFtZShub2RlLCAnaHRtbCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb2R5RWxlbWVudCAobm9kZTogU2VydmVyTm9kZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBoYXNUYWdOYW1lKG5vZGUsICdib2R5Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ltZ0VsZW1lbnQgKG5vZGU6IFNlcnZlck5vZGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaGFzVGFnTmFtZShub2RlLCAnaW1nJyk7XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNjcm9sbGluZ0VsZW1lbnQgKG5vZGU/OiBTZXJ2ZXJOb2RlKTogUHJvbWlzZTxTZXJ2ZXJOb2RlPiB7XG4gICAgY29uc3QgY2xpZW50ID0gY2xpZW50c01hbmFnZXIuZ2V0Q2xpZW50KCk7XG5cbiAgICBjb25zdCBhcmdzOiBQcm90b2NvbC5SdW50aW1lLkNhbGxGdW5jdGlvbk9uUmVxdWVzdCA9IHtcbiAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbjogYGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IHRoaXMgIT09IHdpbmRvdyA/IHRoaXMub3duZXJEb2N1bWVudCA6IGRvY3VtZW50O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZG9jLnNjcm9sbGluZ0VsZW1lbnQ7XG4gICAgICAgIH1gLFxuICAgIH07XG5cbiAgICBpZiAobm9kZSlcbiAgICAgICAgYXJncy5vYmplY3RJZCA9IG5vZGUub2JqZWN0SWQ7XG4gICAgZWxzZVxuICAgICAgICBhcmdzLmV4ZWN1dGlvbkNvbnRleHRJZCA9IEV4ZWN1dGlvbkNvbnRleHQudG9wLmN0eElkO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IGF3YWl0IGNsaWVudC5SdW50aW1lLmNhbGxGdW5jdGlvbk9uKGFyZ3MpO1xuXG4gICAgcmV0dXJuIGRlc2NyaWJlTm9kZShjbGllbnQuRE9NLCByZXN1bHQub2JqZWN0SWQgfHwgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEb21FbGVtZW50IChub2RlOiBTZXJ2ZXJOb2RlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVFcXVhbCAoZWwxOiBTZXJ2ZXJOb2RlLCBlbDI6IFNlcnZlck5vZGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZWwxLmJhY2tlbmROb2RlSWQgPT09IGVsMi5iYWNrZW5kTm9kZUlkO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50ICh3aW46IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPFNlcnZlck5vZGU+IHtcbiAgICBjb25zdCB7IFJ1bnRpbWUsIERPTSB9ID0gY2xpZW50c01hbmFnZXIuZ2V0Q2xpZW50KCk7XG5cbiAgICBjb25zdCB7IGV4Y2VwdGlvbkRldGFpbHMsIHJlc3VsdDogcmVzdWx0T2JqIH0gPSBhd2FpdCBSdW50aW1lLmV2YWx1YXRlKHtcbiAgICAgICAgZXhwcmVzc2lvbjogJ2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCcsXG4gICAgICAgIGNvbnRleHRJZDogIHdpbi5jdHhJZCxcbiAgICB9KTtcblxuICAgIGlmIChleGNlcHRpb25EZXRhaWxzKVxuICAgICAgICB0aHJvdyBleGNlcHRpb25EZXRhaWxzO1xuXG4gICAgcmV0dXJuIGRlc2NyaWJlTm9kZShET00sIHJlc3VsdE9iai5vYmplY3RJZCBhcyBzdHJpbmcpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNEb2N1bWVudEVsZW1lbnQgKGVsOiBTZXJ2ZXJOb2RlKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgZG9jRWwgPSBhd2FpdCBnZXREb2N1bWVudEVsZW1lbnQoRXhlY3V0aW9uQ29udGV4dC5jdXJyZW50KTtcblxuICAgIHJldHVybiBpc05vZGVFcXVhbChlbCwgZG9jRWwpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNJZnJhbWVXaW5kb3cgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3Nlc3QgKGVsOiBTZXJ2ZXJOb2RlLCBzZWxlY3Rvcjogc3RyaW5nKTogUHJvbWlzZTxTZXJ2ZXJOb2RlIHwgbnVsbD4ge1xuICAgIGNvbnN0IHsgUnVudGltZSwgRE9NIH0gPSBjbGllbnRzTWFuYWdlci5nZXRDbGllbnQoKTtcblxuICAgIGNvbnN0IHsgZXhjZXB0aW9uRGV0YWlscywgcmVzdWx0OiByZXN1bHRPYmogfSA9IGF3YWl0IFJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24oe1xuICAgICAgICBhcmd1bWVudHM6ICAgICAgICAgICBbeyBvYmplY3RJZDogZWwub2JqZWN0SWQgfSwgeyB2YWx1ZTogc2VsZWN0b3IgfV0sXG4gICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb246IGBmdW5jdGlvbiAoZWwsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3dbXCIlcHJveHlsZXNzJVwiXS5uYXRpdmVNZXRob2RzLmNsb3Nlc3QuY2FsbChlbCwgc2VsZWN0b3IpO1xuICAgICAgICB9YCxcbiAgICAgICAgZXhlY3V0aW9uQ29udGV4dElkOiBFeGVjdXRpb25Db250ZXh0LmdldEN1cnJlbnRDb250ZXh0SWQoKSxcbiAgICB9KTtcblxuICAgIGlmIChleGNlcHRpb25EZXRhaWxzKVxuICAgICAgICB0aHJvdyBleGNlcHRpb25EZXRhaWxzO1xuXG4gICAgcmV0dXJuIHJlc3VsdE9iai52YWx1ZSA/IGRlc2NyaWJlTm9kZShET00sIHJlc3VsdE9iai52YWx1ZS5vYmplY3RJZCkgOiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Tm9kZVRleHQgKGVsOiBTZXJ2ZXJOb2RlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB7IFJ1bnRpbWUgfSA9IGNsaWVudHNNYW5hZ2VyLmdldENsaWVudCgpO1xuXG4gICAgY29uc3QgeyBleGNlcHRpb25EZXRhaWxzLCByZXN1bHQ6IHJlc3VsdE9iaiB9ID0gYXdhaXQgUnVudGltZS5jYWxsRnVuY3Rpb25Pbih7XG4gICAgICAgIGFyZ3VtZW50czogICAgICAgICAgIFt7IG9iamVjdElkOiBlbC5vYmplY3RJZCB9XSxcbiAgICAgICAgZnVuY3Rpb25EZWNsYXJhdGlvbjogYGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvd1tcIiVwcm94eWxlc3MlXCJdLm5hdGl2ZU1ldGhvZHMubm9kZVRleHRDb250ZW50R2V0dGVyLmNhbGwoZWwpO1xuICAgICAgICB9YCxcbiAgICAgICAgZXhlY3V0aW9uQ29udGV4dElkOiBFeGVjdXRpb25Db250ZXh0LmdldEN1cnJlbnRDb250ZXh0SWQoKSxcbiAgICB9KTtcblxuICAgIGlmIChleGNlcHRpb25EZXRhaWxzKVxuICAgICAgICB0aHJvdyBleGNlcHRpb25EZXRhaWxzO1xuXG4gICAgcmV0dXJuIHJlc3VsdE9iai52YWx1ZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbnRhaW5zRWxlbWVudCAoZWwxOiBTZXJ2ZXJOb2RlLCBlbDI6IFNlcnZlck5vZGUpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCB7IFJ1bnRpbWUgfSA9IGNsaWVudHNNYW5hZ2VyLmdldENsaWVudCgpO1xuXG4gICAgY29uc3QgeyBleGNlcHRpb25EZXRhaWxzLCByZXN1bHQ6IHJlc3VsdE9iaiB9ID0gYXdhaXQgUnVudGltZS5jYWxsRnVuY3Rpb25Pbih7XG4gICAgICAgIGFyZ3VtZW50czogICAgICAgICAgIFt7IG9iamVjdElkOiBlbDEub2JqZWN0SWQgfSwgeyBvYmplY3RJZDogZWwyLm9iamVjdElkIH1dLFxuICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uOiBgZnVuY3Rpb24gKGVsMSwgZWwyKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGVsMi5wYXJlbnROb2RlID09PSBlbDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUoZWwyID0gZWwyLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9YCxcbiAgICAgICAgZXhlY3V0aW9uQ29udGV4dElkOiBFeGVjdXRpb25Db250ZXh0LmdldEN1cnJlbnRDb250ZXh0SWQoKSxcbiAgICB9KTtcblxuICAgIGlmIChleGNlcHRpb25EZXRhaWxzKVxuICAgICAgICB0aHJvdyBleGNlcHRpb25EZXRhaWxzO1xuXG4gICAgcmV0dXJuIHJlc3VsdE9iai52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEltZ01hcE5hbWUgKGVsOiBTZXJ2ZXJOb2RlKTogc3RyaW5nIHtcbiAgICBpZiAoIWVsLmF0dHJpYnV0ZXMpXG4gICAgICAgIHJldHVybiAnJztcblxuICAgIGNvbnN0IHVzZU1hcEluZGV4ID0gZWwuYXR0cmlidXRlcy5pbmRleE9mKCd1c2VtYXAnKTtcblxuICAgIGlmICh1c2VNYXBJbmRleCA9PT0gLTEpXG4gICAgICAgIHJldHVybiAnJztcblxuICAgIHJldHVybiBlbC5hdHRyaWJ1dGVzW3VzZU1hcEluZGV4ICsgMV0uc3Vic3RyaW5nKDEpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZSAoeyBvYmplY3RJZCB9OiBTZXJ2ZXJOb2RlKTogUHJvbWlzZTxTZXJ2ZXJOb2RlIHwgbnVsbD4ge1xuICAgIGNvbnN0IHsgUnVudGltZSwgRE9NIH0gPSBjbGllbnRzTWFuYWdlci5nZXRDbGllbnQoKTtcblxuICAgIGNvbnN0IHBhcmVudCA9IGF3YWl0IFJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24oe1xuICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uOiBgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmFzc2lnbmVkU2xvdCB8fCB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnROb2RlIHx8IGVsLmhvc3Q7XG4gICAgICAgIH1gLFxuICAgICAgICBvYmplY3RJZCxcbiAgICB9KTtcblxuICAgIGlmIChwYXJlbnQucmVzdWx0LnZhbHVlICE9PSBudWxsICYmIHBhcmVudC5yZXN1bHQub2JqZWN0SWQpXG4gICAgICAgIHJldHVybiBkZXNjcmliZU5vZGUoRE9NLCBwYXJlbnQucmVzdWx0Lm9iamVjdElkIHx8ICcnKTtcblxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGFyZW50cyAoZWw6IFNlcnZlck5vZGUpOiBQcm9taXNlPFNlcnZlck5vZGVbXT4ge1xuICAgIC8vIFRPRE86IGNoZWNrIHRoaXMgbWV0aG9kXG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBsZXQgcGFyZW50ID0gYXdhaXQgZ2V0UGFyZW50Tm9kZShlbCk7XG5cbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHBhcmVudCk7XG5cbiAgICAgICAgcGFyZW50ID0gYXdhaXQgZ2V0UGFyZW50Tm9kZShwYXJlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXX0=