"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const event_emitter_1 = __importDefault(require("../../../../../../../../shared/utils/event-emitter"));
const SCRIPT_ADDED = 'script-added';
const SCRIPT_LOADED_OR_FAILED = 'script-loaded-or-failed';
class CdpScriptExecutionEmitter extends event_emitter_1.default {
    constructor(Network, frameId) {
        super();
        this._cdpOffFunctions = [];
        // @ts-ignore
        this._cdpOffFunctions.push(Network.on('requestWillBeSent', (e) => {
            if (e.type !== 'Script' || (e.frameId || '') !== frameId)
                return;
            this.emit(SCRIPT_ADDED, e.requestId);
        }));
        const completeListener = (e) => this.emit(SCRIPT_LOADED_OR_FAILED, e.requestId);
        // @ts-ignore
        this._cdpOffFunctions.push(Network.on('loadingFinished', completeListener));
        // @ts-ignore
        this._cdpOffFunctions.push(Network.on('loadingFailed', completeListener));
    }
    onScriptAdded(listener) {
        this.on(SCRIPT_ADDED, listener);
    }
    onScriptLoadedOrFailed(listener) {
        this.on(SCRIPT_LOADED_OR_FAILED, listener);
    }
    offAll() {
        super.offAll();
        for (const cdpOff of this._cdpOffFunctions)
            cdpOff();
    }
}
exports.default = CdpScriptExecutionEmitter;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2RlZGljYXRlZC9jaHJvbWUvY2RwLWNsaWVudC9iYXJyaWVycy9lbWl0dGVycy9zY3JpcHQtZXhlY3V0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUdBQThFO0FBWTlFLE1BQU0sWUFBWSxHQUFjLGNBQWMsQ0FBQztBQUMvQyxNQUFNLHVCQUF1QixHQUFHLHlCQUF5QixDQUFDO0FBRTFELE1BQXFCLHlCQUEwQixTQUFRLHVCQUFZO0lBRy9ELFlBQW9CLE9BQW1CLEVBQUUsT0FBZTtRQUNwRCxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFFM0IsYUFBYTtRQUNiLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQXlCLEVBQUUsRUFBRTtZQUNyRixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsS0FBSyxPQUFPO2dCQUNwRCxPQUFPO1lBRVgsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBNEMsRUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakksYUFBYTtRQUNiLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDNUUsYUFBYTtRQUNiLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFTSxhQUFhLENBQUUsUUFBNkI7UUFDL0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLHNCQUFzQixDQUFFLFFBQTZCO1FBQ3hELElBQUksQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLE1BQU07UUFDVCxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFZixLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxnQkFBZ0I7WUFDdEMsTUFBTSxFQUFFLENBQUM7SUFDakIsQ0FBQztDQUNKO0FBdENELDRDQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc2hhcmVkL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xuaW1wb3J0IHsgU2NyaXB0RXhlY3V0aW9uRW1pdHRlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgUHJvdG9jb2xQcm94eUFwaSBmcm9tICdkZXZ0b29scy1wcm90b2NvbC90eXBlcy9wcm90b2NvbC1wcm94eS1hcGknO1xuaW1wb3J0IE5ldHdvcmtBcGkgPSBQcm90b2NvbFByb3h5QXBpLk5ldHdvcmtBcGk7XG5pbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wnO1xuaW1wb3J0IFJlcXVlc3RXaWxsQmVTZW50RXZlbnQgPSBQcm90b2NvbC5OZXR3b3JrLlJlcXVlc3RXaWxsQmVTZW50RXZlbnQ7XG5pbXBvcnQgTG9hZGluZ0ZpbmlzaGVkRXZlbnQgPSBQcm90b2NvbC5OZXR3b3JrLkxvYWRpbmdGaW5pc2hlZEV2ZW50O1xuaW1wb3J0IExvYWRpbmdGYWlsZWRFdmVudCA9IFByb3RvY29sLk5ldHdvcmsuTG9hZGluZ0ZhaWxlZEV2ZW50O1xuXG5cbnR5cGUgU2NyaXB0RXZlbnRMaXN0ZW5lciA9IChzY3JpcHQ6IHN0cmluZykgPT4gdm9pZDtcblxuY29uc3QgU0NSSVBUX0FEREVEICAgICAgICAgICAgPSAnc2NyaXB0LWFkZGVkJztcbmNvbnN0IFNDUklQVF9MT0FERURfT1JfRkFJTEVEID0gJ3NjcmlwdC1sb2FkZWQtb3ItZmFpbGVkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2RwU2NyaXB0RXhlY3V0aW9uRW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciBpbXBsZW1lbnRzIFNjcmlwdEV4ZWN1dGlvbkVtaXR0ZXI8c3RyaW5nPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2RwT2ZmRnVuY3Rpb25zOiAoKCkgPT4gdm9pZClbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoTmV0d29yazogTmV0d29ya0FwaSwgZnJhbWVJZDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fY2RwT2ZmRnVuY3Rpb25zID0gW107XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLl9jZHBPZmZGdW5jdGlvbnMucHVzaChOZXR3b3JrLm9uKCdyZXF1ZXN0V2lsbEJlU2VudCcsIChlOiBSZXF1ZXN0V2lsbEJlU2VudEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZS50eXBlICE9PSAnU2NyaXB0JyB8fCAoZS5mcmFtZUlkIHx8ICcnKSAhPT0gZnJhbWVJZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMuZW1pdChTQ1JJUFRfQURERUQsIGUucmVxdWVzdElkKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGNvbnN0IGNvbXBsZXRlTGlzdGVuZXIgPSAoZTogTG9hZGluZ0ZpbmlzaGVkRXZlbnQgfCBMb2FkaW5nRmFpbGVkRXZlbnQpOiB2b2lkID0+IHRoaXMuZW1pdChTQ1JJUFRfTE9BREVEX09SX0ZBSUxFRCwgZS5yZXF1ZXN0SWQpO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fY2RwT2ZmRnVuY3Rpb25zLnB1c2goTmV0d29yay5vbignbG9hZGluZ0ZpbmlzaGVkJywgY29tcGxldGVMaXN0ZW5lcikpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuX2NkcE9mZkZ1bmN0aW9ucy5wdXNoKE5ldHdvcmsub24oJ2xvYWRpbmdGYWlsZWQnLCBjb21wbGV0ZUxpc3RlbmVyKSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uU2NyaXB0QWRkZWQgKGxpc3RlbmVyOiBTY3JpcHRFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMub24oU0NSSVBUX0FEREVELCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIG9uU2NyaXB0TG9hZGVkT3JGYWlsZWQgKGxpc3RlbmVyOiBTY3JpcHRFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMub24oU0NSSVBUX0xPQURFRF9PUl9GQUlMRUQsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2ZmQWxsICgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub2ZmQWxsKCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBjZHBPZmYgb2YgdGhpcy5fY2RwT2ZmRnVuY3Rpb25zKVxuICAgICAgICAgICAgY2RwT2ZmKCk7XG4gICAgfVxufVxuIl19