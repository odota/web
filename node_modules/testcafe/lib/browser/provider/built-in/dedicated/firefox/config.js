"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const argument_parsing_1 = require("../../../utils/argument-parsing");
const AVAILABLE_MODES = ['userProfile', 'headless'];
const configCache = {};
function hasCustomProfile(userArgs) {
    return !!(userArgs.match(/-P\s/) || userArgs.match(/-profile\s/));
}
function parseModes(modesStr, userArgs) {
    const parsed = argument_parsing_1.splitEscaped(modesStr, ':');
    const path = argument_parsing_1.getPathFromParsedModes(parsed, AVAILABLE_MODES);
    const detectedModes = argument_parsing_1.getModes(parsed, AVAILABLE_MODES);
    const optionsString = parsed.filter(item => !!item).join(':');
    const options = parsed.length ? argument_parsing_1.splitEscaped(optionsString, ';') : [];
    return {
        path: path,
        userProfile: detectedModes.userProfile || hasCustomProfile(userArgs),
        headless: detectedModes.headless,
        marionettePort: argument_parsing_1.findMatch(options, /^marionettePort=(.*)/),
        disableMultiprocessing: argument_parsing_1.isMatchTrue(options, /^disableMultiprocessing=(.*)/),
    };
}
function getNewConfig(configString) {
    const { userArgs, modesString } = argument_parsing_1.parseConfig(configString);
    const modes = parseModes(modesString, userArgs);
    return Object.assign({ userArgs }, modes);
}
function default_1(configString) {
    if (!configCache[configString])
        configCache[configString] = getNewConfig(configString);
    return configCache[configString];
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2ZpcmVmb3gvY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0VBT3lDO0FBR3pDLE1BQU0sZUFBZSxHQUFHLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRXBELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUV2QixTQUFTLGdCQUFnQixDQUFFLFFBQVE7SUFDL0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUUsUUFBUSxFQUFFLFFBQVE7SUFDbkMsTUFBTSxNQUFNLEdBQVUsK0JBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEQsTUFBTSxJQUFJLEdBQVkseUNBQXNCLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sYUFBYSxHQUFHLDJCQUFRLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlELE1BQU0sT0FBTyxHQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLCtCQUFZLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFNUUsT0FBTztRQUNILElBQUksRUFBb0IsSUFBSTtRQUM1QixXQUFXLEVBQWEsYUFBYSxDQUFDLFdBQVcsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7UUFDL0UsUUFBUSxFQUFnQixhQUFhLENBQUMsUUFBUTtRQUM5QyxjQUFjLEVBQVUsNEJBQVMsQ0FBQyxPQUFPLEVBQUUsc0JBQXNCLENBQUM7UUFDbEUsc0JBQXNCLEVBQUUsOEJBQVcsQ0FBQyxPQUFPLEVBQUUsOEJBQThCLENBQUM7S0FDL0UsQ0FBQztBQUNOLENBQUM7QUFHRCxTQUFTLFlBQVksQ0FBRSxZQUFZO0lBQy9CLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsOEJBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1RCxNQUFNLEtBQUssR0FBdUIsVUFBVSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVwRSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRUQsbUJBQXlCLFlBQVk7SUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7UUFDMUIsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUUzRCxPQUFPLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBTEQsNEJBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGZpbmRNYXRjaCxcbiAgICBpc01hdGNoVHJ1ZSxcbiAgICBzcGxpdEVzY2FwZWQsXG4gICAgcGFyc2VDb25maWcsXG4gICAgZ2V0TW9kZXMsXG4gICAgZ2V0UGF0aEZyb21QYXJzZWRNb2Rlcyxcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvYXJndW1lbnQtcGFyc2luZyc7XG5cblxuY29uc3QgQVZBSUxBQkxFX01PREVTID0gWyd1c2VyUHJvZmlsZScsICdoZWFkbGVzcyddO1xuXG5jb25zdCBjb25maWdDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBoYXNDdXN0b21Qcm9maWxlICh1c2VyQXJncykge1xuICAgIHJldHVybiAhISh1c2VyQXJncy5tYXRjaCgvLVBcXHMvKSB8fCB1c2VyQXJncy5tYXRjaCgvLXByb2ZpbGVcXHMvKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kZXMgKG1vZGVzU3RyLCB1c2VyQXJncykge1xuICAgIGNvbnN0IHBhcnNlZCAgICAgICAgPSBzcGxpdEVzY2FwZWQobW9kZXNTdHIsICc6Jyk7XG4gICAgY29uc3QgcGF0aCAgICAgICAgICA9IGdldFBhdGhGcm9tUGFyc2VkTW9kZXMocGFyc2VkLCBBVkFJTEFCTEVfTU9ERVMpO1xuICAgIGNvbnN0IGRldGVjdGVkTW9kZXMgPSBnZXRNb2RlcyhwYXJzZWQsIEFWQUlMQUJMRV9NT0RFUyk7XG4gICAgY29uc3Qgb3B0aW9uc1N0cmluZyA9IHBhcnNlZC5maWx0ZXIoaXRlbSA9PiAhIWl0ZW0pLmpvaW4oJzonKTtcbiAgICBjb25zdCBvcHRpb25zICAgICAgID0gcGFyc2VkLmxlbmd0aCA/IHNwbGl0RXNjYXBlZChvcHRpb25zU3RyaW5nLCAnOycpIDogW107XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRoOiAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICB1c2VyUHJvZmlsZTogICAgICAgICAgICBkZXRlY3RlZE1vZGVzLnVzZXJQcm9maWxlIHx8IGhhc0N1c3RvbVByb2ZpbGUodXNlckFyZ3MpLFxuICAgICAgICBoZWFkbGVzczogICAgICAgICAgICAgICBkZXRlY3RlZE1vZGVzLmhlYWRsZXNzLFxuICAgICAgICBtYXJpb25ldHRlUG9ydDogICAgICAgICBmaW5kTWF0Y2gob3B0aW9ucywgL15tYXJpb25ldHRlUG9ydD0oLiopLyksXG4gICAgICAgIGRpc2FibGVNdWx0aXByb2Nlc3Npbmc6IGlzTWF0Y2hUcnVlKG9wdGlvbnMsIC9eZGlzYWJsZU11bHRpcHJvY2Vzc2luZz0oLiopLyksXG4gICAgfTtcbn1cblxuXG5mdW5jdGlvbiBnZXROZXdDb25maWcgKGNvbmZpZ1N0cmluZykge1xuICAgIGNvbnN0IHsgdXNlckFyZ3MsIG1vZGVzU3RyaW5nIH0gPSBwYXJzZUNvbmZpZyhjb25maWdTdHJpbmcpO1xuICAgIGNvbnN0IG1vZGVzICAgICAgICAgICAgICAgICAgICAgPSBwYXJzZU1vZGVzKG1vZGVzU3RyaW5nLCB1c2VyQXJncyk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHVzZXJBcmdzIH0sIG1vZGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmZpZ1N0cmluZykge1xuICAgIGlmICghY29uZmlnQ2FjaGVbY29uZmlnU3RyaW5nXSlcbiAgICAgICAgY29uZmlnQ2FjaGVbY29uZmlnU3RyaW5nXSA9IGdldE5ld0NvbmZpZyhjb25maWdTdHJpbmcpO1xuXG4gICAgcmV0dXJuIGNvbmZpZ0NhY2hlW2NvbmZpZ1N0cmluZ107XG59XG4iXX0=