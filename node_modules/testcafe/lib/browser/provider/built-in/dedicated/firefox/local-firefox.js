"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.start = void 0;
const os_family_1 = __importDefault(require("os-family"));
const testcafe_browser_tools_1 = __importDefault(require("testcafe-browser-tools"));
const process_1 = require("../../../../../utils/process");
const browser_starter_1 = __importDefault(require("../../../utils/browser-starter"));
const browserStarter = new browser_starter_1.default();
function correctOpenParametersForMac(parameters) {
    parameters.macOpenCmdTemplate = parameters.macOpenCmdTemplate
        .replace('open', 'open -n')
        .replace(' {{{pageUrl}}}', '');
    parameters.macOpenCmdTemplate += ' {{{pageUrl}}}';
}
function buildFirefoxArgs(config, platformArgs, { marionettePort, tempProfileDir }) {
    return []
        .concat(marionettePort ? ['-marionette'] : [], !config.userProfile ? ['-no-remote', '-new-instance', `-profile "${tempProfileDir.path}"`] : [], config.headless ? ['-headless'] : [], config.userArgs ? [config.userArgs] : [], platformArgs ? [platformArgs] : [])
        .join(' ');
}
async function start(pageUrl, runtimeInfo) {
    const { browserName, config } = runtimeInfo;
    const firefoxInfo = await testcafe_browser_tools_1.default.getBrowserInfo(config.path || browserName);
    const firefoxOpenParameters = Object.assign({}, firefoxInfo);
    if (os_family_1.default.mac && !config.userProfile)
        correctOpenParametersForMac(firefoxOpenParameters);
    firefoxOpenParameters.cmd = buildFirefoxArgs(config, firefoxOpenParameters.cmd, runtimeInfo, runtimeInfo.newInstance);
    await browserStarter.startBrowser(firefoxOpenParameters, pageUrl);
}
exports.start = start;
async function stop({ browserId }) {
    await process_1.killBrowserProcess(browserId);
}
exports.stop = stop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtZmlyZWZveC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2RlZGljYXRlZC9maXJlZm94L2xvY2FsLWZpcmVmb3guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQTJCO0FBQzNCLG9GQUFrRDtBQUNsRCwwREFBa0U7QUFDbEUscUZBQTREO0FBRzVELE1BQU0sY0FBYyxHQUFHLElBQUkseUJBQWMsRUFBRSxDQUFDO0FBRTVDLFNBQVMsMkJBQTJCLENBQUUsVUFBVTtJQUM1QyxVQUFVLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLGtCQUFrQjtTQUN4RCxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztTQUMxQixPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFbkMsVUFBVSxDQUFDLGtCQUFrQixJQUFJLGdCQUFnQixDQUFDO0FBQ3RELENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFO0lBQy9FLE9BQU8sRUFBRTtTQUNKLE1BQU0sQ0FDSCxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDckMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxlQUFlLEVBQUUsYUFBYSxjQUFjLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUMvRixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3BDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3hDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNyQztTQUNBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDO0FBRU0sS0FBSyxVQUFVLEtBQUssQ0FBRSxPQUFPLEVBQUUsV0FBVztJQUM3QyxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQztJQUU1QyxNQUFNLFdBQVcsR0FBYSxNQUFNLGdDQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLENBQUM7SUFDNUYsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUU3RCxJQUFJLG1CQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7UUFDN0IsMkJBQTJCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUV2RCxxQkFBcUIsQ0FBQyxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXRILE1BQU0sY0FBYyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBWkQsc0JBWUM7QUFFTSxLQUFLLFVBQVUsSUFBSSxDQUFFLEVBQUUsU0FBUyxFQUFFO0lBQ3JDLE1BQU0sNEJBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUZELG9CQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgYnJvd3NlclRvb2xzIGZyb20gJ3Rlc3RjYWZlLWJyb3dzZXItdG9vbHMnO1xuaW1wb3J0IHsga2lsbEJyb3dzZXJQcm9jZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvcHJvY2Vzcyc7XG5pbXBvcnQgQnJvd3NlclN0YXJ0ZXIgZnJvbSAnLi4vLi4vLi4vdXRpbHMvYnJvd3Nlci1zdGFydGVyJztcblxuXG5jb25zdCBicm93c2VyU3RhcnRlciA9IG5ldyBCcm93c2VyU3RhcnRlcigpO1xuXG5mdW5jdGlvbiBjb3JyZWN0T3BlblBhcmFtZXRlcnNGb3JNYWMgKHBhcmFtZXRlcnMpIHtcbiAgICBwYXJhbWV0ZXJzLm1hY09wZW5DbWRUZW1wbGF0ZSA9IHBhcmFtZXRlcnMubWFjT3BlbkNtZFRlbXBsYXRlXG4gICAgICAgIC5yZXBsYWNlKCdvcGVuJywgJ29wZW4gLW4nKVxuICAgICAgICAucmVwbGFjZSgnIHt7e3BhZ2VVcmx9fX0nLCAnJyk7XG5cbiAgICBwYXJhbWV0ZXJzLm1hY09wZW5DbWRUZW1wbGF0ZSArPSAnIHt7e3BhZ2VVcmx9fX0nO1xufVxuXG5mdW5jdGlvbiBidWlsZEZpcmVmb3hBcmdzIChjb25maWcsIHBsYXRmb3JtQXJncywgeyBtYXJpb25ldHRlUG9ydCwgdGVtcFByb2ZpbGVEaXIgfSkge1xuICAgIHJldHVybiBbXVxuICAgICAgICAuY29uY2F0KFxuICAgICAgICAgICAgbWFyaW9uZXR0ZVBvcnQgPyBbJy1tYXJpb25ldHRlJ10gOiBbXSxcbiAgICAgICAgICAgICFjb25maWcudXNlclByb2ZpbGUgPyBbJy1uby1yZW1vdGUnLCAnLW5ldy1pbnN0YW5jZScsIGAtcHJvZmlsZSBcIiR7dGVtcFByb2ZpbGVEaXIucGF0aH1cImBdIDogW10sXG4gICAgICAgICAgICBjb25maWcuaGVhZGxlc3MgPyBbJy1oZWFkbGVzcyddIDogW10sXG4gICAgICAgICAgICBjb25maWcudXNlckFyZ3MgPyBbY29uZmlnLnVzZXJBcmdzXSA6IFtdLFxuICAgICAgICAgICAgcGxhdGZvcm1BcmdzID8gW3BsYXRmb3JtQXJnc10gOiBbXVxuICAgICAgICApXG4gICAgICAgIC5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydCAocGFnZVVybCwgcnVudGltZUluZm8pIHtcbiAgICBjb25zdCB7IGJyb3dzZXJOYW1lLCBjb25maWcgfSA9IHJ1bnRpbWVJbmZvO1xuXG4gICAgY29uc3QgZmlyZWZveEluZm8gICAgICAgICAgID0gYXdhaXQgYnJvd3NlclRvb2xzLmdldEJyb3dzZXJJbmZvKGNvbmZpZy5wYXRoIHx8IGJyb3dzZXJOYW1lKTtcbiAgICBjb25zdCBmaXJlZm94T3BlblBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBmaXJlZm94SW5mbyk7XG5cbiAgICBpZiAoT1MubWFjICYmICFjb25maWcudXNlclByb2ZpbGUpXG4gICAgICAgIGNvcnJlY3RPcGVuUGFyYW1ldGVyc0Zvck1hYyhmaXJlZm94T3BlblBhcmFtZXRlcnMpO1xuXG4gICAgZmlyZWZveE9wZW5QYXJhbWV0ZXJzLmNtZCA9IGJ1aWxkRmlyZWZveEFyZ3MoY29uZmlnLCBmaXJlZm94T3BlblBhcmFtZXRlcnMuY21kLCBydW50aW1lSW5mbywgcnVudGltZUluZm8ubmV3SW5zdGFuY2UpO1xuXG4gICAgYXdhaXQgYnJvd3NlclN0YXJ0ZXIuc3RhcnRCcm93c2VyKGZpcmVmb3hPcGVuUGFyYW1ldGVycywgcGFnZVVybCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdG9wICh7IGJyb3dzZXJJZCB9KSB7XG4gICAgYXdhaXQga2lsbEJyb3dzZXJQcm9jZXNzKGJyb3dzZXJJZCk7XG59XG4iXX0=