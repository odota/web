"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const child_process_1 = require("child_process");
const endpoint_utils_1 = require("endpoint-utils");
const io_1 = require("./io");
const test_structure_1 = require("../serialization/test-structure");
const prepare_options_1 = __importDefault(require("../serialization/prepare-options"));
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const proxy_1 = require("../utils/ipc/proxy");
const transport_1 = require("../utils/ipc/transport");
const async_event_emitter_1 = __importDefault(require("../../utils/async-event-emitter"));
const error_list_1 = __importDefault(require("../../errors/error-list"));
const debug_action_1 = __importDefault(require("../../utils/debug-action"));
const observation_1 = require("../../test-run/commands/observation");
const method_should_not_be_called_error_1 = __importDefault(require("../utils/method-should-not-be-called-error"));
const test_run_1 = require("../../errors/test-run");
const handle_errors_1 = require("../../utils/handle-errors");
const node_arguments_filter_1 = require("../../cli/node-arguments-filter");
const SERVICE_PATH = require.resolve('./service-loader');
const INTERNAL_FILES_URL = url_1.pathToFileURL(path_1.default.join(__dirname, '../../'));
const INSPECT_RE = new RegExp(`^(${node_arguments_filter_1.V8_DEBUG_FLAGS.join('|')})`);
const INSPECT_PORT_RE = new RegExp(`^(${node_arguments_filter_1.V8_DEBUG_FLAGS.join('|')})=(.+:)?(\\d+)$`);
const INITIAL_DEBUGGER_BREAK_ON_START = 'Break on start';
const errorTypeConstructors = new Map([
    [test_run_1.UnhandledPromiseRejectionError.name, test_run_1.UnhandledPromiseRejectionError],
    [test_run_1.UncaughtExceptionError.name, test_run_1.UncaughtExceptionError],
]);
class CompilerHost extends async_event_emitter_1.default {
    constructor({ developmentMode, v8Flags }) {
        super();
        this.runtime = Promise.resolve(void 0);
        this.developmentMode = developmentMode;
        this.v8Flags = v8Flags;
        this.initialized = false;
    }
    _setupRoutes(proxy) {
        proxy.register([
            this.executeCommand,
            this.ready,
            this.onRequestHookEvent,
            this.setMock,
            this.setConfigureResponseEventOptions,
            this.setHeaderOnConfigureResponseEvent,
            this.removeHeaderOnConfigureResponseEvent,
            this.executeRequestFilterRulePredicate,
            this.executeMockPredicate,
            this.getWarningMessages,
            this.addRequestEventListeners,
            this.removeRequestEventListeners,
            this.initializeTestRunData,
            this.getAssertionActualValue,
            this.executeRoleInitFn,
            this.getCtx,
            this.getFixtureCtx,
            this.setCtx,
            this.setFixtureCtx,
            this.updateRoleProperty,
            this.executeJsExpression,
            this.executeAsyncJsExpression,
            this.executeAssertionFn,
            this.addUnexpectedError,
            this.checkWindow,
            this.removeTestRunFromState,
            this.removeFixtureCtxsFromState,
            this.removeUnitsFromState,
        ], this);
    }
    _setupDebuggerHandlers() {
        if (!this.cdp)
            return;
        test_run_tracker_1.default.on(debug_action_1.default.resume, async () => {
            if (!this.cdp)
                return;
            const disableDebugMethodName = test_controller_1.default.disableDebugForNonDebugCommands.name;
            // NOTE: disable `debugger` for non-debug commands if the `Resume` button is clicked
            // the `includeCommandLineAPI` option allows to use the `require` functoion in the expression
            // TODO: debugging: refactor to use absolute paths
            await this.cdp.Runtime.evaluate({
                expression: `require.main.require('../../api/test-controller').${disableDebugMethodName}()`,
                includeCommandLineAPI: true,
            });
            await this.cdp.Debugger.resume();
        });
        test_run_tracker_1.default.on(debug_action_1.default.step, async () => {
            if (!this.cdp)
                return;
            const enableDebugMethodName = test_controller_1.default.enableDebugForNonDebugCommands.name;
            // NOTE: enable `debugger` for non-debug commands in the `Next Action` button is clicked
            // the `includeCommandLineAPI` option allows to use the `require` functoion in the expression
            // TODO: debugging: refactor to use absolute paths
            await this.cdp.Runtime.evaluate({
                expression: `require.main.require('../../api/test-controller').${enableDebugMethodName}()`,
                includeCommandLineAPI: true,
            });
            await this.cdp.Debugger.resume();
        });
        // NOTE: need to step out from the source code until breakpoint is set in the code of test
        // force DebugCommand if breakpoint stopped in the test code
        // TODO: debugging: refactor to this.cdp.Debugger.on('paused') after updating to chrome-remote-interface@0.30.0
        this.cdp.on('Debugger.paused', (args) => {
            const { callFrames } = args;
            if (this.cdp) {
                if (args.reason === INITIAL_DEBUGGER_BREAK_ON_START)
                    return this.cdp.Debugger.resume();
                if (callFrames[0].url.includes(INTERNAL_FILES_URL))
                    return this.cdp.Debugger.stepOut();
                Object.values(test_run_tracker_1.default.activeTestRuns).forEach(testRun => {
                    if (!testRun.debugging)
                        testRun.executeCommand(new observation_1.DebugCommand());
                });
            }
            return Promise.resolve();
        });
        // NOTE: need to hide Status Bar if debugger is resumed
        // TODO: debugging: refactor to this.cdp.Debugger.on('resumed') after updating to chrome-remote-interface@0.30.0
        this.cdp.on('Debugger.resumed', () => {
            Object.values(test_run_tracker_1.default.activeTestRuns).forEach(testRun => {
                if (testRun.debugging)
                    testRun.executeCommand(new observation_1.DisableDebugCommand());
            });
        });
    }
    parseDebugPort() {
        if (this.v8Flags) {
            for (let i = 0; i < this.v8Flags.length; i++) {
                const match = this.v8Flags[i].match(INSPECT_PORT_RE);
                if (match)
                    return match[3];
            }
        }
        return null;
    }
    _getServiceProcessArgs(port) {
        let args = [];
        if (this.v8Flags)
            args = this.v8Flags.filter(flag => !INSPECT_RE.test(flag));
        // TODO: debugging: refactor to a separate debug info parsing unit
        const inspectBrkFlag = `--inspect-brk=127.0.0.1:${port}`;
        args.push(inspectBrkFlag, SERVICE_PATH);
        return args;
    }
    async _init(runtime) {
        const resolvedRuntime = await runtime;
        if (resolvedRuntime)
            return resolvedRuntime;
        try {
            const port = this.parseDebugPort() || await endpoint_utils_1.getFreePort();
            const args = this._getServiceProcessArgs(port.toString());
            const service = child_process_1.spawn(process.argv0, args, { stdio: [0, 1, 2, 'pipe', 'pipe', 'pipe'] });
            // NOTE: need to wait, otherwise the error will be at `await cdp(...)`
            // TODO: debugging: refactor to use delay and multiple tries
            await new Promise(r => setTimeout(r, 2000));
            // @ts-ignore
            this.cdp = await chrome_remote_interface_1.default({ port });
            if (!this.cdp)
                return void 0;
            if (!this.developmentMode)
                this._setupDebuggerHandlers();
            await this.cdp.Debugger.enable({});
            await this.cdp.Runtime.enable();
            await this.cdp.Runtime.runIfWaitingForDebugger();
            // HACK: Node.js definition are not correct when additional I/O channels are sp
            const stdio = service.stdio;
            const proxy = new proxy_1.IPCProxy(new transport_1.HostTransport(stdio[io_1.HOST_INPUT_FD], stdio[io_1.HOST_OUTPUT_FD], stdio[io_1.HOST_SYNC_FD]));
            this._setupRoutes(proxy);
            await this.once('ready');
            return { proxy, service };
        }
        catch (e) {
            return void 0;
        }
    }
    async _getRuntime() {
        const runtime = await this.runtime;
        if (!runtime)
            throw new Error('Runtime is not available.');
        return runtime;
    }
    _getTargetTestRun(id) {
        return test_run_tracker_1.default.activeTestRuns[id];
    }
    async init() {
        this.runtime = this._init(this.runtime);
        await this.runtime;
        this.initialized = true;
    }
    async stop() {
        if (!this.initialized)
            return;
        const { service, proxy } = await this._getRuntime();
        service.kill();
        proxy.stop();
    }
    _wrapTestFunction(id, functionName) {
        return async (testRun) => {
            try {
                return await this.runTestFn({ id, functionName, testRunId: testRun.id });
            }
            catch (err) {
                const errList = new error_list_1.default();
                errList.addError(err);
                throw errList;
            }
        };
    }
    _wrapRequestFilterRulePredicate({ testId, hookId, ruleId }) {
        return async (requestInfo) => {
            return await this.executeRequestFilterRulePredicate({ testId, hookId, ruleId, requestInfo });
        };
    }
    _wrapMockPredicate({ mock, testId, hookId, ruleId }) {
        mock.body = async (requestInfo, res) => {
            return await this.executeMockPredicate({ testId, hookId, ruleId, requestInfo, res });
        };
    }
    _getErrorTypeConstructor(type) {
        return errorTypeConstructors.get(type);
    }
    async ready() {
        this.emit('ready');
    }
    executeCommandSync() {
        throw new method_should_not_be_called_error_1.default();
    }
    async executeCommand({ command, id, callsite }) {
        return this
            ._getTargetTestRun(id)
            .executeCommand(command, callsite);
    }
    async getTests({ sourceList, compilerOptions, runnableConfigurationId }) {
        const { proxy } = await this._getRuntime();
        const units = await proxy.call(this.getTests, { sourceList, compilerOptions, runnableConfigurationId });
        return test_structure_1.restore(units, (...args) => this._wrapTestFunction(...args), (ruleLocator) => this._wrapRequestFilterRulePredicate(ruleLocator));
    }
    async runTestFn({ id, functionName, testRunId }) {
        const { proxy } = await this._getRuntime();
        return await proxy.call(this.runTestFn, { id, functionName, testRunId });
    }
    async cleanUp() {
        const { proxy } = await this._getRuntime();
        await proxy.call(this.cleanUp);
    }
    async setUserVariables(userVariables) {
        const { proxy } = await this._getRuntime();
        await proxy.call(this.setUserVariables, userVariables);
    }
    async setOptions({ value }) {
        const { proxy } = await this._getRuntime();
        const preparedOptions = prepare_options_1.default(value);
        await proxy.call(this.setOptions, { value: preparedOptions });
    }
    async onRequestHookEvent({ name, testId, hookId, eventData }) {
        const { proxy } = await this._getRuntime();
        await proxy.call(this.onRequestHookEvent, {
            name,
            testId,
            hookId,
            eventData,
        });
    }
    async setMock({ testId, hookId, ruleId, responseEventId, mock }) {
        if (mock.isPredicate)
            this._wrapMockPredicate({ mock, testId, hookId, ruleId });
        await this.emit('setMock', [responseEventId, mock]);
    }
    async setConfigureResponseEventOptions({ eventId, opts }) {
        await this.emit('setConfigureResponseEventOptions', [eventId, opts]);
    }
    async setHeaderOnConfigureResponseEvent({ eventId, headerName, headerValue }) {
        await this.emit('setHeaderOnConfigureResponseEvent', [eventId, headerName, headerValue]);
    }
    async removeHeaderOnConfigureResponseEvent({ eventId, headerName }) {
        await this.emit('removeHeaderOnConfigureResponseEvent', [eventId, headerName]);
    }
    async executeRequestFilterRulePredicate({ testId, hookId, ruleId, requestInfo }) {
        const { proxy } = await this._getRuntime();
        return await proxy.call(this.executeRequestFilterRulePredicate, { testId, hookId, ruleId, requestInfo });
    }
    async executeMockPredicate({ testId, hookId, ruleId, requestInfo, res }) {
        const { proxy } = await this._getRuntime();
        return await proxy.call(this.executeMockPredicate, { testId, hookId, ruleId, requestInfo, res });
    }
    async getWarningMessages({ testRunId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.getWarningMessages, { testRunId });
    }
    async addRequestEventListeners({ hookId, hookClassName, rules }) {
        await this.emit('addRequestEventListeners', { hookId, hookClassName, rules });
    }
    async removeRequestEventListeners({ rules }) {
        await this.emit('removeRequestEventListeners', { rules });
    }
    async initializeTestRunData({ testRunId, testId, browser, activeWindowId, messageBus }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.initializeTestRunData, { testRunId, testId, browser, activeWindowId, messageBus });
    }
    async getAssertionActualValue({ testRunId, commandId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.getAssertionActualValue, { testRunId, commandId: commandId });
    }
    async executeRoleInitFn({ testRunId, roleId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.executeRoleInitFn, { testRunId, roleId });
    }
    async getCtx({ testRunId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.getCtx, { testRunId });
    }
    async getFixtureCtx({ testRunId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.getFixtureCtx, { testRunId });
    }
    async setCtx({ testRunId, value }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.setCtx, { testRunId, value });
    }
    async setFixtureCtx({ testRunId, value }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.setFixtureCtx, { testRunId, value });
    }
    onRoleAppeared() {
        throw new method_should_not_be_called_error_1.default();
    }
    async updateRoleProperty({ roleId, name, value }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.updateRoleProperty, { roleId, name, value });
    }
    async executeJsExpression({ expression, testRunId, options }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.executeJsExpression, { expression, testRunId, options });
    }
    async executeAsyncJsExpression({ expression, testRunId, callsite }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.executeAsyncJsExpression, { expression, testRunId, callsite });
    }
    async executeAssertionFn({ testRunId, commandId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.executeAssertionFn, { testRunId, commandId });
    }
    async addUnexpectedError({ type, message }) {
        const ErrorTypeConstructor = this._getErrorTypeConstructor(type);
        handle_errors_1.handleUnexpectedError(ErrorTypeConstructor, message);
    }
    async checkWindow({ testRunId, commandId, url, title }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.checkWindow, { testRunId, commandId, url, title });
    }
    async removeTestRunFromState({ testRunId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.removeTestRunFromState, { testRunId });
    }
    async removeFixtureCtxsFromState({ fixtureIds }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.removeFixtureCtxsFromState, { fixtureIds });
    }
    async removeUnitsFromState({ runnableConfigurationId }) {
        const { proxy } = await this._getRuntime();
        return proxy.call(this.removeUnitsFromState, { runnableConfigurationId });
    }
}
exports.default = CompilerHost;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,