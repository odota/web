"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_transform_1 = __importDefault(require("../base-transform"));
const base_1 = require("../../../../../test-run/commands/base");
const utils_1 = require("../../../../../test-run/commands/utils");
const actions_1 = require("../../../../../test-run/commands/actions");
const command_constructors_1 = __importDefault(require("./command-constructors"));
const assertion_command_constructors_1 = __importDefault(require("./assertion-command-constructors"));
const OBSERVABLE_COMMAND_CONSTRUCTORS_WITH_SKIPPED_ARGUMENT_VALIDATION = [
    actions_1.ExecuteExpressionCommand,
];
class CommandBaseTransform extends base_transform_1.default {
    constructor() {
        super('CommandBase');
    }
    shouldTransform(_, val) {
        return val instanceof base_1.CommandBase;
    }
    _skipArgumentValidation(CommandCtor, value) {
        return utils_1.isObservationCommand(value) &&
            !utils_1.isAssertionCommand(value) &&
            !OBSERVABLE_COMMAND_CONSTRUCTORS_WITH_SKIPPED_ARGUMENT_VALIDATION.includes(CommandCtor);
    }
    _createCommandInstance(CommandCtor, value) {
        // NOTE: We should not validate the command creation here
        // since it was already done before action execution
        const testRunStub = {};
        const validateProperties = false;
        if (this._skipArgumentValidation(CommandCtor, value))
            return new CommandCtor(value, testRunStub);
        else if (CommandCtor === actions_1.SetNativeDialogHandlerCommand)
            return actions_1.SetNativeDialogHandlerCommand.from(value);
        return new CommandCtor(value, testRunStub, validateProperties);
    }
    fromSerializable(value) {
        const CommandCtor = value.assertionType
            ? assertion_command_constructors_1.default.get(value.assertionType)
            : command_constructors_1.default.get(value.type);
        if (!CommandCtor)
            throw new Error(`An appropriate command constructor for "${value.type}" type was not found.`);
        return this._createCommandInstance(CommandCtor, value);
    }
}
exports.default = CommandBaseTransform;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2VydmljZXMvc2VyaWFsaXphdGlvbi9yZXBsaWNhdG9yL3RyYW5zZm9ybXMvY29tbWFuZC1iYXNlLXRyYXNmb3JtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUVBQThDO0FBQzlDLGdFQUFvRTtBQUVwRSxrRUFBa0c7QUFFbEcsc0VBQW1IO0FBQ25ILGtGQUEwRDtBQUMxRCxzR0FBOEU7QUFHOUUsTUFBTSxnRUFBZ0UsR0FBRztJQUNyRSxrQ0FBd0I7Q0FDM0IsQ0FBQztBQUVGLE1BQXFCLG9CQUFxQixTQUFRLHdCQUFhO0lBQzNEO1FBQ0ksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxlQUFlLENBQUUsQ0FBVSxFQUFFLEdBQVk7UUFDNUMsT0FBTyxHQUFHLFlBQVksa0JBQVcsQ0FBQztJQUN0QyxDQUFDO0lBRU8sdUJBQXVCLENBQUUsV0FBK0IsRUFBRSxLQUF3QjtRQUN0RixPQUFPLDRCQUFvQixDQUFDLEtBQUssQ0FBQztZQUM5QixDQUFDLDBCQUFrQixDQUFDLEtBQUssQ0FBQztZQUMxQixDQUFDLGdFQUFnRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRU8sc0JBQXNCLENBQUUsV0FBK0IsRUFBRSxLQUF3QjtRQUNyRix5REFBeUQ7UUFDekQsb0RBQW9EO1FBQ3BELE1BQU0sV0FBVyxHQUFVLEVBQUUsQ0FBQztRQUM5QixNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUVqQyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO1lBQ2hELE9BQU8sSUFBSyxXQUFzQyxDQUFDLEtBQUssRUFBRSxXQUFzQixDQUFDLENBQUM7YUFFakYsSUFBSSxXQUFXLEtBQUssdUNBQTZCO1lBQ2xELE9BQU8sdUNBQTZCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJELE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQXNCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU0sZ0JBQWdCLENBQUUsS0FBd0I7UUFDN0MsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLGFBQWE7WUFDbkMsQ0FBQyxDQUFDLHdDQUE4QixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ3pELENBQUMsQ0FBQyw4QkFBb0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxXQUFXO1lBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsS0FBSyxDQUFDLElBQUksdUJBQXVCLENBQUMsQ0FBQztRQUVsRyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNKO0FBeENELHVDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlVHJhbnNmb3JtIGZyb20gJy4uL2Jhc2UtdHJhbnNmb3JtJztcbmltcG9ydCB7IENvbW1hbmRCYXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvYmFzZSc7XG5pbXBvcnQgeyBTZXJpYWxpemVkQ29tbWFuZCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgaXNBc3NlcnRpb25Db21tYW5kLCBpc09ic2VydmF0aW9uQ29tbWFuZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL3V0aWxzJztcbmltcG9ydCBUZXN0UnVuIGZyb20gJy4uLy4uLy4uLy4uLy4uL3Rlc3QtcnVuJztcbmltcG9ydCB7IEV4ZWN1dGVFeHByZXNzaW9uQ29tbWFuZCwgU2V0TmF0aXZlRGlhbG9nSGFuZGxlckNvbW1hbmQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9hY3Rpb25zJztcbmltcG9ydCBDT01NQU5EX0NPTlNUUlVDVE9SUyBmcm9tICcuL2NvbW1hbmQtY29uc3RydWN0b3JzJztcbmltcG9ydCBBU1NFUlRJT05fQ09NTUFORF9DT05TVFJVQ1RPUlMgZnJvbSAnLi9hc3NlcnRpb24tY29tbWFuZC1jb25zdHJ1Y3RvcnMnO1xuaW1wb3J0IHsgQ29tbWFuZENvbnN0cnVjdG9yLCBPYnNlcnZhdGlvbkNvbnN0cnVjdG9yIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IE9CU0VSVkFCTEVfQ09NTUFORF9DT05TVFJVQ1RPUlNfV0lUSF9TS0lQUEVEX0FSR1VNRU5UX1ZBTElEQVRJT04gPSBbXG4gICAgRXhlY3V0ZUV4cHJlc3Npb25Db21tYW5kLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbWFuZEJhc2VUcmFuc2Zvcm0gZXh0ZW5kcyBCYXNlVHJhbnNmb3JtIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcignQ29tbWFuZEJhc2UnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvdWxkVHJhbnNmb3JtIChfOiB1bmtub3duLCB2YWw6IHVua25vd24pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIENvbW1hbmRCYXNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3NraXBBcmd1bWVudFZhbGlkYXRpb24gKENvbW1hbmRDdG9yOiBDb21tYW5kQ29uc3RydWN0b3IsIHZhbHVlOiBTZXJpYWxpemVkQ29tbWFuZCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNPYnNlcnZhdGlvbkNvbW1hbmQodmFsdWUpICYmXG4gICAgICAgICAgICAhaXNBc3NlcnRpb25Db21tYW5kKHZhbHVlKSAmJlxuICAgICAgICAgICAgIU9CU0VSVkFCTEVfQ09NTUFORF9DT05TVFJVQ1RPUlNfV0lUSF9TS0lQUEVEX0FSR1VNRU5UX1ZBTElEQVRJT04uaW5jbHVkZXMoQ29tbWFuZEN0b3IpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NyZWF0ZUNvbW1hbmRJbnN0YW5jZSAoQ29tbWFuZEN0b3I6IENvbW1hbmRDb25zdHJ1Y3RvciwgdmFsdWU6IFNlcmlhbGl6ZWRDb21tYW5kKTogYW55IHtcbiAgICAgICAgLy8gTk9URTogV2Ugc2hvdWxkIG5vdCB2YWxpZGF0ZSB0aGUgY29tbWFuZCBjcmVhdGlvbiBoZXJlXG4gICAgICAgIC8vIHNpbmNlIGl0IHdhcyBhbHJlYWR5IGRvbmUgYmVmb3JlIGFjdGlvbiBleGVjdXRpb25cbiAgICAgICAgY29uc3QgdGVzdFJ1blN0dWIgICAgICAgID0ge307XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlUHJvcGVydGllcyA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLl9za2lwQXJndW1lbnRWYWxpZGF0aW9uKENvbW1hbmRDdG9yLCB2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gbmV3IChDb21tYW5kQ3RvciBhcyBPYnNlcnZhdGlvbkNvbnN0cnVjdG9yKSh2YWx1ZSwgdGVzdFJ1blN0dWIgYXMgVGVzdFJ1bik7XG5cbiAgICAgICAgZWxzZSBpZiAoQ29tbWFuZEN0b3IgPT09IFNldE5hdGl2ZURpYWxvZ0hhbmRsZXJDb21tYW5kKVxuICAgICAgICAgICAgcmV0dXJuIFNldE5hdGl2ZURpYWxvZ0hhbmRsZXJDb21tYW5kLmZyb20odmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgQ29tbWFuZEN0b3IodmFsdWUsIHRlc3RSdW5TdHViIGFzIFRlc3RSdW4sIHZhbGlkYXRlUHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGZyb21TZXJpYWxpemFibGUgKHZhbHVlOiBTZXJpYWxpemVkQ29tbWFuZCk6IGFueSB7XG4gICAgICAgIGNvbnN0IENvbW1hbmRDdG9yID0gdmFsdWUuYXNzZXJ0aW9uVHlwZVxuICAgICAgICAgICAgPyBBU1NFUlRJT05fQ09NTUFORF9DT05TVFJVQ1RPUlMuZ2V0KHZhbHVlLmFzc2VydGlvblR5cGUpXG4gICAgICAgICAgICA6IENPTU1BTkRfQ09OU1RSVUNUT1JTLmdldCh2YWx1ZS50eXBlKTtcblxuICAgICAgICBpZiAoIUNvbW1hbmRDdG9yKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBbiBhcHByb3ByaWF0ZSBjb21tYW5kIGNvbnN0cnVjdG9yIGZvciBcIiR7dmFsdWUudHlwZX1cIiB0eXBlIHdhcyBub3QgZm91bmQuYCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUNvbW1hbmRJbnN0YW5jZShDb21tYW5kQ3RvciwgdmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==