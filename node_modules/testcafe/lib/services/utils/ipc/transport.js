"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceTransport = exports.HostTransport = void 0;
const io_1 = require("./io");
const async_event_emitter_1 = __importDefault(require("../../../utils/async-event-emitter"));
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const interfaces_1 = require("./interfaces");
class HostTransport extends async_event_emitter_1.default {
    constructor(inputStream, outputStream, syncStream) {
        super();
        this.asyncReader = new io_1.AsyncReader(inputStream);
        this.asyncWriter = new io_1.AsyncWriter(outputStream);
        this.syncReader = new io_1.AsyncReader(syncStream);
        this.syncWriter = new io_1.AsyncWriter(syncStream);
        this.readers = [this.asyncReader, this.syncReader];
    }
    read() {
        this.readers.forEach(reader => {
            reader.on('data', data => this.emit('data', data));
            reader.read();
        });
    }
    async write(message) {
        const writer = message.sync ? this.syncWriter : this.asyncWriter;
        await writer.write(message);
    }
    readSync() {
        throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost);
    }
    writeSync() {
        throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost);
    }
}
exports.HostTransport = HostTransport;
class ServiceTransport extends async_event_emitter_1.default {
    constructor(inputStream, outputStream, syncFd) {
        super();
        this.asyncReader = new io_1.AsyncReader(inputStream);
        this.asyncWriter = new io_1.AsyncWriter(outputStream);
        this.syncReader = new io_1.SyncReader(syncFd);
        this.syncWriter = new io_1.SyncWriter(syncFd);
    }
    read() {
        this.asyncReader.on('data', data => this.emit('data', data));
        this.asyncReader.read();
    }
    async write(message) {
        await this.asyncWriter.write(message);
    }
    readSync() {
        const message = this.syncReader.readSync();
        if (!interfaces_1.isIPCResponsePacket(message))
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.malformedIPCMessage);
        return message;
    }
    writeSync(message) {
        this.syncWriter.writeSync(message);
    }
}
exports.ServiceTransport = ServiceTransport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3V0aWxzL2lwYy90cmFuc3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNkJBS2M7QUFFZCw2RkFBOEQ7QUFDOUQscURBQXVEO0FBQ3ZELGlEQUF1RDtBQUN2RCw2Q0FLc0I7QUFHdEIsTUFBYSxhQUFjLFNBQVEsNkJBQVk7SUFRM0MsWUFBb0IsV0FBa0MsRUFBRSxZQUFtQyxFQUFFLFVBQXlEO1FBQ2xKLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGdCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGdCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFFLE9BQWtCO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFakUsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxRQUFRO1FBQ1gsTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTSxTQUFTO1FBQ1osTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Q0FDSjtBQXhDRCxzQ0F3Q0M7QUFHRCxNQUFhLGdCQUFpQixTQUFRLDZCQUFZO0lBTTlDLFlBQW9CLFdBQWtDLEVBQUUsWUFBbUMsRUFBRSxNQUFjO1FBQ3ZHLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFFLE9BQWtCO1FBQ2xDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLFFBQVE7UUFDWCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxnQ0FBbUIsQ0FBQyxPQUFPLENBQUM7WUFDN0IsTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRS9ELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTSxTQUFTLENBQUUsT0FBa0I7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNKO0FBckNELDRDQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQXN5bmNSZWFkZXIsXG4gICAgQXN5bmNXcml0ZXIsXG4gICAgU3luY1JlYWRlcixcbiAgICBTeW5jV3JpdGVyLFxufSBmcm9tICcuL2lvJztcblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi8uLi91dGlscy9hc3luYy1ldmVudC1lbWl0dGVyJztcbmltcG9ydCB7IEdlbmVyYWxFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzL3R5cGVzJztcbmltcG9ydCB7XG4gICAgSVBDUGFja2V0LFxuICAgIElQQ1Jlc3BvbnNlUGFja2V0LFxuICAgIElQQ1RyYW5zcG9ydCxcbiAgICBpc0lQQ1Jlc3BvbnNlUGFja2V0LFxufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5cbmV4cG9ydCBjbGFzcyBIb3N0VHJhbnNwb3J0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIGltcGxlbWVudHMgSVBDVHJhbnNwb3J0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFzeW5jUmVhZGVyOiBBc3luY1JlYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFzeW5jV3JpdGVyOiBBc3luY1dyaXRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bmNSZWFkZXI6IEFzeW5jUmVhZGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3luY1dyaXRlcjogQXN5bmNXcml0ZXI7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlYWRlcnM6IEFzeW5jUmVhZGVyW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGlucHV0U3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0sIG91dHB1dFN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtLCBzeW5jU3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0gJiBOb2RlSlMuV3JpdGFibGVTdHJlYW0pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmFzeW5jUmVhZGVyID0gbmV3IEFzeW5jUmVhZGVyKGlucHV0U3RyZWFtKTtcbiAgICAgICAgdGhpcy5hc3luY1dyaXRlciA9IG5ldyBBc3luY1dyaXRlcihvdXRwdXRTdHJlYW0pO1xuXG4gICAgICAgIHRoaXMuc3luY1JlYWRlciA9IG5ldyBBc3luY1JlYWRlcihzeW5jU3RyZWFtKTtcbiAgICAgICAgdGhpcy5zeW5jV3JpdGVyID0gbmV3IEFzeW5jV3JpdGVyKHN5bmNTdHJlYW0pO1xuXG4gICAgICAgIHRoaXMucmVhZGVycyA9IFt0aGlzLmFzeW5jUmVhZGVyLCB0aGlzLnN5bmNSZWFkZXJdO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWFkICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWFkZXJzLmZvckVhY2gocmVhZGVyID0+IHtcbiAgICAgICAgICAgIHJlYWRlci5vbignZGF0YScsIGRhdGEgPT4gdGhpcy5lbWl0KCdkYXRhJywgZGF0YSkpO1xuICAgICAgICAgICAgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHdyaXRlIChtZXNzYWdlOiBJUENQYWNrZXQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gbWVzc2FnZS5zeW5jID8gdGhpcy5zeW5jV3JpdGVyIDogdGhpcy5hc3luY1dyaXRlcjtcblxuICAgICAgICBhd2FpdCB3cml0ZXIud3JpdGUobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRTeW5jICgpOiBuZXZlciB7XG4gICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMubWV0aG9kSXNOb3RBdmFpbGFibGVGb3JBbklQQ0hvc3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyB3cml0ZVN5bmMgKCk6IG5ldmVyIHtcbiAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5tZXRob2RJc05vdEF2YWlsYWJsZUZvckFuSVBDSG9zdCk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVHJhbnNwb3J0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIGltcGxlbWVudHMgSVBDVHJhbnNwb3J0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFzeW5jUmVhZGVyOiBBc3luY1JlYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFzeW5jV3JpdGVyOiBBc3luY1dyaXRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bmNSZWFkZXI6IFN5bmNSZWFkZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzeW5jV3JpdGVyOiBTeW5jV3JpdGVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChpbnB1dFN0cmVhbTogTm9kZUpTLlJlYWRhYmxlU3RyZWFtLCBvdXRwdXRTdHJlYW06IE5vZGVKUy5Xcml0YWJsZVN0cmVhbSwgc3luY0ZkOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmFzeW5jUmVhZGVyID0gbmV3IEFzeW5jUmVhZGVyKGlucHV0U3RyZWFtKTtcbiAgICAgICAgdGhpcy5hc3luY1dyaXRlciA9IG5ldyBBc3luY1dyaXRlcihvdXRwdXRTdHJlYW0pO1xuXG4gICAgICAgIHRoaXMuc3luY1JlYWRlciA9IG5ldyBTeW5jUmVhZGVyKHN5bmNGZCk7XG4gICAgICAgIHRoaXMuc3luY1dyaXRlciA9IG5ldyBTeW5jV3JpdGVyKHN5bmNGZCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWQgKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFzeW5jUmVhZGVyLm9uKCdkYXRhJywgZGF0YSA9PiB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKSk7XG4gICAgICAgIHRoaXMuYXN5bmNSZWFkZXIucmVhZCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB3cml0ZSAobWVzc2FnZTogSVBDUGFja2V0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXN5bmNXcml0ZXIud3JpdGUobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRTeW5jICgpOiBJUENSZXNwb25zZVBhY2tldCB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnN5bmNSZWFkZXIucmVhZFN5bmMoKTtcblxuICAgICAgICBpZiAoIWlzSVBDUmVzcG9uc2VQYWNrZXQobWVzc2FnZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKFJVTlRJTUVfRVJST1JTLm1hbGZvcm1lZElQQ01lc3NhZ2UpO1xuXG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cblxuICAgIHB1YmxpYyB3cml0ZVN5bmMgKG1lc3NhZ2U6IElQQ1BhY2tldCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN5bmNXcml0ZXIud3JpdGVTeW5jKG1lc3NhZ2UpO1xuICAgIH1cbn1cbiJdfQ==