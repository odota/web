"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPCProxy = void 0;
const async_event_emitter_1 = __importDefault(require("../../../utils/async-event-emitter"));
const lodash_1 = require("lodash");
const interfaces_1 = require("./interfaces");
class IPCProxy extends async_event_emitter_1.default {
    constructor(transport) {
        super();
        this._requestCounter = 0;
        this._stopped = false;
        this._transport = transport;
        this._handlers = {};
        this._transport.read();
        this._transport.on(interfaces_1.IPCTransportEvents.data, rawPacket => this._onRead(rawPacket));
        this.on('request', data => this._onRequest(data));
    }
    async _onRead(packet) {
        if (packet.type === interfaces_1.IPCPacketType.response)
            this.emit(`response-${packet.id}`, packet);
        else
            this.emit('request', packet);
    }
    async _onRequest(requestPacket) {
        let resultData = null;
        try {
            resultData = { result: await this._handlers[requestPacket.data.name](...requestPacket.data.args) };
        }
        catch (error) {
            resultData = { error };
        }
        const responsePacket = {
            id: requestPacket.id,
            type: interfaces_1.IPCPacketType.response,
            sync: requestPacket.sync,
            data: resultData,
        };
        // NOTE: The result of long-running action can come after the compiler service was terminated.
        if (this._stopped)
            return;
        await this._transport.write(responsePacket);
    }
    _createPacket(opts) {
        return {
            id: this._requestCounter++,
            type: interfaces_1.IPCPacketType.request,
            sync: opts.sync,
            data: opts.data,
        };
    }
    _createPlainError(errorData) {
        const error = new Error(errorData.message);
        Object.assign(error, errorData);
        return error;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    register(func, context = null) {
        func = lodash_1.castArray(func);
        func.forEach(fn => {
            if (this._handlers[fn.name])
                return;
            this._handlers[fn.name] = fn.bind(context);
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async call(target, ...args) {
        const name = typeof target === 'string' ? target : target.name;
        const packet = this._createPacket({ data: { name, args }, sync: false });
        const responsePromise = this.once(`response-${packet.id}`);
        await this._transport.write(packet);
        const { data } = await responsePromise;
        if (interfaces_1.isIPCErrorResponse(data))
            throw data.error;
        return data.result;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callSync(target, ...args) {
        const name = typeof target === 'string' ? target : target.name;
        const requestPacket = this._createPacket({ data: { name, args }, sync: true });
        this._transport.writeSync(requestPacket);
        let responsePacket = this._transport.readSync();
        while (responsePacket.id !== requestPacket.id)
            responsePacket = this._transport.readSync();
        const response = responsePacket.data;
        if (interfaces_1.isIPCErrorResponse(response))
            throw response.error;
        return response.result;
    }
    stop() {
        this._stopped = true;
    }
}
exports.IPCProxy = IPCProxy;
//# sourceMappingURL=data:application/json;base64,