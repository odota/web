"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncWriter = exports.SyncReader = exports.AsyncWriter = exports.AsyncReader = void 0;
const fs_1 = __importDefault(require("fs"));
const debug_1 = __importDefault(require("debug"));
const packet_1 = __importDefault(require("./packet"));
const message_1 = require("./message");
const async_event_emitter_1 = __importDefault(require("../../../utils/async-event-emitter"));
const debugLogger = debug_1.default('testcafe:services:utils:ipc:io');
class AsyncReader extends async_event_emitter_1.default {
    constructor(stream) {
        super();
        this.parser = new message_1.MessageParser();
        this.stream = stream;
        this.processMessages = Promise.resolve();
    }
    _onData(data) {
        const messages = this.parser.parse(data);
        if (!messages.length)
            return;
        this.processMessages = this.processMessages.then(() => this._processMessages(messages));
    }
    async _processMessages(messages) {
        for (const message of messages) {
            try {
                await this.emit('data', message);
            }
            catch (e) {
                debugLogger(e);
            }
        }
    }
    read() {
        this.stream.on('data', data => this._onData(data));
    }
}
exports.AsyncReader = AsyncReader;
class AsyncWriter {
    constructor(stream) {
        this.serializer = new message_1.MessageSerializer();
        this.stream = stream;
        this.batchPromise = Promise.resolve();
    }
    _write(buffer) {
        if (this.stream.write(buffer))
            return Promise.resolve();
        return new Promise(r => this.stream.once('drain', r));
    }
    _writeBuffers(buffers) {
        this.batchPromise = this.batchPromise
            .catch(() => { })
            .then(async () => {
            for (const buffer of buffers)
                await this._write(buffer);
        });
        return this.batchPromise;
    }
    async write(message) {
        const buffers = this.serializer.serialize(message);
        return await this._writeBuffers(buffers);
    }
}
exports.AsyncWriter = AsyncWriter;
class SyncReader {
    constructor(fd) {
        this.parser = new message_1.MessageParser();
        this.fd = fd;
        this.messageQueue = [];
    }
    _readSync() {
        const buffer = Buffer.alloc(packet_1.default.MAX_PACKET_SIZE);
        const readLength = fs_1.default.readSync(this.fd, buffer, 0, packet_1.default.MAX_PACKET_SIZE, null);
        return buffer.slice(0, readLength);
    }
    _addMessagesToQueue() {
        let messages = this.parser.parse(this._readSync());
        while (!messages.length)
            messages = this.parser.parse(this._readSync());
        this.messageQueue.push(...messages);
    }
    readSync() {
        let message = this.messageQueue.shift();
        while (!message) {
            this._addMessagesToQueue();
            message = this.messageQueue.shift();
        }
        return message;
    }
}
exports.SyncReader = SyncReader;
class SyncWriter {
    constructor(fd) {
        this.serializer = new message_1.MessageSerializer();
        this.fd = fd;
    }
    _writeSync(buffer) {
        fs_1.default.writeSync(this.fd, buffer);
    }
    writeSync(message) {
        const buffers = this.serializer.serialize(message);
        for (const buffer of buffers)
            this._writeSync(buffer);
    }
}
exports.SyncWriter = SyncWriter;
//# sourceMappingURL=data:application/json;base64,