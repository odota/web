"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_controller_1 = __importDefault(require("./test-controller"));
const test_run_tracker_1 = __importDefault(require("./test-run-tracker"));
const error_list_1 = __importDefault(require("../errors/error-list"));
const test_run_1 = require("../errors/test-run");
const add_rendered_warning_1 = __importDefault(require("../notifications/add-rendered-warning"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
function wrapTestFunction(fn) {
    return async (testRun) => {
        let result = null;
        const errList = new error_list_1.default();
        const markeredfn = test_run_tracker_1.default.addTrackingMarkerToFunction(testRun.id, fn);
        function addWarnings(callsiteSet, message) {
            callsiteSet.forEach(callsite => {
                add_rendered_warning_1.default(testRun.warningLog, message, callsite);
                callsiteSet.delete(callsite);
            });
        }
        function addErrors(callsiteSet, ErrorClass) {
            callsiteSet.forEach(callsite => {
                errList.addError(new ErrorClass(callsite));
                callsiteSet.delete(callsite);
            });
        }
        testRun.controller = new test_controller_1.default(testRun);
        testRun.observedCallsites.clear();
        test_run_tracker_1.default.ensureEnabled();
        try {
            result = await markeredfn(testRun.controller);
        }
        catch (err) {
            errList.addError(err);
        }
        if (!errList.hasUncaughtErrorsInTestCode) {
            for (const { callsite, actionId } of testRun.observedCallsites.awaitedSnapshotWarnings.values())
                add_rendered_warning_1.default(testRun.warningLog, { message: warning_message_1.default.excessiveAwaitInAssertion, actionId }, callsite);
            addWarnings(testRun.observedCallsites.unawaitedSnapshotCallsites, warning_message_1.default.missingAwaitOnSnapshotProperty);
            addErrors(testRun.observedCallsites.callsitesWithoutAwait, test_run_1.MissingAwaitError);
        }
        if (errList.hasErrors)
            throw errList;
        return result;
    };
}
exports.default = wrapTestFunction;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcC10ZXN0LWZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS93cmFwLXRlc3QtZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBK0M7QUFDL0MsMEVBQWdEO0FBRWhELHNFQUFxRDtBQUNyRCxpREFBdUQ7QUFDdkQsaUdBQXVFO0FBQ3ZFLHVGQUFnRTtBQUVoRSxTQUF3QixnQkFBZ0IsQ0FBRSxFQUFZO0lBQ2xELE9BQU8sS0FBSyxFQUFFLE9BQWdCLEVBQUUsRUFBRTtRQUM5QixJQUFJLE1BQU0sR0FBUyxJQUFJLENBQUM7UUFDeEIsTUFBTSxPQUFPLEdBQU0sSUFBSSxvQkFBaUIsRUFBRSxDQUFDO1FBQzNDLE1BQU0sVUFBVSxHQUFHLDBCQUFjLENBQUMsMkJBQTJCLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU5RSxTQUFTLFdBQVcsQ0FBRSxXQUFxQyxFQUFFLE9BQWU7WUFDeEUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDM0IsOEJBQWtCLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQzFELFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsU0FBUyxTQUFTLENBQUUsV0FBcUMsRUFBRSxVQUFlO1lBQ3RFLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDM0MsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUkseUJBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRCxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFbEMsMEJBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUUvQixJQUFJO1lBQ0EsTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNqRDtRQUNELE9BQU8sR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsMkJBQTJCLEVBQUU7WUFDdEMsS0FBSyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUU7Z0JBQzNGLDhCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUseUJBQWdCLENBQUMseUJBQXlCLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFeEgsV0FBVyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQywwQkFBMEIsRUFBRSx5QkFBZ0IsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1lBQ25ILFNBQVMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUsNEJBQWlCLENBQUMsQ0FBQztTQUNqRjtRQUVELElBQUksT0FBTyxDQUFDLFNBQVM7WUFDakIsTUFBTSxPQUFPLENBQUM7UUFFbEIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQTlDRCxtQ0E4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVzdENvbnRyb2xsZXIgZnJvbSAnLi90ZXN0LWNvbnRyb2xsZXInO1xuaW1wb3J0IHRlc3RSdW5UcmFja2VyIGZyb20gJy4vdGVzdC1ydW4tdHJhY2tlcic7XG5pbXBvcnQgVGVzdFJ1biBmcm9tICcuLi90ZXN0LXJ1bic7XG5pbXBvcnQgVGVzdENhZmVFcnJvckxpc3QgZnJvbSAnLi4vZXJyb3JzL2Vycm9yLWxpc3QnO1xuaW1wb3J0IHsgTWlzc2luZ0F3YWl0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IGFkZFJlbmRlcmVkV2FybmluZyBmcm9tICcuLi9ub3RpZmljYXRpb25zL2FkZC1yZW5kZXJlZC13YXJuaW5nJztcbmltcG9ydCBXQVJOSU5HX01FU1NBR0VTIGZyb20gJy4uL25vdGlmaWNhdGlvbnMvd2FybmluZy1tZXNzYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcFRlc3RGdW5jdGlvbiAoZm46IEZ1bmN0aW9uKTogRnVuY3Rpb24ge1xuICAgIHJldHVybiBhc3luYyAodGVzdFJ1bjogVGVzdFJ1bikgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ICAgICAgID0gbnVsbDtcbiAgICAgICAgY29uc3QgZXJyTGlzdCAgICA9IG5ldyBUZXN0Q2FmZUVycm9yTGlzdCgpO1xuICAgICAgICBjb25zdCBtYXJrZXJlZGZuID0gdGVzdFJ1blRyYWNrZXIuYWRkVHJhY2tpbmdNYXJrZXJUb0Z1bmN0aW9uKHRlc3RSdW4uaWQsIGZuKTtcblxuICAgICAgICBmdW5jdGlvbiBhZGRXYXJuaW5ncyAoY2FsbHNpdGVTZXQ6IFNldDxSZWNvcmQ8c3RyaW5nLCBhbnk+PiwgbWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgICAgICBjYWxsc2l0ZVNldC5mb3JFYWNoKGNhbGxzaXRlID0+IHtcbiAgICAgICAgICAgICAgICBhZGRSZW5kZXJlZFdhcm5pbmcodGVzdFJ1bi53YXJuaW5nTG9nLCBtZXNzYWdlLCBjYWxsc2l0ZSk7XG4gICAgICAgICAgICAgICAgY2FsbHNpdGVTZXQuZGVsZXRlKGNhbGxzaXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkRXJyb3JzIChjYWxsc2l0ZVNldDogU2V0PFJlY29yZDxzdHJpbmcsIGFueT4+LCBFcnJvckNsYXNzOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgICAgIGNhbGxzaXRlU2V0LmZvckVhY2goY2FsbHNpdGUgPT4ge1xuICAgICAgICAgICAgICAgIGVyckxpc3QuYWRkRXJyb3IobmV3IEVycm9yQ2xhc3MoY2FsbHNpdGUpKTtcbiAgICAgICAgICAgICAgICBjYWxsc2l0ZVNldC5kZWxldGUoY2FsbHNpdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0ZXN0UnVuLmNvbnRyb2xsZXIgPSBuZXcgVGVzdENvbnRyb2xsZXIodGVzdFJ1bik7XG5cbiAgICAgICAgdGVzdFJ1bi5vYnNlcnZlZENhbGxzaXRlcy5jbGVhcigpO1xuXG4gICAgICAgIHRlc3RSdW5UcmFja2VyLmVuc3VyZUVuYWJsZWQoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgbWFya2VyZWRmbih0ZXN0UnVuLmNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGVyckxpc3QuYWRkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZXJyTGlzdC5oYXNVbmNhdWdodEVycm9yc0luVGVzdENvZGUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjYWxsc2l0ZSwgYWN0aW9uSWQgfSBvZiB0ZXN0UnVuLm9ic2VydmVkQ2FsbHNpdGVzLmF3YWl0ZWRTbmFwc2hvdFdhcm5pbmdzLnZhbHVlcygpKVxuICAgICAgICAgICAgICAgIGFkZFJlbmRlcmVkV2FybmluZyh0ZXN0UnVuLndhcm5pbmdMb2csIHsgbWVzc2FnZTogV0FSTklOR19NRVNTQUdFUy5leGNlc3NpdmVBd2FpdEluQXNzZXJ0aW9uLCBhY3Rpb25JZCB9LCBjYWxsc2l0ZSk7XG5cbiAgICAgICAgICAgIGFkZFdhcm5pbmdzKHRlc3RSdW4ub2JzZXJ2ZWRDYWxsc2l0ZXMudW5hd2FpdGVkU25hcHNob3RDYWxsc2l0ZXMsIFdBUk5JTkdfTUVTU0FHRVMubWlzc2luZ0F3YWl0T25TbmFwc2hvdFByb3BlcnR5KTtcbiAgICAgICAgICAgIGFkZEVycm9ycyh0ZXN0UnVuLm9ic2VydmVkQ2FsbHNpdGVzLmNhbGxzaXRlc1dpdGhvdXRBd2FpdCwgTWlzc2luZ0F3YWl0RXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVyckxpc3QuaGFzRXJyb3JzKVxuICAgICAgICAgICAgdGhyb3cgZXJyTGlzdDtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG4iXX0=