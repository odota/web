"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const test_run_1 = require("../../errors/test-run");
class RequestHook {
    constructor(ruleInit, responseEventConfigureOpts) {
        this._requestFilterRules = this._prepareRules(ruleInit);
        this._responseEventConfigureOpts = responseEventConfigureOpts;
        this._warningLog = null;
        this.id = testcafe_hammerhead_1.generateUniqueId();
        this._className = this.constructor.name;
    }
    _prepareRules(ruleInit) {
        if (Array.isArray(ruleInit) && !ruleInit.length)
            return [];
        const rules = testcafe_hammerhead_1.RequestFilterRule.fromArray(ruleInit);
        return !rules.length ? [testcafe_hammerhead_1.RequestFilterRule.ANY] : rules;
    }
    async onRequest(event) {
        throw new test_run_1.RequestHookNotImplementedMethodError('onRequest', this.constructor.name);
    }
    async _onConfigureResponse(event) {
        if (!this._responseEventConfigureOpts)
            return;
        event.opts.includeHeaders = this._responseEventConfigureOpts.includeHeaders;
        event.opts.includeBody = this._responseEventConfigureOpts.includeBody;
    }
    async onResponse(event) {
        throw new test_run_1.RequestHookNotImplementedMethodError('onResponse', this.constructor.name);
    }
}
exports.default = RequestHook;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBUTZCO0FBRTdCLG9EQUE2RTtBQUk3RSxNQUE4QixXQUFXO0lBT3JDLFlBQXVCLFFBQTBELEVBQUUsMEJBQTBEO1FBQ3pJLElBQUksQ0FBQyxtQkFBbUIsR0FBVyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQywyQkFBMkIsR0FBRywwQkFBMEIsQ0FBQztRQUM5RCxJQUFJLENBQUMsV0FBVyxHQUFtQixJQUFJLENBQUM7UUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBNEIsc0NBQWdCLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsVUFBVSxHQUFvQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUM3RCxDQUFDO0lBRU8sYUFBYSxDQUFFLFFBQTBEO1FBQzdFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQzNDLE9BQU8sRUFBRSxDQUFDO1FBRWQsTUFBTSxLQUFLLEdBQUcsdUNBQWlCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBELE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVDQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0QsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTLENBQUUsS0FBbUI7UUFDdkMsTUFBTSxJQUFJLCtDQUFvQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFTSxLQUFLLENBQUMsb0JBQW9CLENBQUUsS0FBNkI7UUFDNUQsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkI7WUFDakMsT0FBTztRQUVYLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxjQUFjLENBQUM7UUFDNUUsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQU0sSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsQ0FBQztJQUM3RSxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBRSxLQUFvQjtRQUN6QyxNQUFNLElBQUksK0NBQW9DLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEYsQ0FBQztDQUNKO0FBdkNELDhCQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29uZmlndXJlUmVzcG9uc2VFdmVudCxcbiAgICBDb25maWd1cmVSZXNwb25zZUV2ZW50T3B0aW9ucyxcbiAgICBSZXF1ZXN0RXZlbnQsXG4gICAgUmVzcG9uc2VFdmVudCxcbiAgICBSZXF1ZXN0RmlsdGVyUnVsZSxcbiAgICBSZXF1ZXN0RmlsdGVyUnVsZUluaXQsXG4gICAgZ2VuZXJhdGVVbmlxdWVJZCxcbn0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5cbmltcG9ydCB7IFJlcXVlc3RIb29rTm90SW1wbGVtZW50ZWRNZXRob2RFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy90ZXN0LXJ1bic7XG5pbXBvcnQgV2FybmluZ0xvZyBmcm9tICcuLi8uLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbG9nJztcblxuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBSZXF1ZXN0SG9vayB7XG4gICAgcHVibGljIF9yZXF1ZXN0RmlsdGVyUnVsZXM6IFJlcXVlc3RGaWx0ZXJSdWxlW107XG4gICAgcHVibGljIHJlYWRvbmx5IF9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cz86IENvbmZpZ3VyZVJlc3BvbnNlRXZlbnRPcHRpb25zO1xuICAgIHB1YmxpYyBfd2FybmluZ0xvZzogV2FybmluZ0xvZyB8IG51bGw7XG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgcHVibGljIF9jbGFzc05hbWU6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvciAocnVsZUluaXQ/OiBSZXF1ZXN0RmlsdGVyUnVsZUluaXQgfCBSZXF1ZXN0RmlsdGVyUnVsZUluaXRbXSwgcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHM/OiBDb25maWd1cmVSZXNwb25zZUV2ZW50T3B0aW9ucykge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0RmlsdGVyUnVsZXMgICAgICAgICA9IHRoaXMuX3ByZXBhcmVSdWxlcyhydWxlSW5pdCk7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzID0gcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHM7XG4gICAgICAgIHRoaXMuX3dhcm5pbmdMb2cgICAgICAgICAgICAgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5pZCAgICAgICAgICAgICAgICAgICAgICAgICAgPSBnZW5lcmF0ZVVuaXF1ZUlkKCk7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZSAgICAgICAgICAgICAgICAgID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3ByZXBhcmVSdWxlcyAocnVsZUluaXQ/OiBSZXF1ZXN0RmlsdGVyUnVsZUluaXQgfCBSZXF1ZXN0RmlsdGVyUnVsZUluaXRbXSk6IFJlcXVlc3RGaWx0ZXJSdWxlW10ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShydWxlSW5pdCkgJiYgIXJ1bGVJbml0Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCBydWxlcyA9IFJlcXVlc3RGaWx0ZXJSdWxlLmZyb21BcnJheShydWxlSW5pdCk7XG5cbiAgICAgICAgcmV0dXJuICFydWxlcy5sZW5ndGggPyBbUmVxdWVzdEZpbHRlclJ1bGUuQU5ZXSA6IHJ1bGVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBvblJlcXVlc3QgKGV2ZW50OiBSZXF1ZXN0RXZlbnQpOiBQcm9taXNlPHZvaWQ+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RIb29rTm90SW1wbGVtZW50ZWRNZXRob2RFcnJvcignb25SZXF1ZXN0JywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgX29uQ29uZmlndXJlUmVzcG9uc2UgKGV2ZW50OiBDb25maWd1cmVSZXNwb25zZUV2ZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZXZlbnQub3B0cy5pbmNsdWRlSGVhZGVycyA9IHRoaXMuX3Jlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzLmluY2x1ZGVIZWFkZXJzO1xuICAgICAgICBldmVudC5vcHRzLmluY2x1ZGVCb2R5ICAgID0gdGhpcy5fcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMuaW5jbHVkZUJvZHk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG9uUmVzcG9uc2UgKGV2ZW50OiBSZXNwb25zZUV2ZW50KTogUHJvbWlzZTx2b2lkPiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIHRocm93IG5ldyBSZXF1ZXN0SG9va05vdEltcGxlbWVudGVkTWV0aG9kRXJyb3IoJ29uUmVzcG9uc2UnLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgIH1cbn1cbiJdfQ==