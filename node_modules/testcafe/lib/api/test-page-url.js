"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertRoleUrl = exports.assertPageUrl = exports.getUrl = exports.resolveRelativeUrl = exports.isRelative = void 0;
const url_1 = require("url");
const os_family_1 = __importDefault(require("os-family"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const PROTOCOL_RE = /^([\w-]+?)(?=:\/\/)/;
const SUPPORTED_PROTOCOL_RE = /^(https?|file):/;
const IMPLICIT_PROTOCOL_RE = /^\/\//;
const ABSOLUTE_PATH_RE = /^\/[^/]/;
const WIN_ABSOLUTE_PATH_RE = /^\w:[/\\]/;
const RELATIVE_PATH_RE = /^\.\.?[/\\]/;
function isRelative(url) {
    return RELATIVE_PATH_RE.test(url);
}
exports.isRelative = isRelative;
function isAbsolute(url) {
    // NOTE: path.isAbsolute treats the '//example.com' path as absolute
    return os_family_1.default.win ? WIN_ABSOLUTE_PATH_RE.test(url) : ABSOLUTE_PATH_RE.test(url);
}
function resolveRelativeUrl(path, base) {
    const url = new url_1.URL(path, base);
    return url.toString();
}
exports.resolveRelativeUrl = resolveRelativeUrl;
function ensureProtocol(url) {
    if (SUPPORTED_PROTOCOL_RE.test(url) || url === testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
        return url;
    const protocol = IMPLICIT_PROTOCOL_RE.test(url) ? 'http:' : 'http://';
    return protocol + url;
}
function getUrl(url, base) {
    if (isRelative(url)) {
        if (!base)
            throw new Error('Relative urls require a base path');
        return resolveRelativeUrl(url, base);
    }
    else if (isAbsolute(url))
        return url_1.pathToFileURL(url).toString();
    return ensureProtocol(url);
}
exports.getUrl = getUrl;
function assertPageUrl(url, callsiteName) {
    const protocol = url.match(PROTOCOL_RE);
    const hasUnsupportedProtocol = protocol && !SUPPORTED_PROTOCOL_RE.test(url);
    const isWinAbsolutePath = os_family_1.default.win && WIN_ABSOLUTE_PATH_RE.test(url);
    if (hasUnsupportedProtocol && !isWinAbsolutePath && url !== testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
        throw new runtime_1.APIError(callsiteName, types_1.RUNTIME_ERRORS.unsupportedUrlProtocol, url, protocol && protocol[0]);
}
exports.assertPageUrl = assertPageUrl;
function assertRoleUrl(url, callsiteName) {
    if (isRelative(url))
        throw new runtime_1.APIError(callsiteName, types_1.RUNTIME_ERRORS.roleInitializedWithRelativeUrl);
}
exports.assertRoleUrl = assertRoleUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1wYWdlLXVybC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVzdC1wYWdlLXVybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw2QkFBeUM7QUFDekMsMERBQTJCO0FBQzNCLCtDQUE2QztBQUM3QywyQ0FBaUQ7QUFDakQsNkRBQXlEO0FBRXpELE1BQU0sV0FBVyxHQUFhLHFCQUFxQixDQUFDO0FBQ3BELE1BQU0scUJBQXFCLEdBQUcsaUJBQWlCLENBQUM7QUFDaEQsTUFBTSxvQkFBb0IsR0FBSSxPQUFPLENBQUM7QUFDdEMsTUFBTSxnQkFBZ0IsR0FBUSxTQUFTLENBQUM7QUFDeEMsTUFBTSxvQkFBb0IsR0FBSSxXQUFXLENBQUM7QUFDMUMsTUFBTSxnQkFBZ0IsR0FBUSxhQUFhLENBQUM7QUFFNUMsU0FBZ0IsVUFBVSxDQUFFLEdBQVc7SUFDbkMsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBUyxVQUFVLENBQUUsR0FBVztJQUM1QixvRUFBb0U7SUFDcEUsT0FBTyxtQkFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEYsQ0FBQztBQUVELFNBQWdCLGtCQUFrQixDQUFFLElBQVksRUFBRSxJQUFTO0lBQ3ZELE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVoQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMxQixDQUFDO0FBSkQsZ0RBSUM7QUFFRCxTQUFTLGNBQWMsQ0FBRSxHQUFXO0lBQ2hDLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyx3Q0FBa0I7UUFDN0QsT0FBTyxHQUFHLENBQUM7SUFFZixNQUFNLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRXRFLE9BQU8sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUMxQixDQUFDO0FBRUQsU0FBZ0IsTUFBTSxDQUFFLEdBQVcsRUFBRSxJQUFVO0lBQzNDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBRXpELE9BQU8sa0JBQWtCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3hDO1NBRUksSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQ3BCLE9BQU8sbUJBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV6QyxPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBWkQsd0JBWUM7QUFFRCxTQUFnQixhQUFhLENBQUUsR0FBVyxFQUFFLFlBQW9CO0lBQzVELE1BQU0sUUFBUSxHQUFpQixHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sc0JBQXNCLEdBQUcsUUFBUSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVFLE1BQU0saUJBQWlCLEdBQVEsbUJBQUUsQ0FBQyxHQUFHLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXhFLElBQUksc0JBQXNCLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxHQUFHLEtBQUssd0NBQWtCO1FBQzFFLE1BQU0sSUFBSSxrQkFBUSxDQUFDLFlBQVksRUFBRSxzQkFBYyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxRQUFRLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUcsQ0FBQztBQVBELHNDQU9DO0FBRUQsU0FBZ0IsYUFBYSxDQUFFLEdBQVcsRUFBRSxZQUFvQjtJQUM1RCxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFDZixNQUFNLElBQUksa0JBQVEsQ0FBQyxZQUFZLEVBQUUsc0JBQWMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFIRCxzQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVSTCwgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgT1MgZnJvbSAnb3MtZmFtaWx5JztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgUlVOVElNRV9FUlJPUlMgfSBmcm9tICcuLi9lcnJvcnMvdHlwZXMnO1xuaW1wb3J0IHsgU1BFQ0lBTF9CTEFOS19QQUdFIH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5cbmNvbnN0IFBST1RPQ09MX1JFICAgICAgICAgICA9IC9eKFtcXHctXSs/KSg/PTpcXC9cXC8pLztcbmNvbnN0IFNVUFBPUlRFRF9QUk9UT0NPTF9SRSA9IC9eKGh0dHBzP3xmaWxlKTovO1xuY29uc3QgSU1QTElDSVRfUFJPVE9DT0xfUkUgID0gL15cXC9cXC8vO1xuY29uc3QgQUJTT0xVVEVfUEFUSF9SRSAgICAgID0gL15cXC9bXi9dLztcbmNvbnN0IFdJTl9BQlNPTFVURV9QQVRIX1JFICA9IC9eXFx3OlsvXFxcXF0vO1xuY29uc3QgUkVMQVRJVkVfUEFUSF9SRSAgICAgID0gL15cXC5cXC4/Wy9cXFxcXS87XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlbGF0aXZlICh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBSRUxBVElWRV9QQVRIX1JFLnRlc3QodXJsKTtcbn1cblxuZnVuY3Rpb24gaXNBYnNvbHV0ZSAodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAvLyBOT1RFOiBwYXRoLmlzQWJzb2x1dGUgdHJlYXRzIHRoZSAnLy9leGFtcGxlLmNvbScgcGF0aCBhcyBhYnNvbHV0ZVxuICAgIHJldHVybiBPUy53aW4gPyBXSU5fQUJTT0xVVEVfUEFUSF9SRS50ZXN0KHVybCkgOiBBQlNPTFVURV9QQVRIX1JFLnRlc3QodXJsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVSZWxhdGl2ZVVybCAocGF0aDogc3RyaW5nLCBiYXNlOiBVUkwpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocGF0aCwgYmFzZSk7XG5cbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVByb3RvY29sICh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKFNVUFBPUlRFRF9QUk9UT0NPTF9SRS50ZXN0KHVybCkgfHwgdXJsID09PSBTUEVDSUFMX0JMQU5LX1BBR0UpXG4gICAgICAgIHJldHVybiB1cmw7XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IElNUExJQ0lUX1BST1RPQ09MX1JFLnRlc3QodXJsKSA/ICdodHRwOicgOiAnaHR0cDovLyc7XG5cbiAgICByZXR1cm4gcHJvdG9jb2wgKyB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmwgKHVybDogc3RyaW5nLCBiYXNlPzogVVJMKTogc3RyaW5nIHtcbiAgICBpZiAoaXNSZWxhdGl2ZSh1cmwpKSB7XG4gICAgICAgIGlmICghYmFzZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVsYXRpdmUgdXJscyByZXF1aXJlIGEgYmFzZSBwYXRoJyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc29sdmVSZWxhdGl2ZVVybCh1cmwsIGJhc2UpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKGlzQWJzb2x1dGUodXJsKSlcbiAgICAgICAgcmV0dXJuIHBhdGhUb0ZpbGVVUkwodXJsKS50b1N0cmluZygpO1xuXG4gICAgcmV0dXJuIGVuc3VyZVByb3RvY29sKHVybCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRQYWdlVXJsICh1cmw6IHN0cmluZywgY2FsbHNpdGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBwcm90b2NvbCAgICAgICAgICAgICAgID0gdXJsLm1hdGNoKFBST1RPQ09MX1JFKTtcbiAgICBjb25zdCBoYXNVbnN1cHBvcnRlZFByb3RvY29sID0gcHJvdG9jb2wgJiYgIVNVUFBPUlRFRF9QUk9UT0NPTF9SRS50ZXN0KHVybCk7XG4gICAgY29uc3QgaXNXaW5BYnNvbHV0ZVBhdGggICAgICA9IE9TLndpbiAmJiBXSU5fQUJTT0xVVEVfUEFUSF9SRS50ZXN0KHVybCk7XG5cbiAgICBpZiAoaGFzVW5zdXBwb3J0ZWRQcm90b2NvbCAmJiAhaXNXaW5BYnNvbHV0ZVBhdGggJiYgdXJsICE9PSBTUEVDSUFMX0JMQU5LX1BBR0UpXG4gICAgICAgIHRocm93IG5ldyBBUElFcnJvcihjYWxsc2l0ZU5hbWUsIFJVTlRJTUVfRVJST1JTLnVuc3VwcG9ydGVkVXJsUHJvdG9jb2wsIHVybCwgcHJvdG9jb2wgJiYgcHJvdG9jb2xbMF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Um9sZVVybCAodXJsOiBzdHJpbmcsIGNhbGxzaXRlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGlzUmVsYXRpdmUodXJsKSlcbiAgICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKGNhbGxzaXRlTmFtZSwgUlVOVElNRV9FUlJPUlMucm9sZUluaXRpYWxpemVkV2l0aFJlbGF0aXZlVXJsKTtcbn1cbiJdfQ==