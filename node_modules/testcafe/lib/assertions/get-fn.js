"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const type_1 = __importDefault(require("./type"));
function getFn(command) {
    switch (command.assertionType) {
        case type_1.default.eql:
            return () => chai_1.assert.deepEqual(command.actual, command.expected, command.message);
        case type_1.default.notEql:
            return () => chai_1.assert.notDeepEqual(command.actual, command.expected, command.message);
        case type_1.default.ok:
            return () => chai_1.assert.isOk(command.actual, command.message);
        case type_1.default.notOk:
            return () => chai_1.assert.isNotOk(command.actual, command.message);
        case type_1.default.contains:
            return () => chai_1.assert.include(command.actual, command.expected, command.message);
        case type_1.default.notContains:
            return () => chai_1.assert.notInclude(command.actual, command.expected, command.message);
        case type_1.default.typeOf:
            return () => chai_1.assert.typeOf(command.actual, command.expected, command.message);
        case type_1.default.notTypeOf:
            return () => chai_1.assert.notTypeOf(command.actual, command.expected, command.message);
        case type_1.default.gt:
            return () => chai_1.assert.isAbove(command.actual, command.expected, command.message);
        case type_1.default.gte:
            return () => chai_1.assert.isAtLeast(command.actual, command.expected, command.message);
        case type_1.default.lt:
            return () => chai_1.assert.isBelow(command.actual, command.expected, command.message);
        case type_1.default.lte:
            return () => chai_1.assert.isAtMost(command.actual, command.expected, command.message);
        case type_1.default.within:
            return () => chai_1.expect(command.actual).to.be.within(command.expected, command.expected2, command.message);
        case type_1.default.notWithin:
            return () => chai_1.expect(command.actual).not.to.be.within(command.expected, command.expected2, command.message);
        case type_1.default.match:
            return () => chai_1.assert.match(command.actual, command.expected, command.message);
        case type_1.default.notMatch:
            return () => chai_1.assert.notMatch(command.actual, command.expected, command.message);
        default:
            return () => void 0;
    }
}
exports.default = getFn;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Fzc2VydGlvbnMvZ2V0LWZuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQXNDO0FBQ3RDLGtEQUFvQztBQUdwQyxTQUF3QixLQUFLLENBQUUsT0FBeUI7SUFDcEQsUUFBUSxPQUFPLENBQUMsYUFBYSxFQUFFO1FBQzNCLEtBQUssY0FBYyxDQUFDLEdBQUc7WUFDbkIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckYsS0FBSyxjQUFjLENBQUMsTUFBTTtZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RixLQUFLLGNBQWMsQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5RCxLQUFLLGNBQWMsQ0FBQyxLQUFLO1lBQ3JCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRSxLQUFLLGNBQWMsQ0FBQyxRQUFRO1lBQ3hCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBZ0IsRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkcsS0FBSyxjQUFjLENBQUMsV0FBVztZQUMzQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQWdCLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEcsS0FBSyxjQUFjLENBQUMsTUFBTTtZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUYsS0FBSyxjQUFjLENBQUMsU0FBUztZQUN6QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0YsS0FBSyxjQUFjLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQWdCLEVBQUUsT0FBTyxDQUFDLFFBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZHLEtBQUssY0FBYyxDQUFDLEdBQUc7WUFDbkIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFnQixFQUFFLE9BQU8sQ0FBQyxRQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV6RyxLQUFLLGNBQWMsQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBZ0IsRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkcsS0FBSyxjQUFjLENBQUMsR0FBRztZQUNuQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQWdCLEVBQUUsT0FBTyxDQUFDLFFBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhHLEtBQUssY0FBYyxDQUFDLE1BQU07WUFDdEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFrQixFQUFFLE9BQU8sQ0FBQyxTQUFtQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvSCxLQUFLLGNBQWMsQ0FBQyxTQUFTO1lBQ3pCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQWtCLEVBQUUsT0FBTyxDQUFDLFNBQW1CLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5JLEtBQUssY0FBYyxDQUFDLEtBQUs7WUFDckIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFnQixFQUFFLE9BQU8sQ0FBQyxRQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyRyxLQUFLLGNBQWMsQ0FBQyxRQUFRO1lBQ3hCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5RjtZQUNJLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0I7QUFDTCxDQUFDO0FBckRELHdCQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCwgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgQVNTRVJUSU9OX1RZUEUgZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IEFzc2VydGlvbkNvbW1hbmQgfSBmcm9tICcuLi90ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGbiAoY29tbWFuZDogQXNzZXJ0aW9uQ29tbWFuZCk6IEZ1bmN0aW9uIHtcbiAgICBzd2l0Y2ggKGNvbW1hbmQuYXNzZXJ0aW9uVHlwZSkge1xuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmVxbDpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuZGVlcEVxdWFsKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubm90RXFsOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5ub3REZWVwRXF1YWwoY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5vazpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNPayhjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdE9rOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5pc05vdE9rKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUuY29udGFpbnM6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmluY2x1ZGUoY29tbWFuZC5hY3R1YWwgYXMgc3RyaW5nLCBjb21tYW5kLmV4cGVjdGVkIGFzIHN0cmluZywgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdENvbnRhaW5zOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5ub3RJbmNsdWRlKGNvbW1hbmQuYWN0dWFsIGFzIHN0cmluZywgY29tbWFuZC5leHBlY3RlZCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLnR5cGVPZjpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQudHlwZU9mKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkIGFzIHN0cmluZywgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdFR5cGVPZjpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQubm90VHlwZU9mKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkIGFzIHN0cmluZywgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmd0OlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5pc0Fib3ZlKGNvbW1hbmQuYWN0dWFsIGFzIG51bWJlciwgY29tbWFuZC5leHBlY3RlZCBhcyBudW1iZXIsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ndGU6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmlzQXRMZWFzdChjb21tYW5kLmFjdHVhbCBhcyBudW1iZXIsIGNvbW1hbmQuZXhwZWN0ZWQgYXMgbnVtYmVyLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubHQ6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmlzQmVsb3coY29tbWFuZC5hY3R1YWwgYXMgbnVtYmVyLCBjb21tYW5kLmV4cGVjdGVkIGFzIG51bWJlciwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmx0ZTpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNBdE1vc3QoY29tbWFuZC5hY3R1YWwgYXMgbnVtYmVyLCBjb21tYW5kLmV4cGVjdGVkIGFzIG51bWJlciwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLndpdGhpbjpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBleHBlY3QoY29tbWFuZC5hY3R1YWwpLnRvLmJlLndpdGhpbihjb21tYW5kLmV4cGVjdGVkIGFzIG51bWJlciwgY29tbWFuZC5leHBlY3RlZDIgYXMgbnVtYmVyLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubm90V2l0aGluOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGV4cGVjdChjb21tYW5kLmFjdHVhbCkubm90LnRvLmJlLndpdGhpbihjb21tYW5kLmV4cGVjdGVkIGFzIG51bWJlciwgY29tbWFuZC5leHBlY3RlZDIgYXMgbnVtYmVyLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubWF0Y2g6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0Lm1hdGNoKGNvbW1hbmQuYWN0dWFsIGFzIHN0cmluZywgY29tbWFuZC5leHBlY3RlZCBhcyBSZWdFeHAsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ub3RNYXRjaDpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQubm90TWF0Y2goY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQuZXhwZWN0ZWQgYXMgUmVnRXhwLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gdm9pZCAwO1xuICAgIH1cbn1cbiJdfQ==