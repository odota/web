"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lazyRequire = require('import-lazy')(require);
const hammerhead = lazyRequire('testcafe-hammerhead');
const ReporterPluginHost = lazyRequire('./reporter/plugin-host');
const getTestListModule = lazyRequire('./compiler/test-file/formats/es-next/get-test-list');
const getTypeScriptTestListModule = lazyRequire('./compiler/test-file/formats/typescript/get-test-list');
const getCoffeeScriptTestListModule = lazyRequire('./compiler/test-file/formats/coffeescript/get-test-list');
const COMMAND_TYPE = lazyRequire('./test-run/commands/type');
const ASSERTION_TYPE = lazyRequire('./assertions/type');
const TEST_RUN_PHASE = lazyRequire('./test-run/phase');
const createCommandFromObject = lazyRequire('./test-run/commands/from-object');
const initializers = lazyRequire('./test-run/commands/validations/initializers');
const errorTypes = lazyRequire('./errors/types');
const TestRunErrorFormattableAdapter = lazyRequire('./errors/test-run/formattable-adapter');
const testRunErrors = lazyRequire('./errors/test-run');
const processTestFnError = lazyRequire('./errors/process-test-fn-error');
const testRunErrorUtils = lazyRequire('./errors/test-run/utils');
const browserProviderPool = lazyRequire('./browser/provider/pool');
const BrowserConnection = lazyRequire('./browser/connection');
// NOTE: we can't use lazy require for TestRun and Assignable, because it breaks prototype chain for inherited classes
let TestRun = null;
let Assignable = null;
exports.default = {
    TestRunErrorFormattableAdapter,
    testRunErrors,
    COMMAND_TYPE,
    ASSERTION_TYPE,
    TEST_RUN_PHASE,
    errorTypes,
    testRunErrorUtils,
    BrowserConnection,
    get Assignable() {
        if (!Assignable)
            Assignable = require('./utils/assignable');
        return Assignable;
    },
    get TestRun() {
        if (!TestRun)
            TestRun = require('./test-run');
        return TestRun;
    },
    get getTestList() {
        return getTestListModule.getTestList;
    },
    get getTypeScriptTestList() {
        return getTypeScriptTestListModule.getTypeScriptTestList;
    },
    get getCoffeeScriptTestList() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestList;
    },
    get getTestListFromCode() {
        return getTestListModule.getTestListFromCode;
    },
    get getTypeScriptTestListFromCode() {
        return getTypeScriptTestListModule.getTypeScriptTestListFromCode;
    },
    get getCoffeeScriptTestListFromCode() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestListFromCode;
    },
    get initSelector() {
        return initializers.initSelector;
    },
    get createCommandFromObject() {
        return createCommandFromObject;
    },
    get processTestFnError() {
        return processTestFnError;
    },
    get browserProviderPool() {
        return browserProviderPool;
    },
    ensureUploadDirectory(...args) {
        return hammerhead.UploadStorage.ensureUploadsRoot(...args);
    },
    copyFilesToUploadFolder(...args) {
        return hammerhead.UploadStorage.copy(...args);
    },
    buildReporterPlugin(pluginFactory, outStream) {
        const plugin = pluginFactory();
        return new ReporterPluginHost(plugin, outStream);
    },
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWRkaW5nLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2VtYmVkZGluZy11dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVwRCxNQUFNLFVBQVUsR0FBdUIsV0FBVyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDMUUsTUFBTSxrQkFBa0IsR0FBZSxXQUFXLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUM3RSxNQUFNLGlCQUFpQixHQUFnQixXQUFXLENBQUMsb0RBQW9ELENBQUMsQ0FBQztBQUN6RyxNQUFNLDJCQUEyQixHQUFNLFdBQVcsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQzVHLE1BQU0sNkJBQTZCLEdBQUksV0FBVyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7QUFDOUcsTUFBTSxZQUFZLEdBQXFCLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQy9FLE1BQU0sY0FBYyxHQUFtQixXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN4RSxNQUFNLGNBQWMsR0FBbUIsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdkUsTUFBTSx1QkFBdUIsR0FBVSxXQUFXLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUN0RixNQUFNLFlBQVksR0FBcUIsV0FBVyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7QUFDbkcsTUFBTSxVQUFVLEdBQXVCLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sOEJBQThCLEdBQUcsV0FBVyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDNUYsTUFBTSxhQUFhLEdBQW9CLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sa0JBQWtCLEdBQWUsV0FBVyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDckYsTUFBTSxpQkFBaUIsR0FBZ0IsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDOUUsTUFBTSxtQkFBbUIsR0FBYyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUM5RSxNQUFNLGlCQUFpQixHQUFnQixXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUczRSxzSEFBc0g7QUFDdEgsSUFBSSxPQUFPLEdBQU0sSUFBSSxDQUFDO0FBQ3RCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQztBQUV0QixrQkFBZTtJQUNYLDhCQUE4QjtJQUM5QixhQUFhO0lBQ2IsWUFBWTtJQUNaLGNBQWM7SUFDZCxjQUFjO0lBQ2QsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFFakIsSUFBSSxVQUFVO1FBQ1YsSUFBSSxDQUFDLFVBQVU7WUFDWCxVQUFVLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFFL0MsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLElBQUksQ0FBQyxPQUFPO1lBQ1IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwQyxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUkscUJBQXFCO1FBQ3JCLE9BQU8sMkJBQTJCLENBQUMscUJBQXFCLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQUksdUJBQXVCO1FBQ3ZCLE9BQU8sNkJBQTZCLENBQUMsdUJBQXVCLENBQUM7SUFDakUsQ0FBQztJQUVELElBQUksbUJBQW1CO1FBQ25CLE9BQU8saUJBQWlCLENBQUMsbUJBQW1CLENBQUM7SUFDakQsQ0FBQztJQUVELElBQUksNkJBQTZCO1FBQzdCLE9BQU8sMkJBQTJCLENBQUMsNkJBQTZCLENBQUM7SUFDckUsQ0FBQztJQUVELElBQUksK0JBQStCO1FBQy9CLE9BQU8sNkJBQTZCLENBQUMsK0JBQStCLENBQUM7SUFDekUsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sWUFBWSxDQUFDLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSx1QkFBdUI7UUFDdkIsT0FBTyx1QkFBdUIsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDbEIsT0FBTyxrQkFBa0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFDbkIsT0FBTyxtQkFBbUIsQ0FBQztJQUMvQixDQUFDO0lBRUQscUJBQXFCLENBQUUsR0FBRyxJQUFJO1FBQzFCLE9BQU8sVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCx1QkFBdUIsQ0FBRSxHQUFHLElBQUk7UUFDNUIsT0FBTyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxtQkFBbUIsQ0FBRSxhQUFhLEVBQUUsU0FBUztRQUN6QyxNQUFNLE1BQU0sR0FBRyxhQUFhLEVBQUUsQ0FBQztRQUUvQixPQUFPLElBQUksa0JBQWtCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGF6eVJlcXVpcmUgPSByZXF1aXJlKCdpbXBvcnQtbGF6eScpKHJlcXVpcmUpO1xuXG5jb25zdCBoYW1tZXJoZWFkICAgICAgICAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgndGVzdGNhZmUtaGFtbWVyaGVhZCcpO1xuY29uc3QgUmVwb3J0ZXJQbHVnaW5Ib3N0ICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vcmVwb3J0ZXIvcGx1Z2luLWhvc3QnKTtcbmNvbnN0IGdldFRlc3RMaXN0TW9kdWxlICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2NvbXBpbGVyL3Rlc3QtZmlsZS9mb3JtYXRzL2VzLW5leHQvZ2V0LXRlc3QtbGlzdCcpO1xuY29uc3QgZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlICAgID0gbGF6eVJlcXVpcmUoJy4vY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvdHlwZXNjcmlwdC9nZXQtdGVzdC1saXN0Jyk7XG5jb25zdCBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdE1vZHVsZSAgPSBsYXp5UmVxdWlyZSgnLi9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy9jb2ZmZWVzY3JpcHQvZ2V0LXRlc3QtbGlzdCcpO1xuY29uc3QgQ09NTUFORF9UWVBFICAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdC1ydW4vY29tbWFuZHMvdHlwZScpO1xuY29uc3QgQVNTRVJUSU9OX1RZUEUgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vYXNzZXJ0aW9ucy90eXBlJyk7XG5jb25zdCBURVNUX1JVTl9QSEFTRSAgICAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi90ZXN0LXJ1bi9waGFzZScpO1xuY29uc3QgY3JlYXRlQ29tbWFuZEZyb21PYmplY3QgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdC1ydW4vY29tbWFuZHMvZnJvbS1vYmplY3QnKTtcbmNvbnN0IGluaXRpYWxpemVycyAgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL3Rlc3QtcnVuL2NvbW1hbmRzL3ZhbGlkYXRpb25zL2luaXRpYWxpemVycycpO1xuY29uc3QgZXJyb3JUeXBlcyAgICAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3R5cGVzJyk7XG5jb25zdCBUZXN0UnVuRXJyb3JGb3JtYXR0YWJsZUFkYXB0ZXIgPSBsYXp5UmVxdWlyZSgnLi9lcnJvcnMvdGVzdC1ydW4vZm9ybWF0dGFibGUtYWRhcHRlcicpO1xuY29uc3QgdGVzdFJ1bkVycm9ycyAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3Rlc3QtcnVuJyk7XG5jb25zdCBwcm9jZXNzVGVzdEZuRXJyb3IgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi9lcnJvcnMvcHJvY2Vzcy10ZXN0LWZuLWVycm9yJyk7XG5jb25zdCB0ZXN0UnVuRXJyb3JVdGlscyAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi9lcnJvcnMvdGVzdC1ydW4vdXRpbHMnKTtcbmNvbnN0IGJyb3dzZXJQcm92aWRlclBvb2wgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2Jyb3dzZXIvcHJvdmlkZXIvcG9vbCcpO1xuY29uc3QgQnJvd3NlckNvbm5lY3Rpb24gICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vYnJvd3Nlci9jb25uZWN0aW9uJyk7XG5cblxuLy8gTk9URTogd2UgY2FuJ3QgdXNlIGxhenkgcmVxdWlyZSBmb3IgVGVzdFJ1biBhbmQgQXNzaWduYWJsZSwgYmVjYXVzZSBpdCBicmVha3MgcHJvdG90eXBlIGNoYWluIGZvciBpbmhlcml0ZWQgY2xhc3Nlc1xubGV0IFRlc3RSdW4gICAgPSBudWxsO1xubGV0IEFzc2lnbmFibGUgPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyLFxuICAgIHRlc3RSdW5FcnJvcnMsXG4gICAgQ09NTUFORF9UWVBFLFxuICAgIEFTU0VSVElPTl9UWVBFLFxuICAgIFRFU1RfUlVOX1BIQVNFLFxuICAgIGVycm9yVHlwZXMsXG4gICAgdGVzdFJ1bkVycm9yVXRpbHMsXG4gICAgQnJvd3NlckNvbm5lY3Rpb24sXG5cbiAgICBnZXQgQXNzaWduYWJsZSAoKSB7XG4gICAgICAgIGlmICghQXNzaWduYWJsZSlcbiAgICAgICAgICAgIEFzc2lnbmFibGUgPSByZXF1aXJlKCcuL3V0aWxzL2Fzc2lnbmFibGUnKTtcblxuICAgICAgICByZXR1cm4gQXNzaWduYWJsZTtcbiAgICB9LFxuXG4gICAgZ2V0IFRlc3RSdW4gKCkge1xuICAgICAgICBpZiAoIVRlc3RSdW4pXG4gICAgICAgICAgICBUZXN0UnVuID0gcmVxdWlyZSgnLi90ZXN0LXJ1bicpO1xuXG4gICAgICAgIHJldHVybiBUZXN0UnVuO1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VGVzdExpc3QgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VGVzdExpc3RNb2R1bGUuZ2V0VGVzdExpc3Q7XG4gICAgfSxcblxuICAgIGdldCBnZXRUeXBlU2NyaXB0VGVzdExpc3QgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldFR5cGVTY3JpcHRUZXN0TGlzdDtcbiAgICB9LFxuXG4gICAgZ2V0IGdldENvZmZlZVNjcmlwdFRlc3RMaXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldENvZmZlZVNjcmlwdFRlc3RMaXN0O1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VGVzdExpc3RGcm9tQ29kZSAoKSB7XG4gICAgICAgIHJldHVybiBnZXRUZXN0TGlzdE1vZHVsZS5nZXRUZXN0TGlzdEZyb21Db2RlO1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VHlwZVNjcmlwdFRlc3RMaXN0RnJvbUNvZGUgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldFR5cGVTY3JpcHRUZXN0TGlzdEZyb21Db2RlO1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RGcm9tQ29kZSAoKSB7XG4gICAgICAgIHJldHVybiBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdE1vZHVsZS5nZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdEZyb21Db2RlO1xuICAgIH0sXG5cbiAgICBnZXQgaW5pdFNlbGVjdG9yICgpIHtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVycy5pbml0U2VsZWN0b3I7XG4gICAgfSxcblxuICAgIGdldCBjcmVhdGVDb21tYW5kRnJvbU9iamVjdCAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVDb21tYW5kRnJvbU9iamVjdDtcbiAgICB9LFxuXG4gICAgZ2V0IHByb2Nlc3NUZXN0Rm5FcnJvciAoKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzVGVzdEZuRXJyb3I7XG4gICAgfSxcblxuICAgIGdldCBicm93c2VyUHJvdmlkZXJQb29sICgpIHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXJQcm92aWRlclBvb2w7XG4gICAgfSxcblxuICAgIGVuc3VyZVVwbG9hZERpcmVjdG9yeSAoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gaGFtbWVyaGVhZC5VcGxvYWRTdG9yYWdlLmVuc3VyZVVwbG9hZHNSb290KC4uLmFyZ3MpO1xuICAgIH0sXG5cbiAgICBjb3B5RmlsZXNUb1VwbG9hZEZvbGRlciAoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gaGFtbWVyaGVhZC5VcGxvYWRTdG9yYWdlLmNvcHkoLi4uYXJncyk7XG4gICAgfSxcblxuICAgIGJ1aWxkUmVwb3J0ZXJQbHVnaW4gKHBsdWdpbkZhY3RvcnksIG91dFN0cmVhbSkge1xuICAgICAgICBjb25zdCBwbHVnaW4gPSBwbHVnaW5GYWN0b3J5KCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSZXBvcnRlclBsdWdpbkhvc3QocGx1Z2luLCBvdXRTdHJlYW0pO1xuICAgIH0sXG59O1xuIl19