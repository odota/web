"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const is_window_iframe_1 = __importDefault(require("./utils/is-window-iframe"));
function ensureImageMap(imgElement, areaElement) {
    return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.dom.closest(areaElement, 'map'))
        .then(mapElement => {
        return mapElement && mapElement.name === adapter_1.adapter.dom.getImgMapName(imgElement) ? areaElement : imgElement;
    });
}
function findElementOrNonEmptyChildFromPoint(point, element) {
    return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.position.getElementFromPoint(point))
        .then(topElement => {
        return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.dom.containsElement(element, topElement))
            .then(containsEl => containsEl && adapter_1.adapter.dom.getNodeText(topElement))
            .then(isNonEmptyChild => isNonEmptyChild || topElement && adapter_1.adapter.dom.isNodeEqual(topElement, element) ? topElement : null);
    });
}
function correctTopElementByExpectedElement(topElement, expectedElement) {
    if (!expectedElement || !topElement || adapter_1.adapter.dom.isNodeEqual(topElement, expectedElement))
        return topElement;
    const isTREFElement = adapter_1.adapter.dom.getTagName(expectedElement) === 'tref';
    // NOTE: 'document.elementFromPoint' can't find these types of elements
    if (isTREFElement)
        return expectedElement;
    // NOTE: T299665 - Incorrect click automation for images with an associated map element in Firefox
    // All browsers return the <area> element from document.getElementFromPoint, but
    // Firefox returns the <img> element. We should accomplish this for Firefox as well.
    const isImageMapArea = adapter_1.adapter.dom.getTagName(expectedElement) === 'area' && adapter_1.adapter.dom.isImgElement(topElement);
    if (adapter_1.adapter.browser.isFirefox && isImageMapArea)
        return ensureImageMap(topElement, expectedElement);
    // NOTE: try to find a multi-line link by its rectangle (T163678)
    return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.dom.closest(expectedElement, 'a'))
        .then(anchor => !!anchor)
        .then(isLinkOrChildExpected => {
        if (!isLinkOrChildExpected)
            return false;
        return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.dom.containsElement(expectedElement, topElement))
            .then(containsElement => containsElement && adapter_1.adapter.dom.getNodeText(topElement))
            .then(isTopElementChildOfLink => !isTopElementChildOfLink && adapter_1.adapter.dom.getNodeText(expectedElement));
    })
        .then(shouldSearchForMultilineLink => {
        if (!shouldSearchForMultilineLink)
            return topElement;
        return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.position.getClientDimensions(expectedElement))
            .then(linkRect => findElementOrNonEmptyChildFromPoint({ x: linkRect.right - 1, y: linkRect.top + 1 }, expectedElement)
            .then(el => el || findElementOrNonEmptyChildFromPoint({ x: linkRect.left + 1, y: linkRect.bottom - 1 }, expectedElement))
            .then(el => el || topElement));
    });
}
function getElementFromPoint(point, win, expectedEl) {
    return adapter_1.adapter.getElementExceptUI(point)
        .then((topElement) => {
        // NOTE: when trying to get an element by elementFromPoint in iframe and the target
        // element is under any of shadow-ui elements, you will get null (only in IE).
        // In this case, you should hide a top window's shadow-ui root to obtain an element.
        let resChain = adapter_1.adapter.PromiseCtor.resolve(topElement);
        if (!topElement && is_window_iframe_1.default(win) && point.x > 0 && point.y > 0)
            resChain = resChain.then(() => adapter_1.adapter.getElementExceptUI(point, true));
        return resChain.then((element) => correctTopElementByExpectedElement(element, expectedEl));
    });
}
exports.default = getElementFromPoint;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,