"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../../../adapter");
const visible_element_automation_1 = __importDefault(require("../visible-element-automation"));
const delay_1 = __importDefault(require("../../../utils/delay"));
class ClickAutomation extends visible_element_automation_1.default {
    constructor(element, clickOptions, win, cursor) {
        super(element, clickOptions, win, cursor);
        this.modifiers = clickOptions.modifiers;
        this.strategy = adapter_1.adapter.automations.click.createMouseClickStrategy(this.element, clickOptions.caretPos);
    }
    _mousedown(eventArgs) {
        return this.strategy.mousedown(eventArgs);
    }
    _mouseup(element, eventArgs) {
        return this.strategy.mouseup(element, eventArgs);
    }
    run(useStrictElementCheck) {
        let eventArgs;
        return this
            ._ensureElement(useStrictElementCheck)
            .then(({ element, clientPoint, screenPoint, devicePoint }) => {
            eventArgs = {
                point: clientPoint,
                screenPoint: screenPoint,
                element: element,
                options: adapter_1.adapter.utils.extend({
                    clientX: clientPoint === null || clientPoint === void 0 ? void 0 : clientPoint.x,
                    clientY: clientPoint === null || clientPoint === void 0 ? void 0 : clientPoint.y,
                    screenX: devicePoint === null || devicePoint === void 0 ? void 0 : devicePoint.x,
                    screenY: devicePoint === null || devicePoint === void 0 ? void 0 : devicePoint.y,
                }, this.modifiers),
            };
            // NOTE: we should raise mouseup event with 'mouseActionStepDelay' after we trigger
            // mousedown event regardless of how long mousedown event handlers were executing
            return Promise.all([delay_1.default(this.automationSettings.mouseActionStepDelay), this.cursor
                    .leftButtonDown()
                    .then(() => this._mousedown(eventArgs)),
            ]);
        })
            .then(() => this.cursor.buttonUp())
            .then(() => this._getElementForEvent(eventArgs))
            .then(element => {
            return element ? this._mouseup(element, eventArgs) : null;
        });
    }
}
exports.default = ClickAutomation;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2hhcmVkL2FjdGlvbnMvYXV0b21hdGlvbnMvY2xpY2svaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBMkM7QUFFM0MsK0ZBQXlGO0FBSXpGLGlFQUF5QztBQVl6QyxNQUFxQixlQUEyQyxTQUFRLG9DQUE4QjtJQUlsRyxZQUF1QixPQUFVLEVBQUUsWUFBMEIsRUFBRSxHQUFNLEVBQUUsTUFBaUI7UUFDcEYsS0FBSyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUN4QyxJQUFJLENBQUMsUUFBUSxHQUFHLGlCQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBRU8sVUFBVSxDQUFFLFNBQTRCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVPLFFBQVEsQ0FBRSxPQUFVLEVBQUUsU0FBNEI7UUFDdEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLEdBQUcsQ0FBRSxxQkFBOEI7UUFDdkMsSUFBSSxTQUE0QixDQUFDO1FBRWpDLE9BQU8sSUFBSTthQUNOLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQzthQUNyQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7WUFDekQsU0FBUyxHQUFHO2dCQUNSLEtBQUssRUFBUSxXQUFXO2dCQUN4QixXQUFXLEVBQUUsV0FBVztnQkFDeEIsT0FBTyxFQUFNLE9BQU87Z0JBQ3BCLE9BQU8sRUFBTSxpQkFBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7b0JBQzlCLE9BQU8sRUFBRSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsQ0FBQztvQkFDdkIsT0FBTyxFQUFFLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxDQUFDO29CQUN2QixPQUFPLEVBQUUsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLENBQUM7b0JBQ3ZCLE9BQU8sRUFBRSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsQ0FBQztpQkFDMUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ1csQ0FBQztZQUdsQyxtRkFBbUY7WUFDbkYsaUZBQWlGO1lBQ2pGLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTTtxQkFDL0UsY0FBYyxFQUFFO3FCQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMxQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNsQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNaLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztDQUNKO0FBbkRELGtDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi9hZGFwdGVyJztcblxuaW1wb3J0IFZpc2libGVFbGVtZW50QXV0b21hdGlvbiwgeyBNb3VzZUV2ZW50QXJncyB9IGZyb20gJy4uL3Zpc2libGUtZWxlbWVudC1hdXRvbWF0aW9uJztcbmltcG9ydCB7IFNoYXJlZFdpbmRvdyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCBDdXJzb3IgZnJvbSAnLi4vLi4vY3Vyc29yJztcbmltcG9ydCB7IENsaWNrT3B0aW9ucywgTW9kaWZpZXJzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvb3B0aW9ucyc7XG5pbXBvcnQgZGVsYXkgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZGVsYXknO1xuaW1wb3J0IHsgTW91c2VDbGlja1N0cmF0ZWd5QmFzZSB9IGZyb20gJy4vbW91c2UtY2xpY2stc3RyYXRlZ3ktYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW91c2VDbGlja0V2ZW50U3RhdGU8RT4ge1xuICAgIG1vdXNlZG93blByZXZlbnRlZDogYm9vbGVhbjtcbiAgICBibHVyUmFpc2VkOiBib29sZWFuO1xuICAgIHNpbXVsYXRlRGVmYXVsdEJlaGF2aW9yOiBib29sZWFuO1xuICAgIGNsaWNrRWxlbWVudDogRSB8IG51bGw7XG4gICAgdG91Y2hTdGFydENhbmNlbGxlZDogYm9vbGVhbjtcbiAgICB0b3VjaEVuZENhbmNlbGxlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xpY2tBdXRvbWF0aW9uPEUsIFcgZXh0ZW5kcyBTaGFyZWRXaW5kb3c+IGV4dGVuZHMgVmlzaWJsZUVsZW1lbnRBdXRvbWF0aW9uPEUsIFc+IHtcbiAgICBwcml2YXRlIG1vZGlmaWVyczogTW9kaWZpZXJzO1xuICAgIHB1YmxpYyBzdHJhdGVneTogTW91c2VDbGlja1N0cmF0ZWd5QmFzZTxFPjtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvciAoZWxlbWVudDogRSwgY2xpY2tPcHRpb25zOiBDbGlja09wdGlvbnMsIHdpbjogVywgY3Vyc29yOiBDdXJzb3I8Vz4pIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgY2xpY2tPcHRpb25zLCB3aW4sIGN1cnNvcik7XG5cbiAgICAgICAgdGhpcy5tb2RpZmllcnMgPSBjbGlja09wdGlvbnMubW9kaWZpZXJzO1xuICAgICAgICB0aGlzLnN0cmF0ZWd5ID0gYWRhcHRlci5hdXRvbWF0aW9ucy5jbGljay5jcmVhdGVNb3VzZUNsaWNrU3RyYXRlZ3kodGhpcy5lbGVtZW50LCBjbGlja09wdGlvbnMuY2FyZXRQb3MpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX21vdXNlZG93biAoZXZlbnRBcmdzOiBNb3VzZUV2ZW50QXJnczxFPik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJhdGVneS5tb3VzZWRvd24oZXZlbnRBcmdzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9tb3VzZXVwIChlbGVtZW50OiBFLCBldmVudEFyZ3M6IE1vdXNlRXZlbnRBcmdzPEU+KTogUHJvbWlzZTxNb3VzZUV2ZW50QXJnczxFPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJhdGVneS5tb3VzZXVwKGVsZW1lbnQsIGV2ZW50QXJncyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBydW4gKHVzZVN0cmljdEVsZW1lbnRDaGVjazogYm9vbGVhbik6IFByb21pc2U8TW91c2VFdmVudEFyZ3M8RT4gfCBudWxsPiB7XG4gICAgICAgIGxldCBldmVudEFyZ3M6IE1vdXNlRXZlbnRBcmdzPEU+O1xuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAuX2Vuc3VyZUVsZW1lbnQodXNlU3RyaWN0RWxlbWVudENoZWNrKVxuICAgICAgICAgICAgLnRoZW4oKHsgZWxlbWVudCwgY2xpZW50UG9pbnQsIHNjcmVlblBvaW50LCBkZXZpY2VQb2ludCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgICAgICBwb2ludDogICAgICAgY2xpZW50UG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIHNjcmVlblBvaW50OiBzY3JlZW5Qb2ludCxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6ICAgICBhZGFwdGVyLnV0aWxzLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRYOiBjbGllbnRQb2ludD8ueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFk6IGNsaWVudFBvaW50Py55LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuWDogZGV2aWNlUG9pbnQ/LngsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5ZOiBkZXZpY2VQb2ludD8ueSxcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5tb2RpZmllcnMpLFxuICAgICAgICAgICAgICAgIH0gYXMgdW5rbm93biBhcyBNb3VzZUV2ZW50QXJnczxFPjtcblxuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugc2hvdWxkIHJhaXNlIG1vdXNldXAgZXZlbnQgd2l0aCAnbW91c2VBY3Rpb25TdGVwRGVsYXknIGFmdGVyIHdlIHRyaWdnZXJcbiAgICAgICAgICAgICAgICAvLyBtb3VzZWRvd24gZXZlbnQgcmVnYXJkbGVzcyBvZiBob3cgbG9uZyBtb3VzZWRvd24gZXZlbnQgaGFuZGxlcnMgd2VyZSBleGVjdXRpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2RlbGF5KHRoaXMuYXV0b21hdGlvblNldHRpbmdzLm1vdXNlQWN0aW9uU3RlcERlbGF5KSwgdGhpcy5jdXJzb3JcbiAgICAgICAgICAgICAgICAgICAgLmxlZnRCdXR0b25Eb3duKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fbW91c2Vkb3duKGV2ZW50QXJncykpLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuY3Vyc29yLmJ1dHRvblVwKCkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLl9nZXRFbGVtZW50Rm9yRXZlbnQoZXZlbnRBcmdzKSlcbiAgICAgICAgICAgIC50aGVuKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50ID8gdGhpcy5fbW91c2V1cChlbGVtZW50LCBldmVudEFyZ3MpIDogbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==