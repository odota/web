"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../../adapter");
const get_automation_point_1 = __importDefault(require("../utils/get-automation-point"));
const screen_point_to_client_1 = __importDefault(require("../utils/screen-point-to-client"));
const get_device_point_1 = __importDefault(require("../utils/get-device-point"));
const offsets_1 = require("../utils/offsets");
const get_element_1 = __importDefault(require("../../../shared/actions/get-element"));
const automation_errors_1 = __importDefault(require("../../../shared/errors/automation-errors"));
const settings_1 = __importDefault(require("../../../shared/actions/automations/settings"));
const move_1 = __importDefault(require("./move"));
const delay_1 = __importDefault(require("../../utils/delay"));
const event_emitter_1 = __importDefault(require("../../../shared/utils/event-emitter"));
const options_1 = require("../../../test-run/commands/options");
class ElementState {
    constructor({ element = null, clientPoint = null, screenPoint = null, isTarget = false, inMoving = false, devicePoint = null }) {
        this.element = element;
        this.clientPoint = clientPoint;
        this.screenPoint = screenPoint;
        this.devicePoint = devicePoint;
        this.isTarget = isTarget;
        this.inMoving = inMoving;
    }
    static async create({ element, clientPoint, screenPoint, isTarget, inMoving }) {
        let devicePoint = null;
        if (clientPoint)
            devicePoint = await get_device_point_1.default(clientPoint);
        const state = new ElementState({ element, clientPoint, screenPoint, isTarget, inMoving, devicePoint });
        return state;
    }
}
class VisibleElementAutomation extends event_emitter_1.default {
    constructor(element, offsetOptions, win, cursor) {
        super();
        this.TARGET_ELEMENT_FOUND_EVENT = 'automation|target-element-found-event';
        this.element = element;
        this.options = offsetOptions;
        this.automationSettings = new settings_1.default(offsetOptions.speed || 1);
        this.window = win;
        this.cursor = cursor;
        // NOTE: only for legacy API
        adapter_1.adapter.automations._ensureWindowAndCursorForLegacyTests(this);
    }
    async _getElementForEvent(eventArgs) {
        const expectedElement = await adapter_1.adapter.position.containsOffset(this.element, this.options.offsetX, this.options.offsetY) ? this.element : null;
        return get_element_1.default(eventArgs.point, this.window, expectedElement);
    }
    async _moveToElement() {
        const moveOptions = new options_1.MoveOptions(adapter_1.adapter.utils.extend({ skipScrolling: true }, this.options), false);
        const moveAutomation = await move_1.default.create(this.element, moveOptions, this.window, this.cursor);
        return moveAutomation
            .run()
            .then(() => delay_1.default(this.automationSettings.mouseActionStepDelay));
    }
    _scrollToElement() {
        let wasScrolled = false;
        const scrollOptions = new options_1.ScrollOptions(this.options, false);
        return adapter_1.adapter.scroll(this.element, scrollOptions)
            .then(scrollWasPerformed => {
            wasScrolled = scrollWasPerformed;
            return delay_1.default(this.automationSettings.mouseActionStepDelay);
        })
            .then(() => get_element_1.default(this.cursor.getPosition(), this.window))
            .then(currentElement => {
            return adapter_1.adapter.ensureMouseEventAfterScroll(currentElement, this.element, wasScrolled);
        })
            .then(() => {
            return wasScrolled;
        });
    }
    async _getElementOffset() {
        const defaultOffsets = await offsets_1.getOffsetOptions(this.element);
        let { offsetX, offsetY } = this.options;
        offsetX = offsetX || offsetX === 0 ? offsetX : defaultOffsets.offsetX;
        offsetY = offsetY || offsetY === 0 ? offsetY : defaultOffsets.offsetY;
        return { offsetX, offsetY };
    }
    async _wrapAction(action) {
        const { offsetX: x, offsetY: y } = await this._getElementOffset();
        const screenPointBeforeAction = await get_automation_point_1.default(this.element, { x, y });
        const clientPositionBeforeAction = await adapter_1.adapter.position.getClientPosition(this.element);
        await action();
        const screenPointAfterAction = await get_automation_point_1.default(this.element, { x, y });
        const clientPositionAfterAction = await adapter_1.adapter.position.getClientPosition(this.element);
        const clientPoint = await screen_point_to_client_1.default(this.element, screenPointAfterAction);
        const expectedElement = await adapter_1.adapter.position.containsOffset(this.element, x, y) ? this.element : null;
        const element = await get_element_1.default(clientPoint, this.window, expectedElement);
        if (!element) {
            return ElementState.create({
                element: null,
                clientPoint: null,
                screenPoint: null,
                isTarget: false,
                inMoving: false,
            });
        }
        let isTarget = !expectedElement || element === expectedElement || element === this.element;
        if (!isTarget) {
            // NOTE: perform an operation with searching in dom only if necessary
            isTarget = await this._contains(this.element, element);
        }
        const offsetPositionChanged = screenPointBeforeAction.x !== screenPointAfterAction.x ||
            screenPointBeforeAction.y !== screenPointAfterAction.y;
        const clientPositionChanged = clientPositionBeforeAction.x !== clientPositionAfterAction.x ||
            clientPositionBeforeAction.y !== clientPositionAfterAction.y;
        // NOTE: We consider the element moved if its offset position and client position
        // are changed both. If only client position was changed it means the page was
        // scrolled and the element keeps its position on the page. If only offset position was
        // changed it means the element is fixed on the page (it can be implemented via script).
        const targetElementIsMoving = offsetPositionChanged && clientPositionChanged;
        return ElementState.create({
            element,
            clientPoint,
            screenPoint: screenPointAfterAction,
            isTarget,
            inMoving: targetElementIsMoving,
        });
    }
    static _checkElementState(state, useStrictElementCheck) {
        if (!state.element)
            throw new Error(automation_errors_1.default.elementIsInvisibleError);
        if (useStrictElementCheck && (!state.isTarget || state.inMoving))
            throw new Error(automation_errors_1.default.foundElementIsNotTarget);
        return state;
    }
    _ensureElement(useStrictElementCheck, skipCheckAfterMoving = false, skipMoving = false) {
        return this
            ._wrapAction(() => this._scrollToElement())
            .then(state => VisibleElementAutomation._checkElementState(state, useStrictElementCheck))
            .then(state => {
            return skipMoving ? state : this._wrapAction(() => this._moveToElement());
        })
            .then(state => {
            if (!skipCheckAfterMoving)
                VisibleElementAutomation._checkElementState(state, useStrictElementCheck);
            return state;
        })
            .then(state => {
            this.emit(this.TARGET_ELEMENT_FOUND_EVENT, { element: (state === null || state === void 0 ? void 0 : state.element) || null });
            return {
                element: (state === null || state === void 0 ? void 0 : state.element) || null,
                clientPoint: (state === null || state === void 0 ? void 0 : state.clientPoint) || null,
                screenPoint: (state === null || state === void 0 ? void 0 : state.screenPoint) || null,
                devicePoint: (state === null || state === void 0 ? void 0 : state.devicePoint) || null,
            };
        });
    }
    async _contains(parent, child) {
        const parents = await adapter_1.adapter.dom.getParents(child);
        for (const el of parents) {
            if (el === parent)
                return true;
        }
        return false;
    }
}
exports.default = VisibleElementAutomation;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,