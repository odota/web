"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const axis_values_1 = __importDefault(require("../utils/values/axis-values"));
class Cursor {
    constructor(activeWin, ui) {
        this._ui = ui;
        // NOTE: the default position should be outside of the page (GH-794)
        this._x = -1;
        this._y = -1;
        this._activeWindow = activeWin;
    }
    _ensureActiveWindow(win) {
        if (this._activeWindow === win || this._activeWindow === win.parent)
            return;
        if (this._activeWindow.parent !== win)
            this._activeWindow = win;
    }
    isActive(currWin) {
        this._ensureActiveWindow(currWin);
        return this._activeWindow === currWin;
    }
    setActiveWindow(win) {
        this._activeWindow = win;
    }
    getActiveWindow(currWin) {
        this._ensureActiveWindow(currWin);
        return this._activeWindow;
    }
    getPosition() {
        return new axis_values_1.default(this._x, this._y);
    }
    move(point) {
        this._x = point.x;
        this._y = point.y;
        return this._ui.move(point);
    }
    hide() {
        if (this._ui.hide)
            return this._ui.hide();
        return adapter_1.adapter.PromiseCtor.resolve();
    }
    show() {
        if (this._ui.show)
            return this._ui.show();
        return adapter_1.adapter.PromiseCtor.resolve();
    }
    leftButtonDown() {
        return this._ui.leftButtonDown();
    }
    rightButtonDown() {
        return this._ui.rightButtonDown();
    }
    buttonUp() {
        return this._ui.buttonUp();
    }
}
exports.default = Cursor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Vyc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NoYXJlZC9hY3Rpb25zL2N1cnNvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdDQUFxQztBQUVyQyw4RUFBeUU7QUFHekUsTUFBcUIsTUFBTTtJQU12QixZQUFvQixTQUFZLEVBQUUsRUFBWTtRQUMxQyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVkLG9FQUFvRTtRQUNwRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUViLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQ25DLENBQUM7SUFFTyxtQkFBbUIsQ0FBRSxHQUFNO1FBQy9CLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxHQUFHLENBQUMsTUFBTTtZQUMvRCxPQUFPO1FBRVgsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxHQUFHO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxRQUFRLENBQUUsT0FBVTtRQUN2QixJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEMsT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLE9BQU8sQ0FBQztJQUMxQyxDQUFDO0lBRU0sZUFBZSxDQUFFLEdBQU07UUFDMUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUVNLGVBQWUsQ0FBRSxPQUFVO1FBQzlCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVsQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVNLFdBQVc7UUFDZCxPQUFPLElBQUkscUJBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sSUFBSSxDQUFFLEtBQTZCO1FBQ3RDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFbEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sSUFBSTtRQUNQLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1lBQ2IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTNCLE9BQU8saUJBQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVNLElBQUk7UUFDUCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSTtZQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUzQixPQUFPLGlCQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU0sZUFBZTtRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBNUVELHlCQTRFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkYXB0ZXIgfSBmcm9tICcuLi9hZGFwdGVyJztcbmltcG9ydCB7IEN1cnNvclVJIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgQXhpc1ZhbHVlcywgeyBBeGlzVmFsdWVzRGF0YSB9IGZyb20gJy4uL3V0aWxzL3ZhbHVlcy9heGlzLXZhbHVlcyc7XG5pbXBvcnQgeyBTaGFyZWRXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnNvcjxXIGV4dGVuZHMgU2hhcmVkV2luZG93PiB7XG4gICAgcHJpdmF0ZSBfYWN0aXZlV2luZG93OiBXO1xuICAgIHByaXZhdGUgX3g6IG51bWJlcjtcbiAgICBwcml2YXRlIF95OiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdWk6IEN1cnNvclVJO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChhY3RpdmVXaW46IFcsIHVpOiBDdXJzb3JVSSkge1xuICAgICAgICB0aGlzLl91aSA9IHVpO1xuXG4gICAgICAgIC8vIE5PVEU6IHRoZSBkZWZhdWx0IHBvc2l0aW9uIHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBwYWdlIChHSC03OTQpXG4gICAgICAgIHRoaXMuX3ggPSAtMTtcbiAgICAgICAgdGhpcy5feSA9IC0xO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVdpbmRvdyA9IGFjdGl2ZVdpbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbnN1cmVBY3RpdmVXaW5kb3cgKHdpbjogVyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlV2luZG93ID09PSB3aW4gfHwgdGhpcy5fYWN0aXZlV2luZG93ID09PSB3aW4ucGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVXaW5kb3cucGFyZW50ICE9PSB3aW4pXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVXaW5kb3cgPSB3aW47XG4gICAgfVxuXG4gICAgcHVibGljIGlzQWN0aXZlIChjdXJyV2luOiBXKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUFjdGl2ZVdpbmRvdyhjdXJyV2luKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlV2luZG93ID09PSBjdXJyV2luO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBY3RpdmVXaW5kb3cgKHdpbjogVyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hY3RpdmVXaW5kb3cgPSB3aW47XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFjdGl2ZVdpbmRvdyAoY3VycldpbjogVyk6IFcge1xuICAgICAgICB0aGlzLl9lbnN1cmVBY3RpdmVXaW5kb3coY3Vycldpbik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVdpbmRvdztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UG9zaXRpb24gKCk6IEF4aXNWYWx1ZXM8bnVtYmVyPiB7XG4gICAgICAgIHJldHVybiBuZXcgQXhpc1ZhbHVlcyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZSAocG9pbnQ6IEF4aXNWYWx1ZXNEYXRhPG51bWJlcj4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5feCA9IHBvaW50Lng7XG4gICAgICAgIHRoaXMuX3kgPSBwb2ludC55O1xuXG4gICAgICAgIHJldHVybiB0aGlzLl91aS5tb3ZlKHBvaW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLl91aS5oaWRlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VpLmhpZGUoKTtcblxuICAgICAgICByZXR1cm4gYWRhcHRlci5Qcm9taXNlQ3Rvci5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3cgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy5fdWkuc2hvdylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91aS5zaG93KCk7XG5cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuUHJvbWlzZUN0b3IucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsZWZ0QnV0dG9uRG93biAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl91aS5sZWZ0QnV0dG9uRG93bigpO1xuICAgIH1cblxuICAgIHB1YmxpYyByaWdodEJ1dHRvbkRvd24gKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdWkucmlnaHRCdXR0b25Eb3duKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGJ1dHRvblVwICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VpLmJ1dHRvblVwKCk7XG4gICAgfVxufVxuIl19