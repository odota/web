"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const event_emitter_1 = __importDefault(require("../utils/event-emitter"));
const delay_1 = __importDefault(require("../utils/delay"));
const promise_1 = require("../utils/promise");
const automation_errors_1 = __importDefault(require("../errors/automation-errors"));
const errors_1 = require("../../shared/errors");
const elements_retriever_1 = __importDefault(require("../utils/elements-retriever"));
const MAX_DELAY_AFTER_EXECUTION = 2000;
const CHECK_ELEMENT_IN_AUTOMATIONS_INTERVAL = 250;
class ActionExecutor extends event_emitter_1.default {
    constructor(command, globalSelectorTimeout, testSpeed, executeSelectorFn) {
        var _a;
        super();
        this._command = command;
        this._targetElement = null;
        this._elements = [];
        this._globalSelectorTimeout = globalSelectorTimeout;
        this._executionStartTime = 0;
        this._executeSelectorFn = executeSelectorFn;
        // TODO: move it to the server
        // @ts-ignore
        if (command.options && !command.options.speed) // @ts-ignore
            command.options.speed = testSpeed;
        // TODO: and this
        // @ts-ignore
        this._commandSelectorTimeout = typeof ((_a = command.selector) === null || _a === void 0 ? void 0 : _a.timeout) === 'number' ? command.selector.timeout : globalSelectorTimeout;
    }
    _delayAfterExecution() {
        // @ts-ignore TODO
        if (!this._command.options || this._command.options.speed === 1)
            return adapter_1.adapter.PromiseCtor.resolve();
        // @ts-ignore TODO
        return delay_1.default((1 - this._command.options.speed) * MAX_DELAY_AFTER_EXECUTION);
    }
    _isExecutionTimeoutExpired() {
        return adapter_1.adapter.nativeMethods.dateNow() - this._executionStartTime >= this._commandSelectorTimeout;
    }
    _ensureCommandArguments() {
        const handler = ActionExecutor.ACTIONS_HANDLERS[this._command.type];
        if (!(handler === null || handler === void 0 ? void 0 : handler.ensureCmdArgs))
            return;
        handler.ensureCmdArgs(this._command);
    }
    _ensureCommandElements() {
        var _a;
        const elsRetriever = new elements_retriever_1.default(this._globalSelectorTimeout, this._executeSelectorFn);
        if (this._command.selector)
            // @ts-ignore TODO
            elsRetriever.push(this._command.selector);
        const additionalSelectorProps = (_a = ActionExecutor.ACTIONS_HANDLERS[this._command.type]) === null || _a === void 0 ? void 0 : _a.additionalSelectorProps;
        if (additionalSelectorProps) {
            for (const prop of additionalSelectorProps) {
                if (this._command[prop])
                    // @ts-ignore TODO
                    elsRetriever.push(this._command[prop], prop);
            }
        }
        return elsRetriever.getElements()
            .then(elements => {
            this._elements = elements;
        });
    }
    _ensureCommandElementsProperties() {
        const handler = ActionExecutor.ACTIONS_HANDLERS[this._command.type];
        if (!(handler === null || handler === void 0 ? void 0 : handler.ensureElsProps))
            return;
        handler.ensureElsProps(this._elements);
    }
    async _ensureCommandOptions() {
        const opts = this._command.options;
        // @ts-ignore TODO
        if (this._elements.length && opts && 'offsetX' in opts && 'offsetY' in opts) { // @ts-ignore
            const { offsetX, offsetY } = await adapter_1.adapter.getOffsetOptions(this._elements[0], opts.offsetX, opts.offsetY);
            // @ts-ignore TODO
            opts.offsetX = offsetX;
            // @ts-ignore TODO
            opts.offsetY = offsetY;
        }
    }
    _createAutomation() {
        const handler = ActionExecutor.ACTIONS_HANDLERS[this._command.type];
        if (!handler)
            throw new Error(`There is no handler for the "${this._command.type}" command.`);
        return handler.create(this._command, this._elements);
    }
    _runAction(strictElementCheck) {
        return this._ensureCommandElements()
            .then(() => this._ensureCommandElementsProperties())
            .then(() => this._ensureCommandOptions())
            .then(() => {
            const automation = this._createAutomation();
            if (automation.TARGET_ELEMENT_FOUND_EVENT) {
                automation.on(automation.TARGET_ELEMENT_FOUND_EVENT, e => {
                    this._targetElement = e.element;
                    this.emit(ActionExecutor.EXECUTION_STARTED_EVENT);
                });
            }
            else
                this.emit(ActionExecutor.EXECUTION_STARTED_EVENT);
            return automation.run(strictElementCheck);
        });
    }
    _runRecursively() {
        let actionFinished = false;
        let strictElementCheck = true;
        return promise_1.whilst(() => !actionFinished, () => {
            return this._runAction(strictElementCheck)
                .then(() => {
                actionFinished = true;
            })
                .catch(err => {
                if (!this._isExecutionTimeoutExpired())
                    return delay_1.default(CHECK_ELEMENT_IN_AUTOMATIONS_INTERVAL);
                if (err.message === automation_errors_1.default.foundElementIsNotTarget) {
                    // If we can't get a target element via elementFromPoint but it's
                    // visible we click on the point where the element is located.
                    strictElementCheck = false;
                    return adapter_1.adapter.PromiseCtor.resolve();
                }
                throw err.message === automation_errors_1.default.elementIsInvisibleError ?
                    new errors_1.ActionElementIsInvisibleError() : err;
            });
        });
    }
    execute(barriers) {
        this._executionStartTime = adapter_1.adapter.nativeMethods.dateNow();
        try {
            // TODO: I think that this check is unnecessary here. It checks only a key sequence of the pressKey command.
            // This check can be moved to the server.
            this._ensureCommandArguments();
        }
        catch (err) {
            return adapter_1.adapter.PromiseCtor.reject(err);
        }
        this.emit(ActionExecutor.WAITING_FOR_ELEMENT_EVENT, this._commandSelectorTimeout);
        return this._runRecursively()
            .then(() => Promise.all([
            this._delayAfterExecution(),
            barriers.wait(),
        ]))
            .then(() => {
            const elements = [...this._elements];
            if (this._targetElement)
                elements[0] = this._targetElement;
            return elements;
        });
    }
}
exports.default = ActionExecutor;
ActionExecutor.EXECUTION_STARTED_EVENT = 'execution-started';
ActionExecutor.WAITING_FOR_ELEMENT_EVENT = 'waiting-for-elements';
ActionExecutor.ACTIONS_HANDLERS = {};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,