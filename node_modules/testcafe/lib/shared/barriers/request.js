"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const delay_1 = __importDefault(require("../../utils/delay"));
const REQUESTS_COLLECTION_DELAY_DEFAULT = 50;
class RequestBarrier {
    constructor(emitter, delays = {}) {
        var _a, _b, _c;
        this._delays = {
            requestsCollection: (_a = delays.requestsCollection) !== null && _a !== void 0 ? _a : REQUESTS_COLLECTION_DELAY_DEFAULT,
            additionalRequestsCollection: (_b = delays.additionalRequestsCollection) !== null && _b !== void 0 ? _b : REQUESTS_COLLECTION_DELAY_DEFAULT,
            pageInitialRequestsCollection: (_c = delays.pageInitialRequestsCollection) !== null && _c !== void 0 ? _c : REQUESTS_COLLECTION_DELAY_DEFAULT,
        };
        this._emitter = emitter;
        this._waitResolve = null;
        this._watchdog = null;
        this._requests = new Set();
        this._collectingReqs = true;
        this._startListening();
    }
    _startListening() {
        this._emitter.onRequestSend((req) => this._onRequestSend(req));
        this._emitter.onRequestCompleted((req) => this._onRequestCompleted(req));
        this._emitter.onRequestError((req) => this._onRequestError(req));
    }
    _offListening() {
        this._emitter.offAll();
    }
    _onRequestSend(req) {
        if (this._collectingReqs)
            this._requests.add(req);
    }
    _onRequestCompleted(req) {
        // NOTE: let the last real XHR handler finish its job and try to obtain
        // any additional requests if they were initiated by this handler
        delay_1.default(this._delays.additionalRequestsCollection)
            .then(() => this._onRequestFinished(req));
    }
    _onRequestFinished(req) {
        if (!this._requests.has(req))
            return;
        this._requests.delete(req);
        if (!this._collectingReqs && !this._requests.size && this._watchdog)
            this._finishWaiting();
    }
    _onRequestError(req) {
        this._onRequestFinished(req);
    }
    _finishWaiting() {
        if (this._watchdog) {
            const clearTimeout = adapter_1.adapter.nativeMethods.clearTimeout;
            clearTimeout(this._watchdog);
            this._watchdog = null;
        }
        this._requests.clear();
        this._offListening();
        this._waitResolve(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
    }
    wait(isPageLoad) {
        return delay_1.default(isPageLoad ? this._delays.pageInitialRequestsCollection : this._delays.requestsCollection)
            .then(() => new adapter_1.adapter.PromiseCtor((resolve) => {
            this._collectingReqs = false;
            this._waitResolve = resolve;
            if (!this._requests.size) {
                this._finishWaiting();
                return;
            }
            const setTimeout = adapter_1.adapter.nativeMethods.setTimeout;
            this._watchdog = setTimeout(() => this._finishWaiting(), RequestBarrier.TIMEOUT);
        }));
    }
}
exports.default = RequestBarrier;
RequestBarrier.TIMEOUT = 3000;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,