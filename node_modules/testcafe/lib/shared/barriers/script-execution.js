"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const delay_1 = __importDefault(require("../utils/delay"));
const WAIT_FOR_NEW_SCRIPTS_DELAY = 25;
class ScriptExecutionBarrier {
    constructor(emitter) {
        this._emitter = emitter;
        this._watchdog = null;
        this._waitResolve = null;
        this._scripts = new Map();
        this._startListening();
    }
    _startListening() {
        this._emitter.onScriptAdded((script) => this._onScriptElementAdded(script));
        this._emitter.onScriptLoadedOrFailed((script) => this._onScriptLoadedOrFailed(script));
    }
    _offListening() {
        this._emitter.offAll();
    }
    _onScriptElementAdded(script) {
        const setTimeout = adapter_1.adapter.nativeMethods.setTimeout;
        const timeoutFn = () => this._onScriptLoadedOrFailed(script, true);
        const loadingTimeout = setTimeout(timeoutFn, ScriptExecutionBarrier.LOADING_TIMEOUT);
        this._scripts.set(script, loadingTimeout);
    }
    _onScriptLoadedOrFailed(script, isTimeout = false) {
        if (!this._scripts.has(script))
            return;
        if (!isTimeout) {
            const clearTimeout = adapter_1.adapter.nativeMethods.clearTimeout;
            clearTimeout(this._scripts.get(script));
        }
        this._scripts.delete(script);
        if (this._scripts.size)
            return;
        delay_1.default(WAIT_FOR_NEW_SCRIPTS_DELAY)
            .then(() => {
            if (this._waitResolve && !this._scripts.size)
                this._finishWaiting();
        });
    }
    _finishWaiting() {
        if (this._watchdog) {
            const clearTimeout = adapter_1.adapter.nativeMethods.clearTimeout;
            clearTimeout(this._watchdog);
            this._watchdog = null;
        }
        this._scripts.clear();
        this._offListening();
        this._waitResolve(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
        this._waitResolve = null;
    }
    wait() {
        return new adapter_1.adapter.PromiseCtor((resolve) => {
            this._waitResolve = resolve;
            if (!this._scripts.size) {
                this._finishWaiting();
                return;
            }
            const setTimeout = adapter_1.adapter.nativeMethods.setTimeout;
            this._watchdog = setTimeout(() => this._finishWaiting(), ScriptExecutionBarrier.TIMEOUT);
        });
    }
}
exports.default = ScriptExecutionBarrier;
ScriptExecutionBarrier.TIMEOUT = 3000;
ScriptExecutionBarrier.LOADING_TIMEOUT = 2000;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFyZWQvYmFycmllcnMvc2NyaXB0LWV4ZWN1dGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdDQUFxQztBQUNyQywyREFBbUM7QUFNbkMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFFdEMsTUFBcUIsc0JBQXNCO0lBU3ZDLFlBQW9CLE9BQWtDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQU8sT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQU0sSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVPLGVBQWU7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxNQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFTyxhQUFhO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVPLHFCQUFxQixDQUFFLE1BQVM7UUFDcEMsTUFBTSxVQUFVLEdBQU8saUJBQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQ3hELE1BQU0sU0FBUyxHQUFRLEdBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUUsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVyRixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVPLHVCQUF1QixDQUFFLE1BQVMsRUFBRSxTQUFTLEdBQUcsS0FBSztRQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQzFCLE9BQU87UUFFWCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osTUFBTSxZQUFZLEdBQUcsaUJBQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBRXhELFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQWlCLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1lBQ2xCLE9BQU87UUFFWCxlQUFLLENBQUMsMEJBQTBCLENBQUM7YUFDNUIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNQLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVPLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLE1BQU0sWUFBWSxHQUFHLGlCQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztZQUV4RCxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQWEsRUFBRSxDQUFDLENBQUMsK0RBQStEO1FBRXJGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFTSxJQUFJO1FBQ1AsT0FBTyxJQUFJLGlCQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBbUIsRUFBRSxFQUFFO1lBQ25ELElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1lBRTVCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtnQkFDckIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUV0QixPQUFPO2FBQ1Y7WUFFRCxNQUFNLFVBQVUsR0FBRyxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFFcEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdGLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUF2RkwseUNBd0ZDO0FBdkYyQiw4QkFBTyxHQUFHLElBQUksQ0FBQztBQUNmLHNDQUFlLEdBQUcsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXInO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4uL3V0aWxzL2RlbGF5JztcbmltcG9ydCB7IFNjcmlwdEV4ZWN1dGlvbkVtaXR0ZXIsIE5hdGl2ZU1ldGhvZHMgfSBmcm9tICcuLi90eXBlcyc7XG5cblxudHlwZSBUaW1lb3V0TGFiZWwgPSBSZXR1cm5UeXBlPE5hdGl2ZU1ldGhvZHNbJ3NldFRpbWVvdXQnXT47XG5cbmNvbnN0IFdBSVRfRk9SX05FV19TQ1JJUFRTX0RFTEFZID0gMjU7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmlwdEV4ZWN1dGlvbkJhcnJpZXI8Uz4ge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRJTUVPVVQgPSAzMDAwO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExPQURJTkdfVElNRU9VVCA9IDIwMDA7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbWl0dGVyOiBTY3JpcHRFeGVjdXRpb25FbWl0dGVyPFM+O1xuICAgIHByaXZhdGUgX3dhaXRSZXNvbHZlOiAoKCkgPT4gdm9pZCkgfCBudWxsO1xuICAgIHByaXZhdGUgX3dhdGNoZG9nOiBUaW1lb3V0TGFiZWwgfCBudWxsO1xuICAgIHByaXZhdGUgX3NjcmlwdHM6IE1hcDxTLCBUaW1lb3V0TGFiZWw+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChlbWl0dGVyOiBTY3JpcHRFeGVjdXRpb25FbWl0dGVyPFM+KSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgICAgID0gZW1pdHRlcjtcbiAgICAgICAgdGhpcy5fd2F0Y2hkb2cgICAgPSBudWxsO1xuICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NjcmlwdHMgICAgID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0TGlzdGVuaW5nKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc3RhcnRMaXN0ZW5pbmcgKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uU2NyaXB0QWRkZWQoKHNjcmlwdDogUykgPT4gdGhpcy5fb25TY3JpcHRFbGVtZW50QWRkZWQoc2NyaXB0KSk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub25TY3JpcHRMb2FkZWRPckZhaWxlZCgoc2NyaXB0OiBTKSA9PiB0aGlzLl9vblNjcmlwdExvYWRlZE9yRmFpbGVkKHNjcmlwdCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29mZkxpc3RlbmluZyAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub2ZmQWxsKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25TY3JpcHRFbGVtZW50QWRkZWQgKHNjcmlwdDogUyk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZXRUaW1lb3V0ICAgICA9IGFkYXB0ZXIubmF0aXZlTWV0aG9kcy5zZXRUaW1lb3V0O1xuICAgICAgICBjb25zdCB0aW1lb3V0Rm4gICAgICA9ICgpOiB2b2lkID0+IHRoaXMuX29uU2NyaXB0TG9hZGVkT3JGYWlsZWQoc2NyaXB0LCB0cnVlKTtcbiAgICAgICAgY29uc3QgbG9hZGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRpbWVvdXRGbiwgU2NyaXB0RXhlY3V0aW9uQmFycmllci5MT0FESU5HX1RJTUVPVVQpO1xuXG4gICAgICAgIHRoaXMuX3NjcmlwdHMuc2V0KHNjcmlwdCwgbG9hZGluZ1RpbWVvdXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uU2NyaXB0TG9hZGVkT3JGYWlsZWQgKHNjcmlwdDogUywgaXNUaW1lb3V0ID0gZmFsc2UpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zY3JpcHRzLmhhcyhzY3JpcHQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICghaXNUaW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCBjbGVhclRpbWVvdXQgPSBhZGFwdGVyLm5hdGl2ZU1ldGhvZHMuY2xlYXJUaW1lb3V0O1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fc2NyaXB0cy5nZXQoc2NyaXB0KSBhcyBUaW1lb3V0TGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2NyaXB0cy5kZWxldGUoc2NyaXB0KTtcblxuICAgICAgICBpZiAodGhpcy5fc2NyaXB0cy5zaXplKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGRlbGF5KFdBSVRfRk9SX05FV19TQ1JJUFRTX0RFTEFZKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl93YWl0UmVzb2x2ZSAmJiAhdGhpcy5fc2NyaXB0cy5zaXplKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hXYWl0aW5nKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9maW5pc2hXYWl0aW5nICgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhdGNoZG9nKSB7XG4gICAgICAgICAgICBjb25zdCBjbGVhclRpbWVvdXQgPSBhZGFwdGVyLm5hdGl2ZU1ldGhvZHMuY2xlYXJUaW1lb3V0O1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fd2F0Y2hkb2cpO1xuXG4gICAgICAgICAgICB0aGlzLl93YXRjaGRvZyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zY3JpcHRzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX29mZkxpc3RlbmluZygpO1xuICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSEoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG5cbiAgICAgICAgdGhpcy5fd2FpdFJlc29sdmUgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyB3YWl0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBhZGFwdGVyLlByb21pc2VDdG9yKChyZXNvbHZlOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSA9IHJlc29sdmU7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fc2NyaXB0cy5zaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoV2FpdGluZygpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzZXRUaW1lb3V0ID0gYWRhcHRlci5uYXRpdmVNZXRob2RzLnNldFRpbWVvdXQ7XG5cbiAgICAgICAgICAgIHRoaXMuX3dhdGNoZG9nID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLl9maW5pc2hXYWl0aW5nKCksIFNjcmlwdEV4ZWN1dGlvbkJhcnJpZXIuVElNRU9VVCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==