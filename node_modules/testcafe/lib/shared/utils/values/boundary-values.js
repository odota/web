"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BoundaryValues {
    constructor(top = 0, right = 0, bottom = 0, left = 0) {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    static create(v) {
        return new BoundaryValues(v.top, v.right, v.bottom, v.left);
    }
    add(d) {
        this.top += d.top;
        this.right += d.right;
        this.bottom += d.bottom;
        this.left += d.left;
        return this;
    }
    sub(d) {
        if ('top' in d) {
            this.top -= d.top;
            this.left -= d.left;
        }
        this.bottom -= d.bottom;
        this.right -= d.right;
        return this;
    }
    round(leftTopRound = Math.round, rightBottomRound = leftTopRound) {
        this.top = leftTopRound(this.top);
        this.right = rightBottomRound(this.right);
        this.bottom = rightBottomRound(this.bottom);
        this.left = leftTopRound(this.left);
        return this;
    }
    contains(point) {
        return point.x >= this.left && point.x <= this.right && point.y >= this.top && point.y <= this.bottom;
    }
}
exports.default = BoundaryValues;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRhcnktdmFsdWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NoYXJlZC91dGlscy92YWx1ZXMvYm91bmRhcnktdmFsdWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EsTUFBcUIsY0FBYztJQU0vQixZQUFvQixHQUFHLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQztRQUN4RCxJQUFJLENBQUMsR0FBRyxHQUFNLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFJLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFLLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFxQjtRQUN2QyxPQUFPLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU0sR0FBRyxDQUFFLENBQXFCO1FBQzdCLElBQUksQ0FBQyxHQUFHLElBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxJQUFLLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLElBQU0sQ0FBQyxDQUFDLElBQUksQ0FBQztRQUV0QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sR0FBRyxDQUFFLENBQWlEO1FBQ3pELElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxHQUFHLElBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUNuQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDdkI7UUFFRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssSUFBSyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRXZCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxLQUFLLENBQUUsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEdBQUcsWUFBWTtRQUNwRSxJQUFJLENBQUMsR0FBRyxHQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksR0FBSyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxRQUFRLENBQUUsS0FBeUI7UUFDdEMsT0FBTyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDMUcsQ0FBQztDQUNKO0FBbERELGlDQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBeGlzVmFsdWVzLCB7IFJpZ2h0Qm90dG9tVmFsdWVzIH0gZnJvbSAnLi9heGlzLXZhbHVlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm91bmRhcnlWYWx1ZXNEYXRhIHtcbiAgICB0b3A6IG51bWJlcjtcbiAgICByaWdodDogbnVtYmVyO1xuICAgIGJvdHRvbTogbnVtYmVyO1xuICAgIGxlZnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm91bmRhcnlWYWx1ZXMgaW1wbGVtZW50cyBCb3VuZGFyeVZhbHVlc0RhdGEge1xuICAgIHB1YmxpYyB0b3A6IG51bWJlcjtcbiAgICBwdWJsaWMgcmlnaHQ6IG51bWJlcjtcbiAgICBwdWJsaWMgYm90dG9tOiBudW1iZXI7XG4gICAgcHVibGljIGxlZnQ6IG51bWJlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAodG9wID0gMCwgcmlnaHQgPSAwLCBib3R0b20gPSAwLCBsZWZ0ID0gMCkge1xuICAgICAgICB0aGlzLnRvcCAgICA9IHRvcDtcbiAgICAgICAgdGhpcy5yaWdodCAgPSByaWdodDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSBib3R0b207XG4gICAgICAgIHRoaXMubGVmdCAgID0gbGVmdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSAodjogQm91bmRhcnlWYWx1ZXNEYXRhKTogQm91bmRhcnlWYWx1ZXMge1xuICAgICAgICByZXR1cm4gbmV3IEJvdW5kYXJ5VmFsdWVzKHYudG9wLCB2LnJpZ2h0LCB2LmJvdHRvbSwgdi5sZWZ0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkIChkOiBCb3VuZGFyeVZhbHVlc0RhdGEpOiB0aGlzIHtcbiAgICAgICAgdGhpcy50b3AgICAgKz0gZC50b3A7XG4gICAgICAgIHRoaXMucmlnaHQgICs9IGQucmlnaHQ7XG4gICAgICAgIHRoaXMuYm90dG9tICs9IGQuYm90dG9tO1xuICAgICAgICB0aGlzLmxlZnQgICArPSBkLmxlZnQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHN1YiAoZDogQm91bmRhcnlWYWx1ZXNEYXRhIHwgUmlnaHRCb3R0b21WYWx1ZXM8bnVtYmVyPik6IHRoaXMge1xuICAgICAgICBpZiAoJ3RvcCcgaW4gZCkge1xuICAgICAgICAgICAgdGhpcy50b3AgIC09IGQudG9wO1xuICAgICAgICAgICAgdGhpcy5sZWZ0IC09IGQubGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYm90dG9tIC09IGQuYm90dG9tO1xuICAgICAgICB0aGlzLnJpZ2h0ICAtPSBkLnJpZ2h0O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyByb3VuZCAobGVmdFRvcFJvdW5kID0gTWF0aC5yb3VuZCwgcmlnaHRCb3R0b21Sb3VuZCA9IGxlZnRUb3BSb3VuZCk6IHRoaXMge1xuICAgICAgICB0aGlzLnRvcCAgICA9IGxlZnRUb3BSb3VuZCh0aGlzLnRvcCk7XG4gICAgICAgIHRoaXMucmlnaHQgID0gcmlnaHRCb3R0b21Sb3VuZCh0aGlzLnJpZ2h0KTtcbiAgICAgICAgdGhpcy5ib3R0b20gPSByaWdodEJvdHRvbVJvdW5kKHRoaXMuYm90dG9tKTtcbiAgICAgICAgdGhpcy5sZWZ0ICAgPSBsZWZ0VG9wUm91bmQodGhpcy5sZWZ0KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY29udGFpbnMgKHBvaW50OiBBeGlzVmFsdWVzPG51bWJlcj4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHBvaW50LnggPj0gdGhpcy5sZWZ0ICYmIHBvaW50LnggPD0gdGhpcy5yaWdodCAmJiBwb2ludC55ID49IHRoaXMudG9wICYmIHBvaW50LnkgPD0gdGhpcy5ib3R0b207XG4gICAgfVxufVxuIl19