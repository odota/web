"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const position_1 = require("./position");
const axis_values_1 = __importDefault(require("./values/axis-values"));
function findIntersectionHorizontal(startLinePoint, endLinePoint, rectSide) {
    const intersectionX = position_1.getLineXByYCoord(startLinePoint, endLinePoint, rectSide.top);
    const haveIntersectionInBounds = intersectionX && intersectionX >= rectSide.left && intersectionX <= rectSide.right;
    return haveIntersectionInBounds ? new axis_values_1.default(intersectionX, rectSide.top) : null;
}
function findIntersectionVertical(startLinePoint, endLinePoint, rectSide) {
    const intersectionY = position_1.getLineYByXCoord(startLinePoint, endLinePoint, rectSide.left);
    const haveIntersectionInBounds = intersectionY && intersectionY >= rectSide.top && intersectionY <= rectSide.bottom;
    return haveIntersectionInBounds ? new axis_values_1.default(rectSide.left, intersectionY) : null;
}
function default_1(startLine, endLine, rect) {
    const res = [];
    const rectLines = [
        { left: rect.left, top: rect.top, right: rect.left, bottom: rect.bottom, isHorizontal: false },
        { left: rect.right, top: rect.top, right: rect.right, bottom: rect.bottom, isHorizontal: false },
        { left: rect.left, top: rect.top, right: rect.right, bottom: rect.top, isHorizontal: true },
        { left: rect.left, top: rect.bottom, right: rect.right, bottom: rect.bottom, isHorizontal: true },
    ];
    for (const rectLine of rectLines) {
        const intersection = rectLine.isHorizontal
            ? findIntersectionHorizontal(startLine, endLine, rectLine)
            : findIntersectionVertical(startLine, endLine, rectLine);
        if (intersection)
            res.push(intersection);
    }
    if (!res.length)
        return null;
    if (res.length === 1)
        return res[0];
    // NOTE: if a line and rect have two intersection points, we return the nearest to startLinePoint
    return res[0].distance(startLine) < res[1].distance(startLine) ? res[0] : res[1];
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWxpbmUtcmVjdC1pbnRlcnNlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hhcmVkL3V0aWxzL2dldC1saW5lLXJlY3QtaW50ZXJzZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBQWdFO0FBRWhFLHVFQUFrRTtBQUdsRSxTQUFTLDBCQUEwQixDQUFFLGNBQXNDLEVBQUUsWUFBb0MsRUFBRSxRQUE0QjtJQUMzSSxNQUFNLGFBQWEsR0FBYywyQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5RixNQUFNLHdCQUF3QixHQUFHLGFBQWEsSUFBSSxhQUFhLElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxhQUFhLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztJQUVwSCxPQUFPLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxJQUFJLHFCQUFVLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3pGLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFFLGNBQXNDLEVBQUUsWUFBb0MsRUFBRSxRQUE0QjtJQUN6SSxNQUFNLGFBQWEsR0FBYywyQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRixNQUFNLHdCQUF3QixHQUFHLGFBQWEsSUFBSSxhQUFhLElBQUksUUFBUSxDQUFDLEdBQUcsSUFBSSxhQUFhLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUVwSCxPQUFPLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxJQUFJLHFCQUFVLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzFGLENBQUM7QUFFRCxtQkFBeUIsU0FBNkIsRUFBRSxPQUEyQixFQUFFLElBQXdCO0lBQ3pHLE1BQU0sR0FBRyxHQUFTLEVBQUUsQ0FBQztJQUNyQixNQUFNLFNBQVMsR0FBRztRQUNkLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRTtRQUM5RixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUU7UUFDaEcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFO1FBQzNGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRTtLQUNwRyxDQUFDO0lBRUYsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFlBQVk7WUFDdEMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDO1lBQzFELENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTdELElBQUksWUFBWTtZQUNaLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDOUI7SUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQztJQUVoQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUNoQixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsQixpR0FBaUc7SUFDakcsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUExQkQsNEJBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TGluZVhCeVlDb29yZCwgZ2V0TGluZVlCeVhDb29yZCB9IGZyb20gJy4vcG9zaXRpb24nO1xuaW1wb3J0IHsgQm91bmRhcnlWYWx1ZXNEYXRhIH0gZnJvbSAnLi92YWx1ZXMvYm91bmRhcnktdmFsdWVzJztcbmltcG9ydCBBeGlzVmFsdWVzLCB7IEF4aXNWYWx1ZXNEYXRhIH0gZnJvbSAnLi92YWx1ZXMvYXhpcy12YWx1ZXMnO1xuXG5cbmZ1bmN0aW9uIGZpbmRJbnRlcnNlY3Rpb25Ib3Jpem9udGFsIChzdGFydExpbmVQb2ludDogQXhpc1ZhbHVlc0RhdGE8bnVtYmVyPiwgZW5kTGluZVBvaW50OiBBeGlzVmFsdWVzRGF0YTxudW1iZXI+LCByZWN0U2lkZTogQm91bmRhcnlWYWx1ZXNEYXRhKTogQXhpc1ZhbHVlczxudW1iZXI+IHwgbnVsbCB7XG4gICAgY29uc3QgaW50ZXJzZWN0aW9uWCAgICAgICAgICAgID0gZ2V0TGluZVhCeVlDb29yZChzdGFydExpbmVQb2ludCwgZW5kTGluZVBvaW50LCByZWN0U2lkZS50b3ApO1xuICAgIGNvbnN0IGhhdmVJbnRlcnNlY3Rpb25JbkJvdW5kcyA9IGludGVyc2VjdGlvblggJiYgaW50ZXJzZWN0aW9uWCA+PSByZWN0U2lkZS5sZWZ0ICYmIGludGVyc2VjdGlvblggPD0gcmVjdFNpZGUucmlnaHQ7XG5cbiAgICByZXR1cm4gaGF2ZUludGVyc2VjdGlvbkluQm91bmRzID8gbmV3IEF4aXNWYWx1ZXMoaW50ZXJzZWN0aW9uWCwgcmVjdFNpZGUudG9wKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbnRlcnNlY3Rpb25WZXJ0aWNhbCAoc3RhcnRMaW5lUG9pbnQ6IEF4aXNWYWx1ZXNEYXRhPG51bWJlcj4sIGVuZExpbmVQb2ludDogQXhpc1ZhbHVlc0RhdGE8bnVtYmVyPiwgcmVjdFNpZGU6IEJvdW5kYXJ5VmFsdWVzRGF0YSk6IEF4aXNWYWx1ZXM8bnVtYmVyPiB8IG51bGwge1xuICAgIGNvbnN0IGludGVyc2VjdGlvblkgICAgICAgICAgICA9IGdldExpbmVZQnlYQ29vcmQoc3RhcnRMaW5lUG9pbnQsIGVuZExpbmVQb2ludCwgcmVjdFNpZGUubGVmdCk7XG4gICAgY29uc3QgaGF2ZUludGVyc2VjdGlvbkluQm91bmRzID0gaW50ZXJzZWN0aW9uWSAmJiBpbnRlcnNlY3Rpb25ZID49IHJlY3RTaWRlLnRvcCAmJiBpbnRlcnNlY3Rpb25ZIDw9IHJlY3RTaWRlLmJvdHRvbTtcblxuICAgIHJldHVybiBoYXZlSW50ZXJzZWN0aW9uSW5Cb3VuZHMgPyBuZXcgQXhpc1ZhbHVlcyhyZWN0U2lkZS5sZWZ0LCBpbnRlcnNlY3Rpb25ZKSA6IG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGFydExpbmU6IEF4aXNWYWx1ZXM8bnVtYmVyPiwgZW5kTGluZTogQXhpc1ZhbHVlczxudW1iZXI+LCByZWN0OiBCb3VuZGFyeVZhbHVlc0RhdGEpOiBBeGlzVmFsdWVzPG51bWJlcj4gfCBudWxsIHtcbiAgICBjb25zdCByZXMgICAgICAgPSBbXTtcbiAgICBjb25zdCByZWN0TGluZXMgPSBbXG4gICAgICAgIHsgbGVmdDogcmVjdC5sZWZ0LCB0b3A6IHJlY3QudG9wLCByaWdodDogcmVjdC5sZWZ0LCBib3R0b206IHJlY3QuYm90dG9tLCBpc0hvcml6b250YWw6IGZhbHNlIH0sIC8vIGxlZnQtc2lkZVxuICAgICAgICB7IGxlZnQ6IHJlY3QucmlnaHQsIHRvcDogcmVjdC50b3AsIHJpZ2h0OiByZWN0LnJpZ2h0LCBib3R0b206IHJlY3QuYm90dG9tLCBpc0hvcml6b250YWw6IGZhbHNlIH0sIC8vIHJpZ2h0LXNpZGVcbiAgICAgICAgeyBsZWZ0OiByZWN0LmxlZnQsIHRvcDogcmVjdC50b3AsIHJpZ2h0OiByZWN0LnJpZ2h0LCBib3R0b206IHJlY3QudG9wLCBpc0hvcml6b250YWw6IHRydWUgfSwgLy8gdG9wLXNpZGVcbiAgICAgICAgeyBsZWZ0OiByZWN0LmxlZnQsIHRvcDogcmVjdC5ib3R0b20sIHJpZ2h0OiByZWN0LnJpZ2h0LCBib3R0b206IHJlY3QuYm90dG9tLCBpc0hvcml6b250YWw6IHRydWUgfSwgLy8gYm90dG9tLXNpZGVcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCByZWN0TGluZSBvZiByZWN0TGluZXMpIHtcbiAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gcmVjdExpbmUuaXNIb3Jpem9udGFsXG4gICAgICAgICAgICA/IGZpbmRJbnRlcnNlY3Rpb25Ib3Jpem9udGFsKHN0YXJ0TGluZSwgZW5kTGluZSwgcmVjdExpbmUpXG4gICAgICAgICAgICA6IGZpbmRJbnRlcnNlY3Rpb25WZXJ0aWNhbChzdGFydExpbmUsIGVuZExpbmUsIHJlY3RMaW5lKTtcblxuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uKVxuICAgICAgICAgICAgcmVzLnB1c2goaW50ZXJzZWN0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgaWYgKHJlcy5sZW5ndGggPT09IDEpXG4gICAgICAgIHJldHVybiByZXNbMF07XG5cbiAgICAvLyBOT1RFOiBpZiBhIGxpbmUgYW5kIHJlY3QgaGF2ZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cywgd2UgcmV0dXJuIHRoZSBuZWFyZXN0IHRvIHN0YXJ0TGluZVBvaW50XG4gICAgcmV0dXJuIHJlc1swXS5kaXN0YW5jZShzdGFydExpbmUpIDwgcmVzWzFdLmRpc3RhbmNlKHN0YXJ0TGluZSkgPyByZXNbMF0gOiByZXNbMV07XG59XG4iXX0=