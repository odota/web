"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyImagePart = exports.generateScreenshotMark = void 0;
const pngjs_1 = require("pngjs");
const lodash_1 = require("lodash");
const nanoid_1 = require("nanoid");
const constants_1 = require("./constants");
const ALPHABET = '01';
function generateScreenshotMark() {
    // NOTE: 32-bit id
    const id = nanoid_1.customAlphabet(ALPHABET, constants_1.MARK_LENGTH)();
    // NOTE: array of RGB values
    const markSeed = lodash_1.flatten(lodash_1.map(id, bit => bit === '0' ? [0, 0, 0, 255] : [255, 255, 255, 255]));
    // NOTE: macOS browsers can't display an element, if it's CSS height is lesser than 1.
    // It happens on Retina displays, because they have more than 1 physical pixel in a CSS pixel.
    // So increase mark size by prepending transparent pixels before the actual mark.
    const imageData = lodash_1.times(constants_1.MARK_BYTES_PER_PIXEL * constants_1.MARK_LENGTH * (constants_1.MARK_HEIGHT - 1), lodash_1.constant(0)).concat(markSeed);
    const imageDataBuffer = Buffer.from(imageData);
    const pngImage = new pngjs_1.PNG({ width: constants_1.MARK_LENGTH, height: constants_1.MARK_HEIGHT });
    imageDataBuffer.copy(pngImage.data);
    const markData = 'data:image/png;base64,' + pngjs_1.PNG.sync.write(pngImage).toString('base64');
    return { markSeed, markData };
}
exports.generateScreenshotMark = generateScreenshotMark;
function copyImagePart(pngImage, { clipLeft, clipTop, clipRight, clipBottom }) {
    const width = clipRight - clipLeft;
    const height = clipBottom - clipTop;
    const dstImage = new pngjs_1.PNG({ width, height });
    const stride = dstImage.width * constants_1.MARK_BYTES_PER_PIXEL;
    for (let i = 0; i < height; i++) {
        const srcStartIndex = (pngImage.width * (i + clipTop) + clipLeft) * constants_1.MARK_BYTES_PER_PIXEL;
        pngImage.data.copy(dstImage.data, stride * i, srcStartIndex, srcStartIndex + stride);
    }
    return dstImage;
}
exports.copyImagePart = copyImagePart;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyZWVuc2hvdHMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQTRCO0FBQzVCLG1DQUtnQjtBQUVoQixtQ0FBd0M7QUFDeEMsMkNBSXFCO0FBRXJCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQztBQUV0QixTQUFnQixzQkFBc0I7SUFDbEMsa0JBQWtCO0lBQ2xCLE1BQU0sRUFBRSxHQUFHLHVCQUFjLENBQUMsUUFBUSxFQUFFLHVCQUFXLENBQUMsRUFBRSxDQUFDO0lBRW5ELDRCQUE0QjtJQUM1QixNQUFNLFFBQVEsR0FBRyxnQkFBTyxDQUFDLFlBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU5RixzRkFBc0Y7SUFDdEYsOEZBQThGO0lBQzlGLGlGQUFpRjtJQUNqRixNQUFNLFNBQVMsR0FBUyxjQUFLLENBQUMsZ0NBQW9CLEdBQUcsdUJBQVcsR0FBRyxDQUFDLHVCQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUUsaUJBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwSCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sUUFBUSxHQUFVLElBQUksV0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUFXLEVBQUUsTUFBTSxFQUFFLHVCQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRTdFLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXBDLE1BQU0sUUFBUSxHQUFHLHdCQUF3QixHQUFHLFdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV4RixPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ2xDLENBQUM7QUFuQkQsd0RBbUJDO0FBRUQsU0FBZ0IsYUFBYSxDQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRTtJQUNqRixNQUFNLEtBQUssR0FBSSxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQ3BDLE1BQU0sTUFBTSxHQUFHLFVBQVUsR0FBRyxPQUFPLENBQUM7SUFFcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUU1QyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxHQUFHLGdDQUFvQixDQUFDO0lBRXJELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDN0IsTUFBTSxhQUFhLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLGdDQUFvQixDQUFDO1FBRXpGLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxhQUFhLEVBQUUsYUFBYSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0tBQ3hGO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQWZELHNDQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUE5HIH0gZnJvbSAncG5nanMnO1xuaW1wb3J0IHtcbiAgICBtYXAsXG4gICAgZmxhdHRlbixcbiAgICB0aW1lcyxcbiAgICBjb25zdGFudCxcbn0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgY3VzdG9tQWxwaGFiZXQgfSBmcm9tICduYW5vaWQnO1xuaW1wb3J0IHtcbiAgICBNQVJLX0xFTkdUSCxcbiAgICBNQVJLX0hFSUdIVCxcbiAgICBNQVJLX0JZVEVTX1BFUl9QSVhFTCxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBBTFBIQUJFVCA9ICcwMSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNjcmVlbnNob3RNYXJrICgpIHtcbiAgICAvLyBOT1RFOiAzMi1iaXQgaWRcbiAgICBjb25zdCBpZCA9IGN1c3RvbUFscGhhYmV0KEFMUEhBQkVULCBNQVJLX0xFTkdUSCkoKTtcblxuICAgIC8vIE5PVEU6IGFycmF5IG9mIFJHQiB2YWx1ZXNcbiAgICBjb25zdCBtYXJrU2VlZCA9IGZsYXR0ZW4obWFwKGlkLCBiaXQgPT4gYml0ID09PSAnMCcgPyBbMCwgMCwgMCwgMjU1XSA6IFsyNTUsIDI1NSwgMjU1LCAyNTVdKSk7XG5cbiAgICAvLyBOT1RFOiBtYWNPUyBicm93c2VycyBjYW4ndCBkaXNwbGF5IGFuIGVsZW1lbnQsIGlmIGl0J3MgQ1NTIGhlaWdodCBpcyBsZXNzZXIgdGhhbiAxLlxuICAgIC8vIEl0IGhhcHBlbnMgb24gUmV0aW5hIGRpc3BsYXlzLCBiZWNhdXNlIHRoZXkgaGF2ZSBtb3JlIHRoYW4gMSBwaHlzaWNhbCBwaXhlbCBpbiBhIENTUyBwaXhlbC5cbiAgICAvLyBTbyBpbmNyZWFzZSBtYXJrIHNpemUgYnkgcHJlcGVuZGluZyB0cmFuc3BhcmVudCBwaXhlbHMgYmVmb3JlIHRoZSBhY3R1YWwgbWFyay5cbiAgICBjb25zdCBpbWFnZURhdGEgICAgICAgPSB0aW1lcyhNQVJLX0JZVEVTX1BFUl9QSVhFTCAqIE1BUktfTEVOR1RIICogKE1BUktfSEVJR0hUIC0gMSksIGNvbnN0YW50KDApKS5jb25jYXQobWFya1NlZWQpO1xuICAgIGNvbnN0IGltYWdlRGF0YUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGltYWdlRGF0YSk7XG4gICAgY29uc3QgcG5nSW1hZ2UgICAgICAgID0gbmV3IFBORyh7IHdpZHRoOiBNQVJLX0xFTkdUSCwgaGVpZ2h0OiBNQVJLX0hFSUdIVCB9KTtcblxuICAgIGltYWdlRGF0YUJ1ZmZlci5jb3B5KHBuZ0ltYWdlLmRhdGEpO1xuXG4gICAgY29uc3QgbWFya0RhdGEgPSAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBQTkcuc3luYy53cml0ZShwbmdJbWFnZSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXG4gICAgcmV0dXJuIHsgbWFya1NlZWQsIG1hcmtEYXRhIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5SW1hZ2VQYXJ0IChwbmdJbWFnZSwgeyBjbGlwTGVmdCwgY2xpcFRvcCwgY2xpcFJpZ2h0LCBjbGlwQm90dG9tIH0pIHtcbiAgICBjb25zdCB3aWR0aCAgPSBjbGlwUmlnaHQgLSBjbGlwTGVmdDtcbiAgICBjb25zdCBoZWlnaHQgPSBjbGlwQm90dG9tIC0gY2xpcFRvcDtcblxuICAgIGNvbnN0IGRzdEltYWdlID0gbmV3IFBORyh7IHdpZHRoLCBoZWlnaHQgfSk7XG5cbiAgICBjb25zdCBzdHJpZGUgPSBkc3RJbWFnZS53aWR0aCAqIE1BUktfQllURVNfUEVSX1BJWEVMO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICBjb25zdCBzcmNTdGFydEluZGV4ID0gKHBuZ0ltYWdlLndpZHRoICogKGkgKyBjbGlwVG9wKSArIGNsaXBMZWZ0KSAqIE1BUktfQllURVNfUEVSX1BJWEVMO1xuXG4gICAgICAgIHBuZ0ltYWdlLmRhdGEuY29weShkc3RJbWFnZS5kYXRhLCBzdHJpZGUgKiBpLCBzcmNTdGFydEluZGV4LCBzcmNTdGFydEluZGV4ICsgc3RyaWRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZHN0SW1hZ2U7XG59XG4iXX0=