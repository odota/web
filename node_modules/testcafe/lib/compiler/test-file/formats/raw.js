"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("../base"));
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const test_file_1 = __importDefault(require("../../../api/structure/test-file"));
const fixture_1 = __importDefault(require("../../../api/structure/fixture"));
const test_1 = __importDefault(require("../../../api/structure/test"));
const from_object_1 = __importDefault(require("../../../test-run/commands/from-object"));
const raw_command_callsite_record_1 = require("../../../utils/raw-command-callsite-record");
class RawTestFileCompiler extends base_1.default {
    static _createTestFn(commands) {
        return async (t) => {
            var _a, _b;
            for (let i = 0; i < commands.length; i++) {
                const callsite = ((_a = commands[i]) === null || _a === void 0 ? void 0 : _a.id) ? new raw_command_callsite_record_1.RawCommandCallsiteRecord(commands[i].id, commands) : (_b = commands[i]) === null || _b === void 0 ? void 0 : _b.callsite;
                try {
                    const command = from_object_1.default(commands[i], t.testRun);
                    await t.testRun.executeCommand(command, callsite);
                }
                catch (err) {
                    err.callsite = callsite;
                    throw err;
                }
            }
        };
    }
    static _assignCommonTestingUnitProperties(src, dest) {
        if (src.pageUrl)
            dest.page(src.pageUrl);
        if (src.authCredentials)
            dest.httpAuth(src.authCredentials);
        /* eslint-disable no-unused-expressions */
        if (src.only)
            dest.only;
        if (src.skip)
            dest.skip;
        if (src.disablePageReloads)
            dest.disablePageReloads;
        if (src.enablePageReloads)
            dest.enablePageReloads;
        /* eslint-enable no-unused-expressions */
    }
    static _addTest(testFile, src) {
        const test = new test_1.default(testFile);
        test(src.name, RawTestFileCompiler._createTestFn(src.commands));
        RawTestFileCompiler._assignCommonTestingUnitProperties(src, test);
        if (src.beforeCommands)
            test.before(RawTestFileCompiler._createTestFn(src.beforeCommands));
        if (src.afterCommands)
            test.after(RawTestFileCompiler._createTestFn(src.afterCommands));
        return test;
    }
    static _addFixture(testFile, src) {
        const fixture = new fixture_1.default(testFile);
        fixture(src.name);
        RawTestFileCompiler._assignCommonTestingUnitProperties(src, fixture);
        if (src.beforeEachCommands)
            fixture.beforeEach(RawTestFileCompiler._createTestFn(src.beforeEachCommands));
        if (src.afterEachCommands)
            fixture.afterEach(RawTestFileCompiler._createTestFn(src.afterEachCommands));
        src.tests.forEach(testSrc => RawTestFileCompiler._addTest(testFile, testSrc));
    }
    _hasTests() {
        return true;
    }
    getSupportedExtension() {
        return '.testcafe';
    }
    compile(code, filename) {
        const testFile = new test_file_1.default(filename);
        let data = null;
        try {
            data = JSON.parse(code);
            data.fixtures.forEach(fixtureSrc => RawTestFileCompiler._addFixture(testFile, fixtureSrc));
            return testFile.getTests();
        }
        catch (err) {
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotParseRawFile, filename, err.toString());
        }
    }
}
exports.default = RawTestFileCompiler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,