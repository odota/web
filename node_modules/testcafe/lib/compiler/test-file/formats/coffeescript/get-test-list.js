"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCoffeeScriptTestListFromCode = exports.getCoffeeScriptTestList = exports.CoffeeScriptTestFileParser = void 0;
const coffeescript_1 = __importDefault(require("coffeescript"));
const core_1 = require("@babel/core");
const compiler_js_1 = __importDefault(require("../es-next/compiler.js"));
const get_test_list_1 = require("../es-next/get-test-list");
class CoffeeScriptTestFileParser extends get_test_list_1.EsNextTestFileParser {
    parse(code) {
        const babelOptions = compiler_js_1.default.getBabelOptions(null, code);
        delete babelOptions.filename;
        babelOptions.ast = true;
        code = coffeescript_1.default.compile(code, {
            bare: true,
            sourceMap: false,
            inlineMap: false,
            header: false,
        });
        const ast = core_1.transform(code, babelOptions).ast;
        return this.analyze(ast.program.body);
    }
}
exports.CoffeeScriptTestFileParser = CoffeeScriptTestFileParser;
const parser = new CoffeeScriptTestFileParser();
exports.getCoffeeScriptTestList = parser.getTestList.bind(parser);
exports.getCoffeeScriptTestListFromCode = parser.getTestListFromCode.bind(parser);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXRlc3QtbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy9jb2ZmZWVzY3JpcHQvZ2V0LXRlc3QtbGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBd0M7QUFDeEMsc0NBQXdDO0FBQ3hDLHlFQUE0RDtBQUM1RCw0REFBZ0U7QUFFaEUsTUFBYSwwQkFBMkIsU0FBUSxvQ0FBb0I7SUFDaEUsS0FBSyxDQUFFLElBQUk7UUFDUCxNQUFNLFlBQVksR0FBRyxxQkFBc0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhFLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUM3QixZQUFZLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztRQUV4QixJQUFJLEdBQUcsc0JBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQzlCLElBQUksRUFBTyxJQUFJO1lBQ2YsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsTUFBTSxFQUFLLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsZ0JBQVMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBRTlDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQWxCRCxnRUFrQkM7QUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLDBCQUEwQixFQUFFLENBQUM7QUFFbkMsUUFBQSx1QkFBdUIsR0FBVyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRSxRQUFBLCtCQUErQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29mZmVlU2NyaXB0IGZyb20gJ2NvZmZlZXNjcmlwdCc7XG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICdAYmFiZWwvY29yZSc7XG5pbXBvcnQgRVNOZXh0VGVzdEZpbGVDb21waWxlciBmcm9tICcuLi9lcy1uZXh0L2NvbXBpbGVyLmpzJztcbmltcG9ydCB7IEVzTmV4dFRlc3RGaWxlUGFyc2VyIH0gZnJvbSAnLi4vZXMtbmV4dC9nZXQtdGVzdC1saXN0JztcblxuZXhwb3J0IGNsYXNzIENvZmZlZVNjcmlwdFRlc3RGaWxlUGFyc2VyIGV4dGVuZHMgRXNOZXh0VGVzdEZpbGVQYXJzZXIge1xuICAgIHBhcnNlIChjb2RlKSB7XG4gICAgICAgIGNvbnN0IGJhYmVsT3B0aW9ucyA9IEVTTmV4dFRlc3RGaWxlQ29tcGlsZXIuZ2V0QmFiZWxPcHRpb25zKG51bGwsIGNvZGUpO1xuXG4gICAgICAgIGRlbGV0ZSBiYWJlbE9wdGlvbnMuZmlsZW5hbWU7XG4gICAgICAgIGJhYmVsT3B0aW9ucy5hc3QgPSB0cnVlO1xuXG4gICAgICAgIGNvZGUgPSBDb2ZmZWVTY3JpcHQuY29tcGlsZShjb2RlLCB7XG4gICAgICAgICAgICBiYXJlOiAgICAgIHRydWUsXG4gICAgICAgICAgICBzb3VyY2VNYXA6IGZhbHNlLFxuICAgICAgICAgICAgaW5saW5lTWFwOiBmYWxzZSxcbiAgICAgICAgICAgIGhlYWRlcjogICAgZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGFzdCA9IHRyYW5zZm9ybShjb2RlLCBiYWJlbE9wdGlvbnMpLmFzdDtcblxuICAgICAgICByZXR1cm4gdGhpcy5hbmFseXplKGFzdC5wcm9ncmFtLmJvZHkpO1xuICAgIH1cbn1cblxuY29uc3QgcGFyc2VyID0gbmV3IENvZmZlZVNjcmlwdFRlc3RGaWxlUGFyc2VyKCk7XG5cbmV4cG9ydCBjb25zdCBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdCAgICAgICAgID0gcGFyc2VyLmdldFRlc3RMaXN0LmJpbmQocGFyc2VyKTtcbmV4cG9ydCBjb25zdCBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdEZyb21Db2RlID0gcGFyc2VyLmdldFRlc3RMaXN0RnJvbUNvZGUuYmluZChwYXJzZXIpO1xuIl19