"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = __importDefault(require("./process"));
const VIDEO_EXTENSION = 'mp4';
const TEMP_VIDEO_FILE_PREFIX = 'tmp-video';
const TEMP_MERGE_FILE_PREFIX = TEMP_VIDEO_FILE_PREFIX + '-merge';
const TEMP_MERGE_CONFIG_FILE_PREFIX = 'config';
const TEMP_MERGE_CONFIG_FILE_EXTENSION = 'txt';
class TestRunVideoRecorder {
    constructor({ testRun, test, index }, { path, ffmpegPath, encodingOptions }) {
        this.testRun = testRun;
        this.test = test;
        this.index = index;
        this.tempFiles = null;
        this.videoRecorder = null;
        this.path = path;
        this.ffmpegPath = ffmpegPath;
        this.encodingOptions = encodingOptions;
        this.start = null;
        this.timecodes = null;
    }
    get testRunInfo() {
        return {
            testIndex: this.index,
            fixture: this.test.fixture.name,
            test: this.test.name,
            timecodes: this.timecodes,
            alias: this._connection.browserInfo.alias,
            parsedUserAgent: this._connection.browserInfo.parsedUserAgent,
        };
    }
    get hasErrors() {
        return !!this.testRun.errs.length;
    }
    get _connection() {
        return this.testRun.browserConnection;
    }
    async startCapturing() {
        await this.videoRecorder.startCapturing();
        this.start = Date.now();
    }
    async finishCapturing() {
        await this.videoRecorder.finishCapturing();
    }
    async init() {
        this.tempFiles = this._generateTempNames();
        this.videoRecorder = this._createVideoRecorderProcess();
        await this.videoRecorder.init();
    }
    async isVideoSupported() {
        const connectionCapabilities = await this._connection.provider.hasCustomActionForBrowser(this._connection.id);
        return connectionCapabilities && connectionCapabilities.hasGetVideoFrameData;
    }
    async isVideoEnabled() {
        return !this.test.skip;
    }
    onTestRunRestart() {
        this.timecodes = this.timecodes || [0];
        this._addTimeCode();
    }
    _addTimeCode() {
        this.timecodes.push(Date.now() - this.start);
    }
    _createVideoRecorderProcess() {
        return new process_1.default(this.tempFiles.tempVideoPath, this.ffmpegPath, this._connection, this.encodingOptions);
    }
    _generateTempNames() {
        const id = this._connection.id;
        const tempFileNames = {
            tempVideoPath: `${TEMP_VIDEO_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`,
            tempMergeConfigPath: `${TEMP_MERGE_CONFIG_FILE_PREFIX}-${id}.${TEMP_MERGE_CONFIG_FILE_EXTENSION}`,
            tmpMergeName: `${TEMP_MERGE_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`,
        };
        for (const [tempFile, tempName] of Object.entries(tempFileNames))
            tempFileNames[tempFile] = path_1.join(this.path, tempName);
        return tempFileNames;
    }
}
exports.default = TestRunVideoRecorder;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tdmlkZW8tcmVjb3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmlkZW8tcmVjb3JkZXIvdGVzdC1ydW4tdmlkZW8tcmVjb3JkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBNEI7QUFDNUIsd0RBQTZDO0FBRTdDLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQztBQUU5QixNQUFNLHNCQUFzQixHQUFHLFdBQVcsQ0FBQztBQUMzQyxNQUFNLHNCQUFzQixHQUFHLHNCQUFzQixHQUFHLFFBQVEsQ0FBQztBQUVqRSxNQUFNLDZCQUE2QixHQUFNLFFBQVEsQ0FBQztBQUNsRCxNQUFNLGdDQUFnQyxHQUFHLEtBQUssQ0FBQztBQUUvQyxNQUFxQixvQkFBb0I7SUFDckMsWUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRTtRQUN4RSxJQUFJLENBQUMsT0FBTyxHQUFNLE9BQU8sQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFTLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFRLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsU0FBUyxHQUFPLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUUxQixJQUFJLENBQUMsSUFBSSxHQUFjLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFRLFVBQVUsQ0FBQztRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUV2QyxJQUFJLENBQUMsS0FBSyxHQUFPLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTztZQUNILFNBQVMsRUFBUSxJQUFJLENBQUMsS0FBSztZQUMzQixPQUFP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QUUsUUFBUSxDQUFDLENBQUM7UUFFeEQsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztDQUNKO0FBM0ZELHVDQTJGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCBWaWRlb1JlY29yZGVyUHJvY2VzcyBmcm9tICcuL3Byb2Nlc3MnO1xuXG5jb25zdCBWSURFT19FWFRFTlNJT04gPSAnbXA0JztcblxuY29uc3QgVEVNUF9WSURFT19GSUxFX1BSRUZJWCA9ICd0bXAtdmlkZW8nO1xuY29uc3QgVEVNUF9NRVJHRV9GSUxFX1BSRUZJWCA9IFRFTVBfVklERU9fRklMRV9QUkVGSVggKyAnLW1lcmdlJztcblxuY29uc3QgVEVNUF9NRVJHRV9DT05GSUdfRklMRV9QUkVGSVggICAgPSAnY29uZmlnJztcbmNvbnN0IFRFTVBfTUVSR0VfQ09ORklHX0ZJTEVfRVhURU5TSU9OID0gJ3R4dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlc3RSdW5WaWRlb1JlY29yZGVyIHtcbiAgICBjb25zdHJ1Y3RvciAoeyB0ZXN0UnVuLCB0ZXN0LCBpbmRleCB9LCB7IHBhdGgsIGZmbXBlZ1BhdGgsIGVuY29kaW5nT3B0aW9ucyB9KSB7XG4gICAgICAgIHRoaXMudGVzdFJ1biAgICA9IHRlc3RSdW47XG4gICAgICAgIHRoaXMudGVzdCAgICAgICA9IHRlc3Q7XG4gICAgICAgIHRoaXMuaW5kZXggICAgICA9IGluZGV4O1xuXG4gICAgICAgIHRoaXMudGVtcEZpbGVzICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMudmlkZW9SZWNvcmRlciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5wYXRoICAgICAgICAgICAgPSBwYXRoO1xuICAgICAgICB0aGlzLmZmbXBlZ1BhdGggICAgICA9IGZmbXBlZ1BhdGg7XG4gICAgICAgIHRoaXMuZW5jb2RpbmdPcHRpb25zID0gZW5jb2RpbmdPcHRpb25zO1xuXG4gICAgICAgIHRoaXMuc3RhcnQgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy50aW1lY29kZXMgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCB0ZXN0UnVuSW5mbyAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXN0SW5kZXg6ICAgICAgIHRoaXMuaW5kZXgsXG4gICAgICAgICAgICBmaXh0dXJlOiAgICAgICAgIHRoaXMudGVzdC5maXh0dXJlLm5hbWUsXG4gICAgICAgICAgICB0ZXN0OiAgICAgICAgICAgIHRoaXMudGVzdC5uYW1lLFxuICAgICAgICAgICAgdGltZWNvZGVzOiAgICAgICB0aGlzLnRpbWVjb2RlcyxcbiAgICAgICAgICAgIGFsaWFzOiAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5icm93c2VySW5mby5hbGlhcyxcbiAgICAgICAgICAgIHBhcnNlZFVzZXJBZ2VudDogdGhpcy5fY29ubmVjdGlvbi5icm93c2VySW5mby5wYXJzZWRVc2VyQWdlbnQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0IGhhc0Vycm9ycyAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMudGVzdFJ1bi5lcnJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQgX2Nvbm5lY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uO1xuICAgIH1cblxuICAgIGFzeW5jIHN0YXJ0Q2FwdHVyaW5nICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy52aWRlb1JlY29yZGVyLnN0YXJ0Q2FwdHVyaW5nKCk7XG5cbiAgICAgICAgdGhpcy5zdGFydCA9IERhdGUubm93KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZmluaXNoQ2FwdHVyaW5nICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy52aWRlb1JlY29yZGVyLmZpbmlzaENhcHR1cmluZygpO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQgKCkge1xuICAgICAgICB0aGlzLnRlbXBGaWxlcyAgICAgPSB0aGlzLl9nZW5lcmF0ZVRlbXBOYW1lcygpO1xuICAgICAgICB0aGlzLnZpZGVvUmVjb3JkZXIgPSB0aGlzLl9jcmVhdGVWaWRlb1JlY29yZGVyUHJvY2VzcygpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMudmlkZW9SZWNvcmRlci5pbml0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaXNWaWRlb1N1cHBvcnRlZCAoKSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25DYXBhYmlsaXRpZXMgPSBhd2FpdCB0aGlzLl9jb25uZWN0aW9uLnByb3ZpZGVyLmhhc0N1c3RvbUFjdGlvbkZvckJyb3dzZXIodGhpcy5fY29ubmVjdGlvbi5pZCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25DYXBhYmlsaXRpZXMgJiYgY29ubmVjdGlvbkNhcGFiaWxpdGllcy5oYXNHZXRWaWRlb0ZyYW1lRGF0YTtcbiAgICB9XG5cbiAgICBhc3luYyBpc1ZpZGVvRW5hYmxlZCAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy50ZXN0LnNraXA7XG4gICAgfVxuXG4gICAgb25UZXN0UnVuUmVzdGFydCAoKSB7XG4gICAgICAgIHRoaXMudGltZWNvZGVzID0gdGhpcy50aW1lY29kZXMgfHwgWzBdO1xuXG4gICAgICAgIHRoaXMuX2FkZFRpbWVDb2RlKCk7XG4gICAgfVxuXG4gICAgX2FkZFRpbWVDb2RlICgpIHtcbiAgICAgICAgdGhpcy50aW1lY29kZXMucHVzaChEYXRlLm5vdygpIC0gdGhpcy5zdGFydCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVZpZGVvUmVjb3JkZXJQcm9jZXNzICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWaWRlb1JlY29yZGVyUHJvY2Vzcyh0aGlzLnRlbXBGaWxlcy50ZW1wVmlkZW9QYXRoLCB0aGlzLmZmbXBlZ1BhdGgsIHRoaXMuX2Nvbm5lY3Rpb24sIHRoaXMuZW5jb2RpbmdPcHRpb25zKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVUZW1wTmFtZXMgKCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuX2Nvbm5lY3Rpb24uaWQ7XG5cbiAgICAgICAgY29uc3QgdGVtcEZpbGVOYW1lcyA9IHtcbiAgICAgICAgICAgIHRlbXBWaWRlb1BhdGg6ICAgICAgIGAke1RFTVBfVklERU9fRklMRV9QUkVGSVh9LSR7aWR9LiR7VklERU9fRVhURU5TSU9OfWAsXG4gICAgICAgICAgICB0ZW1wTWVyZ2VDb25maWdQYXRoOiBgJHtURU1QX01FUkdFX0NPTkZJR19GSUxFX1BSRUZJWH0tJHtpZH0uJHtURU1QX01FUkdFX0NPTkZJR19GSUxFX0VYVEVOU0lPTn1gLFxuICAgICAgICAgICAgdG1wTWVyZ2VOYW1lOiAgICAgICAgYCR7VEVNUF9NRVJHRV9GSUxFX1BSRUZJWH0tJHtpZH0uJHtWSURFT19FWFRFTlNJT059YCxcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGNvbnN0IFt0ZW1wRmlsZSwgdGVtcE5hbWVdIG9mIE9iamVjdC5lbnRyaWVzKHRlbXBGaWxlTmFtZXMpKVxuICAgICAgICAgICAgdGVtcEZpbGVOYW1lc1t0ZW1wRmlsZV0gPSBqb2luKHRoaXMucGF0aCwgdGVtcE5hbWUpO1xuXG4gICAgICAgIHJldHVybiB0ZW1wRmlsZU5hbWVzO1xuICAgIH1cbn1cbiJdfQ==