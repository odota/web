"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bowser_1 = __importDefault(require("bowser"));
const DEFAULT_NAME = 'Other';
const DEFAULT_VERSION = '0.0';
const DEFAULT_PLATFORM_TYPE = DEFAULT_NAME.toLowerCase();
const EMPTY_PARSED_USER_AGENT = bowser_1.default.parse(' ');
function calculateBrowser(browserDetails) {
    return {
        name: browserDetails.name || DEFAULT_NAME,
        version: browserDetails.version || DEFAULT_VERSION,
    };
}
function calculateOs(parsedOsDetails) {
    const name = parsedOsDetails.name || DEFAULT_NAME;
    let version = DEFAULT_VERSION;
    // NOTE: a 'versionName' property value is more readable in the case of Windows (GH-481):
    // Windows 8.1: os.version: "NT 6.3", os.versionName: "8.1".
    if (name.toLowerCase() === 'windows') {
        if (parsedOsDetails.versionName)
            version = parsedOsDetails.versionName;
    }
    else if (parsedOsDetails.version)
        version = parsedOsDetails.version;
    return { name, version };
}
function calculateEngine(engineDetails) {
    return {
        name: engineDetails.name || DEFAULT_NAME,
        version: engineDetails.version || DEFAULT_VERSION,
    };
}
function calculatePrettyUserAgent(browser, os) {
    return `${browser.name} ${browser.version} / ${os.name} ${os.version}`;
}
function parseUserAgent(userAgent = '') {
    const parsedUserAgent = userAgent ? bowser_1.default.parse(userAgent) : EMPTY_PARSED_USER_AGENT;
    const browser = calculateBrowser(parsedUserAgent.browser);
    const os = calculateOs(parsedUserAgent.os);
    const engine = calculateEngine(parsedUserAgent.engine);
    const prettyUserAgent = calculatePrettyUserAgent(browser, os);
    return {
        name: browser.name,
        version: browser.version,
        platform: parsedUserAgent.platform.type || DEFAULT_PLATFORM_TYPE,
        os,
        engine,
        prettyUserAgent: prettyUserAgent,
        userAgent,
    };
}
exports.default = parseUserAgent;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtdXNlci1hZ2VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wYXJzZS11c2VyLWFnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTRCO0FBRTVCLE1BQU0sWUFBWSxHQUFjLE9BQU8sQ0FBQztBQUN4QyxNQUFNLGVBQWUsR0FBVyxLQUFLLENBQUM7QUFDdEMsTUFBTSxxQkFBcUIsR0FBSyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0QsTUFBTSx1QkFBdUIsR0FBRyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQWlCbEQsU0FBUyxnQkFBZ0IsQ0FBRSxjQUE0QztJQUNuRSxPQUFPO1FBQ0gsSUFBSSxFQUFLLGNBQWMsQ0FBQyxJQUFJLElBQUksWUFBWTtRQUM1QyxPQUFPLEVBQUUsY0FBYyxDQUFDLE9BQU8sSUFBSSxlQUFlO0tBQ3JELENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUUsZUFBd0M7SUFDMUQsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksSUFBSSxZQUFZLENBQUM7SUFFbEQsSUFBSSxPQUFPLEdBQUcsZUFBZSxDQUFDO0lBRTlCLHlGQUF5RjtJQUN6Riw0REFBNEQ7SUFDNUQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssU0FBUyxFQUFFO1FBQ2xDLElBQUksZUFBZSxDQUFDLFdBQVc7WUFDM0IsT0FBTyxHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUM7S0FDN0M7U0FDSSxJQUFJLGVBQWUsQ0FBQyxPQUFPO1FBQzVCLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBRXRDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFFLGFBQTBDO0lBQ2hFLE9BQU87UUFDSCxJQUFJLEVBQUssYUFBYSxDQUFDLElBQUksSUFBSSxZQUFZO1FBQzNDLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTyxJQUFJLGVBQWU7S0FDcEQsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFFLE9BQXdCLEVBQUUsRUFBbUI7SUFDNUUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sTUFBTSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMzRSxDQUFDO0FBRUQsU0FBd0IsY0FBYyxDQUFFLFNBQVMsR0FBRyxFQUFFO0lBQ2xELE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO0lBQ3RGLE1BQU0sT0FBTyxHQUFXLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsRSxNQUFNLEVBQUUsR0FBZ0IsV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RCxNQUFNLE1BQU0sR0FBWSxlQUFlLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sZUFBZSxHQUFHLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU5RCxPQUFPO1FBQ0gsSUFBSSxFQUFhLE9BQU8sQ0FBQyxJQUFJO1FBQzdCLE9BQU8sRUFBVSxPQUFPLENBQUMsT0FBTztRQUNoQyxRQUFRLEVBQVMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUkscUJBQXFCO1FBQ3ZFLEVBQUU7UUFDRixNQUFNO1FBQ04sZUFBZSxFQUFFLGVBQWU7UUFDaEMsU0FBUztLQUNaLENBQUM7QUFDTixDQUFDO0FBaEJELGlDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3dzZXIgZnJvbSAnYm93c2VyJztcblxuY29uc3QgREVGQVVMVF9OQU1FICAgICAgICAgICAgPSAnT3RoZXInO1xuY29uc3QgREVGQVVMVF9WRVJTSU9OICAgICAgICAgPSAnMC4wJztcbmNvbnN0IERFRkFVTFRfUExBVEZPUk1fVFlQRSAgID0gREVGQVVMVF9OQU1FLnRvTG93ZXJDYXNlKCk7XG5jb25zdCBFTVBUWV9QQVJTRURfVVNFUl9BR0VOVCA9IEJvd3Nlci5wYXJzZSgnICcpO1xuXG5pbnRlcmZhY2UgUGFyc2VkQ29tcG9uZW50IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmVyc2lvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFVzZXJBZ2VudCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZlcnNpb246IHN0cmluZztcbiAgICBwbGF0Zm9ybTogc3RyaW5nO1xuICAgIG9zOiBQYXJzZWRDb21wb25lbnQ7XG4gICAgZW5naW5lOiBQYXJzZWRDb21wb25lbnQ7XG4gICAgcHJldHR5VXNlckFnZW50OiBzdHJpbmc7XG4gICAgdXNlckFnZW50OiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUJyb3dzZXIgKGJyb3dzZXJEZXRhaWxzOiBCb3dzZXIuUGFyc2VyLkJyb3dzZXJEZXRhaWxzKTogUGFyc2VkQ29tcG9uZW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAgICBicm93c2VyRGV0YWlscy5uYW1lIHx8IERFRkFVTFRfTkFNRSxcbiAgICAgICAgdmVyc2lvbjogYnJvd3NlckRldGFpbHMudmVyc2lvbiB8fCBERUZBVUxUX1ZFUlNJT04sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlT3MgKHBhcnNlZE9zRGV0YWlsczogQm93c2VyLlBhcnNlci5PU0RldGFpbHMpOiBQYXJzZWRDb21wb25lbnQge1xuICAgIGNvbnN0IG5hbWUgPSBwYXJzZWRPc0RldGFpbHMubmFtZSB8fCBERUZBVUxUX05BTUU7XG5cbiAgICBsZXQgdmVyc2lvbiA9IERFRkFVTFRfVkVSU0lPTjtcblxuICAgIC8vIE5PVEU6IGEgJ3ZlcnNpb25OYW1lJyBwcm9wZXJ0eSB2YWx1ZSBpcyBtb3JlIHJlYWRhYmxlIGluIHRoZSBjYXNlIG9mIFdpbmRvd3MgKEdILTQ4MSk6XG4gICAgLy8gV2luZG93cyA4LjE6IG9zLnZlcnNpb246IFwiTlQgNi4zXCIsIG9zLnZlcnNpb25OYW1lOiBcIjguMVwiLlxuICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd3aW5kb3dzJykge1xuICAgICAgICBpZiAocGFyc2VkT3NEZXRhaWxzLnZlcnNpb25OYW1lKVxuICAgICAgICAgICAgdmVyc2lvbiA9IHBhcnNlZE9zRGV0YWlscy52ZXJzaW9uTmFtZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyc2VkT3NEZXRhaWxzLnZlcnNpb24pXG4gICAgICAgIHZlcnNpb24gPSBwYXJzZWRPc0RldGFpbHMudmVyc2lvbjtcblxuICAgIHJldHVybiB7IG5hbWUsIHZlcnNpb24gfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRW5naW5lIChlbmdpbmVEZXRhaWxzOiBCb3dzZXIuUGFyc2VyLkVuZ2luZURldGFpbHMpOiBQYXJzZWRDb21wb25lbnQge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICAgIGVuZ2luZURldGFpbHMubmFtZSB8fCBERUZBVUxUX05BTUUsXG4gICAgICAgIHZlcnNpb246IGVuZ2luZURldGFpbHMudmVyc2lvbiB8fCBERUZBVUxUX1ZFUlNJT04sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUHJldHR5VXNlckFnZW50IChicm93c2VyOiBQYXJzZWRDb21wb25lbnQsIG9zOiBQYXJzZWRDb21wb25lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHticm93c2VyLm5hbWV9ICR7YnJvd3Nlci52ZXJzaW9ufSAvICR7b3MubmFtZX0gJHtvcy52ZXJzaW9ufWA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlVXNlckFnZW50ICh1c2VyQWdlbnQgPSAnJyk6IFBhcnNlZFVzZXJBZ2VudCB7XG4gICAgY29uc3QgcGFyc2VkVXNlckFnZW50ID0gdXNlckFnZW50ID8gQm93c2VyLnBhcnNlKHVzZXJBZ2VudCkgOiBFTVBUWV9QQVJTRURfVVNFUl9BR0VOVDtcbiAgICBjb25zdCBicm93c2VyICAgICAgICAgPSBjYWxjdWxhdGVCcm93c2VyKHBhcnNlZFVzZXJBZ2VudC5icm93c2VyKTtcbiAgICBjb25zdCBvcyAgICAgICAgICAgICAgPSBjYWxjdWxhdGVPcyhwYXJzZWRVc2VyQWdlbnQub3MpO1xuICAgIGNvbnN0IGVuZ2luZSAgICAgICAgICA9IGNhbGN1bGF0ZUVuZ2luZShwYXJzZWRVc2VyQWdlbnQuZW5naW5lKTtcbiAgICBjb25zdCBwcmV0dHlVc2VyQWdlbnQgPSBjYWxjdWxhdGVQcmV0dHlVc2VyQWdlbnQoYnJvd3Nlciwgb3MpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogICAgICAgICAgICBicm93c2VyLm5hbWUsXG4gICAgICAgIHZlcnNpb246ICAgICAgICAgYnJvd3Nlci52ZXJzaW9uLFxuICAgICAgICBwbGF0Zm9ybTogICAgICAgIHBhcnNlZFVzZXJBZ2VudC5wbGF0Zm9ybS50eXBlIHx8IERFRkFVTFRfUExBVEZPUk1fVFlQRSxcbiAgICAgICAgb3MsXG4gICAgICAgIGVuZ2luZSxcbiAgICAgICAgcHJldHR5VXNlckFnZW50OiBwcmV0dHlVc2VyQWdlbnQsXG4gICAgICAgIHVzZXJBZ2VudCxcbiAgICB9O1xufVxuIl19