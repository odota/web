"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawCommandCallsiteRecord = exports.renderers = exports.HtmlRender = exports.NoColorRender = exports.Render = void 0;
const chalk_1 = __importDefault(require("chalk"));
const lodash_1 = require("lodash");
class Render {
    static codeFrame(str) {
        return str;
    }
    static commandLine(num, command, base) {
        const { type, assertionType, selector, } = command;
        let commandNum = `${base ? ' > ' : '   '}${num} `;
        if (base)
            commandNum = chalk_1.default.bgRed(commandNum);
        return `${commandNum}|${lodash_1.upperFirst(lodash_1.camelCase(assertionType || type))} ${selector ? `(${selector.value})` : ''}\n`;
    }
}
exports.Render = Render;
class NoColorRender extends Render {
    static commandLine(num, command, base) {
        const { type, assertionType, selector, } = command;
        const commandNum = `${base ? ' > ' : '   '}${num} `;
        return `${commandNum}|${lodash_1.upperFirst(lodash_1.camelCase(assertionType || type))} ${selector ? `(${selector.value})` : ''}\n`;
    }
}
exports.NoColorRender = NoColorRender;
class HtmlRender extends Render {
    static codeFrame(str) {
        return '<div class="code-frame">' + str + '</div>';
    }
    static commandLine(num, command, base) {
        const { type, assertionType, selector, } = command;
        const numClass = base ? 'code-line-num-base' : 'code-line-num';
        return `<div class="code-line">` +
            `<div class="${numClass}">${num}</div>` +
            `<div class="code-line-src">${lodash_1.upperFirst(lodash_1.camelCase(assertionType || type))} ${selector ? `(${selector.value})` : ''}</div>` +
            `</div>`;
    }
}
exports.HtmlRender = HtmlRender;
exports.renderers = {
    default: Render,
    html: HtmlRender,
    noColor: NoColorRender,
};
class RawCommandCallsiteRecord {
    constructor(id, list) {
        this.id = id;
        this._list = list;
    }
    renderSync(opts) {
        const { renderer = Render, frameSize = 1, codeFrame = true, } = opts;
        if (!codeFrame)
            return '';
        const baseId = this._list.findIndex(item => item.id === this.id);
        if (baseId < 0)
            return '';
        const firstId = Math.max(baseId - frameSize, 0);
        const lastId = Math.min(baseId + frameSize, this._list.length - 1);
        let frame = '';
        for (let i = firstId; i <= lastId; i++)
            frame += renderer.commandLine(i + 1, this._list[i], i === baseId);
        return renderer.codeFrame(frame);
    }
}
exports.RawCommandCallsiteRecord = RawCommandCallsiteRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3LWNvbW1hbmQtY2FsbHNpdGUtcmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3Jhdy1jb21tYW5kLWNhbGxzaXRlLXJlY29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsbUNBQStDO0FBYS9DLE1BQWEsTUFBTTtJQUNSLE1BQU0sQ0FBQyxTQUFTLENBQUUsR0FBVztRQUNoQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDTSxNQUFNLENBQUMsV0FBVyxDQUFFLEdBQVcsRUFBRSxPQUFnQixFQUFFLElBQWE7UUFDbkUsTUFBTSxFQUNGLElBQUksRUFDSixhQUFhLEVBQ2IsUUFBUSxHQUNYLEdBQUcsT0FBTyxDQUFDO1FBRVosSUFBSSxVQUFVLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWxELElBQUksSUFBSTtZQUNKLFVBQVUsR0FBRyxlQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpDLE9BQU8sR0FBRyxVQUFVLElBQUksbUJBQVUsQ0FBQyxrQkFBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO0lBQ3RILENBQUM7Q0FDSjtBQWxCRCx3QkFrQkM7QUFFRCxNQUFhLGFBQWMsU0FBUSxNQUFNO0lBQzlCLE1BQU0sQ0FBQyxXQUFXLENBQUUsR0FBVyxFQUFFLE9BQWdCLEVBQUUsSUFBYTtRQUNuRSxNQUFNLEVBQ0YsSUFBSSxFQUNKLGFBQWEsRUFDYixRQUFRLEdBQ1gsR0FBRyxPQUFPLENBQUM7UUFDWixNQUFNLFVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxD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eyBjYW1lbENhc2UsIHVwcGVyRmlyc3QgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbnRlcmZhY2UgQ29tbWFuZCB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBzZWxlY3Rvcj86IHtcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH07XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGFzc2VydGlvblR5cGU/OiBzdHJpbmc7XG4gICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlbmRlciB7XG4gICAgcHVibGljIHN0YXRpYyBjb2RlRnJhbWUgKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBjb21tYW5kTGluZSAobnVtOiBudW1iZXIsIGNvbW1hbmQ6IENvbW1hbmQsIGJhc2U6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgYXNzZXJ0aW9uVHlwZSxcbiAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICB9ID0gY29tbWFuZDtcblxuICAgICAgICBsZXQgY29tbWFuZE51bSA9IGAke2Jhc2UgPyAnID4gJyA6ICcgICAnfSR7bnVtfSBgO1xuXG4gICAgICAgIGlmIChiYXNlKVxuICAgICAgICAgICAgY29tbWFuZE51bSA9IGNoYWxrLmJnUmVkKGNvbW1hbmROdW0pO1xuXG4gICAgICAgIHJldHVybiBgJHtjb21tYW5kTnVtfXwke3VwcGVyRmlyc3QoY2FtZWxDYXNlKGFzc2VydGlvblR5cGUgfHwgdHlwZSkpfSAke3NlbGVjdG9yID8gYCgke3NlbGVjdG9yLnZhbHVlfSlgIDogJyd9XFxuYDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb0NvbG9yUmVuZGVyIGV4dGVuZHMgUmVuZGVyIHtcbiAgICBwdWJsaWMgc3RhdGljIGNvbW1hbmRMaW5lIChudW06IG51bWJlciwgY29tbWFuZDogQ29tbWFuZCwgYmFzZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBhc3NlcnRpb25UeXBlLFxuICAgICAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgIH0gPSBjb21tYW5kO1xuICAgICAgICBjb25zdCBjb21tYW5kTnVtID0gYCR7YmFzZSA/ICcgPiAnIDogJyAgICd9JHtudW19IGA7XG5cbiAgICAgICAgcmV0dXJuIGAke2NvbW1hbmROdW19fCR7dXBwZXJGaXJzdChjYW1lbENhc2UoYXNzZXJ0aW9uVHlwZSB8fCB0eXBlKSl9ICR7c2VsZWN0b3IgPyBgKCR7c2VsZWN0b3IudmFsdWV9KWAgOiAnJ31cXG5gO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEh0bWxSZW5kZXIgZXh0ZW5kcyBSZW5kZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgY29kZUZyYW1lIChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cImNvZGUtZnJhbWVcIj4nICsgc3RyICsgJzwvZGl2Pic7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb21tYW5kTGluZSAobnVtOiBudW1iZXIsIGNvbW1hbmQ6IENvbW1hbmQsIGJhc2U6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgYXNzZXJ0aW9uVHlwZSxcbiAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICB9ID0gY29tbWFuZDtcbiAgICAgICAgY29uc3QgbnVtQ2xhc3MgID0gYmFzZSA/ICdjb2RlLWxpbmUtbnVtLWJhc2UnIDogJ2NvZGUtbGluZS1udW0nO1xuXG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImNvZGUtbGluZVwiPmAgK1xuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCIke251bUNsYXNzfVwiPiR7bnVtfTwvZGl2PmAgK1xuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJjb2RlLWxpbmUtc3JjXCI+JHt1cHBlckZpcnN0KGNhbWVsQ2FzZShhc3NlcnRpb25UeXBlIHx8IHR5cGUpKX0gJHtzZWxlY3RvciA/IGAoJHtzZWxlY3Rvci52YWx1ZX0pYCA6ICcnfTwvZGl2PmAgK1xuICAgICAgICAgICAgYDwvZGl2PmA7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyB7XG4gICAgcmVuZGVyZXI/OiB0eXBlb2YgUmVuZGVyO1xuICAgIGZyYW1lU2l6ZT86IG51bWJlcjtcbiAgICBjb2RlRnJhbWU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyZXJzID0ge1xuICAgIGRlZmF1bHQ6IFJlbmRlcixcbiAgICBodG1sOiAgICBIdG1sUmVuZGVyLFxuICAgIG5vQ29sb3I6IE5vQ29sb3JSZW5kZXIsXG59O1xuXG5leHBvcnQgY2xhc3MgUmF3Q29tbWFuZENhbGxzaXRlUmVjb3JkIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9saXN0OiBDb21tYW5kW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGlkOiBudW1iZXIsIGxpc3Q6IENvbW1hbmRbXSkge1xuICAgICAgICB0aGlzLmlkICAgPSBpZDtcbiAgICAgICAgdGhpcy5fbGlzdCA9IGxpc3Q7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlclN5bmMgKG9wdHM6IFJlbmRlck9wdGlvbnMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICByZW5kZXJlciA9IFJlbmRlcixcbiAgICAgICAgICAgIGZyYW1lU2l6ZSA9IDEsXG4gICAgICAgICAgICBjb2RlRnJhbWUgPSB0cnVlLFxuICAgICAgICB9ID0gb3B0cztcblxuICAgICAgICBpZiAoIWNvZGVGcmFtZSlcbiAgICAgICAgICAgIHJldHVybiAnJztcblxuICAgICAgICBjb25zdCBiYXNlSWQgPSB0aGlzLl9saXN0LmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IHRoaXMuaWQpO1xuXG4gICAgICAgIGlmIChiYXNlSWQgPCAwKVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0SWQgPSBNYXRoLm1heChiYXNlSWQgLSBmcmFtZVNpemUsIDApO1xuICAgICAgICBjb25zdCBsYXN0SWQgID0gTWF0aC5taW4oYmFzZUlkICsgZnJhbWVTaXplLCB0aGlzLl9saXN0Lmxlbmd0aCAtIDEpO1xuICAgICAgICBsZXQgZnJhbWUgICAgID0gJyc7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SWQ7IGkgPD0gbGFzdElkOyBpKyspXG4gICAgICAgICAgICBmcmFtZSArPSByZW5kZXJlci5jb21tYW5kTGluZShpICsgMSwgdGhpcy5fbGlzdFtpXSwgaSA9PT0gYmFzZUlkKTtcblxuICAgICAgICByZXR1cm4gcmVuZGVyZXIuY29kZUZyYW1lKGZyYW1lKTtcbiAgICB9XG59XG4iXX0=