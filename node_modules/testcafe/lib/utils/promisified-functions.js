"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writePng = exports.readPngFile = exports.readPng = exports.sendMessageToChildProcess = exports.exec = exports.deleteFile = exports.readFile = exports.writeFile = exports.stat = exports.readDir = void 0;
const child_process_1 = __importDefault(require("child_process"));
const graceful_fs_1 = __importDefault(require("graceful-fs"));
const pngjs_1 = require("pngjs");
const promisify_event_1 = __importDefault(require("promisify-event"));
const util_1 = require("util");
exports.readDir = util_1.promisify(graceful_fs_1.default.readdir);
exports.stat = util_1.promisify(graceful_fs_1.default.stat);
exports.writeFile = util_1.promisify(graceful_fs_1.default.writeFile);
exports.readFile = util_1.promisify(graceful_fs_1.default.readFile);
exports.deleteFile = util_1.promisify(graceful_fs_1.default.unlink);
exports.exec = util_1.promisify(child_process_1.default.exec);
exports.sendMessageToChildProcess = util_1.promisify((process, ...args) => process.send(...args));
function readPng(buffer) {
    const png = new pngjs_1.PNG();
    const parsedPromise = Promise.race([
        promisify_event_1.default(png, 'parsed'),
        promisify_event_1.default(png, 'error'),
    ]);
    png.parse(buffer);
    return parsedPromise
        .then(() => png);
}
exports.readPng = readPng;
async function readPngFile(filePath) {
    const buffer = await exports.readFile(filePath);
    return await readPng(buffer);
}
exports.readPngFile = readPngFile;
function writePng(filePath, png) {
    const outStream = graceful_fs_1.default.createWriteStream(filePath);
    const pngStream = png.pack();
    const finishPromise = Promise.race([
        promisify_event_1.default(outStream, 'finish'),
        promisify_event_1.default(outStream, 'error'),
        promisify_event_1.default(pngStream, 'error'),
    ]);
    pngStream.pipe(outStream);
    return finishPromise;
}
exports.writePng = writePng;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzaWZpZWQtZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3Byb21pc2lmaWVkLWZ1bmN0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrRUFBeUM7QUFDekMsOERBQTZCO0FBQzdCLGlDQUE0QjtBQUM1QixzRUFBNkM7QUFDN0MsK0JBQWlDO0FBRXBCLFFBQUEsT0FBTyxHQUFNLGdCQUFTLENBQUMscUJBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxRQUFBLElBQUksR0FBUyxnQkFBUyxDQUFDLHFCQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsUUFBQSxTQUFTLEdBQUksZ0JBQVMsQ0FBQyxxQkFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsUUFBUSxHQUFLLGdCQUFTLENBQUMscUJBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwQyxRQUFBLFVBQVUsR0FBRyxnQkFBUyxDQUFDLHFCQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFbEMsUUFBQSxJQUFJLEdBQUcsZ0JBQVMsQ0FBQyx1QkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXBDLFFBQUEseUJBQXlCLEdBQUcsZ0JBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFaEcsU0FBZ0IsT0FBTyxDQUFFLE1BQU07SUFDM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFHLEVBQUUsQ0FBQztJQUV0QixNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQy9CLHlCQUFjLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztRQUM3Qix5QkFBYyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7S0FDL0IsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVsQixPQUFPLGFBQWE7U0FDZixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQVpELDBCQVlDO0FBRU0sS0FBSyxVQUFVLFdBQVcsQ0FBRSxRQUFRO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0JBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV4QyxPQUFPLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFKRCxrQ0FJQztBQUVELFNBQWdCLFFBQVEsQ0FBRSxRQUFRLEVBQUUsR0FBRztJQUNuQyxNQUFNLFNBQVMsR0FBRyxxQkFBRSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUU3QixNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQy9CLHlCQUFjLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQztRQUNuQyx5QkFBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUM7UUFDbEMseUJBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDO0tBQ3JDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFMUIsT0FBTyxhQUFhLENBQUM7QUFDekIsQ0FBQztBQWJELDRCQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBmcyBmcm9tICdncmFjZWZ1bC1mcyc7XG5pbXBvcnQgeyBQTkcgfSBmcm9tICdwbmdqcyc7XG5pbXBvcnQgcHJvbWlzaWZ5RXZlbnQgZnJvbSAncHJvbWlzaWZ5LWV2ZW50JztcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnO1xuXG5leHBvcnQgY29uc3QgcmVhZERpciAgICA9IHByb21pc2lmeShmcy5yZWFkZGlyKTtcbmV4cG9ydCBjb25zdCBzdGF0ICAgICAgID0gcHJvbWlzaWZ5KGZzLnN0YXQpO1xuZXhwb3J0IGNvbnN0IHdyaXRlRmlsZSAgPSBwcm9taXNpZnkoZnMud3JpdGVGaWxlKTtcbmV4cG9ydCBjb25zdCByZWFkRmlsZSAgID0gcHJvbWlzaWZ5KGZzLnJlYWRGaWxlKTtcbmV4cG9ydCBjb25zdCBkZWxldGVGaWxlID0gcHJvbWlzaWZ5KGZzLnVubGluayk7XG5cbmV4cG9ydCBjb25zdCBleGVjID0gcHJvbWlzaWZ5KGNoaWxkUHJvY2Vzcy5leGVjKTtcblxuZXhwb3J0IGNvbnN0IHNlbmRNZXNzYWdlVG9DaGlsZFByb2Nlc3MgPSBwcm9taXNpZnkoKHByb2Nlc3MsIC4uLmFyZ3MpID0+IHByb2Nlc3Muc2VuZCguLi5hcmdzKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkUG5nIChidWZmZXIpIHtcbiAgICBjb25zdCBwbmcgPSBuZXcgUE5HKCk7XG5cbiAgICBjb25zdCBwYXJzZWRQcm9taXNlID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJvbWlzaWZ5RXZlbnQocG5nLCAncGFyc2VkJyksXG4gICAgICAgIHByb21pc2lmeUV2ZW50KHBuZywgJ2Vycm9yJyksXG4gICAgXSk7XG5cbiAgICBwbmcucGFyc2UoYnVmZmVyKTtcblxuICAgIHJldHVybiBwYXJzZWRQcm9taXNlXG4gICAgICAgIC50aGVuKCgpID0+IHBuZyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkUG5nRmlsZSAoZmlsZVBhdGgpIHtcbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZWFkRmlsZShmaWxlUGF0aCk7XG5cbiAgICByZXR1cm4gYXdhaXQgcmVhZFBuZyhidWZmZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVQbmcgKGZpbGVQYXRoLCBwbmcpIHtcbiAgICBjb25zdCBvdXRTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShmaWxlUGF0aCk7XG4gICAgY29uc3QgcG5nU3RyZWFtID0gcG5nLnBhY2soKTtcblxuICAgIGNvbnN0IGZpbmlzaFByb21pc2UgPSBQcm9taXNlLnJhY2UoW1xuICAgICAgICBwcm9taXNpZnlFdmVudChvdXRTdHJlYW0sICdmaW5pc2gnKSxcbiAgICAgICAgcHJvbWlzaWZ5RXZlbnQob3V0U3RyZWFtLCAnZXJyb3InKSxcbiAgICAgICAgcHJvbWlzaWZ5RXZlbnQocG5nU3RyZWFtLCAnZXJyb3InKSxcbiAgICBdKTtcblxuICAgIHBuZ1N0cmVhbS5waXBlKG91dFN0cmVhbSk7XG5cbiAgICByZXR1cm4gZmluaXNoUHJvbWlzZTtcbn1cbiJdfQ==