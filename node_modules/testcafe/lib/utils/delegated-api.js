"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.delegateAPI = exports.getDelegatedAPIList = void 0;
const API_IMPLEMENTATION_METHOD_RE = /^_(\S+)\$(getter|setter)?$/;
function isTestController(obj) {
    var _a;
    return ((_a = obj === null || obj === void 0 ? void 0 : obj.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'TestController';
}
function getTestController(obj) {
    if (isTestController(obj))
        return obj;
    else if (isTestController(obj._testController))
        return obj._testController;
    return null;
}
function getDelegatedAPIList(src) {
    return Object
        .getOwnPropertyNames(src)
        .map(prop => {
        const match = prop.match(API_IMPLEMENTATION_METHOD_RE);
        if (match) {
            return {
                srcProp: prop,
                apiProp: match[1],
                accessor: match[2],
            };
        }
        return null;
    })
        .filter(item => !!item);
}
exports.getDelegatedAPIList = getDelegatedAPIList;
function delegateAPI(dest, apiList, opts) {
    apiList.forEach(({ srcProp, apiProp, accessor }) => {
        let fn = function (...args) {
            if (opts.proxyMethod)
                opts.proxyMethod();
            let handler = null;
            if (opts.useCurrentCtxAsHandler)
                handler = this;
            else if (opts.getHandler)
                handler = opts.getHandler(apiProp, accessor);
            else
                handler = opts.handler;
            return handler[srcProp](...args);
        };
        // NOTE: need to create named function to process possible err.stack correctly
        const createNamedFunction = new Function('srcProp', 'apiProp', 'accessor', 'opts', `
            return ${fn.toString().replace('function', 'function ' + apiProp)}
        `);
        fn = createNamedFunction(srcProp, apiProp, accessor, opts);
        if (accessor === 'getter')
            Object.defineProperty(dest, apiProp, { get: fn, configurable: true });
        else if (accessor === 'setter')
            Object.defineProperty(dest, apiProp, { set: fn, configurable: true });
        else {
            // NOTE: need to create `property` but not a `function` to stop on `debugger`
            // before the action is called
            Object.defineProperty(dest, apiProp, {
                get() {
                    const testController = getTestController(this);
                    if (testController && testController.shouldStop(apiProp)) {
                        // eslint-disable-next-line no-debugger
                        debugger;
                    }
                    return fn;
                },
                configurable: true,
            });
        }
    });
}
exports.delegateAPI = delegateAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZWdhdGVkLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWxlZ2F0ZWQtYXBpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sNEJBQTRCLEdBQUcsNEJBQTRCLENBQUM7QUFFbEUsU0FBUyxnQkFBZ0IsQ0FBRSxHQUFHOztJQUMxQixPQUFPLE9BQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLFdBQVcsMENBQUUsSUFBSSxNQUFLLGdCQUFnQixDQUFDO0FBQ3ZELENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLEdBQUc7SUFDM0IsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7U0FFVixJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7UUFDMUMsT0FBTyxHQUFHLENBQUMsZUFBZSxDQUFDO0lBRS9CLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBRSxHQUFHO0lBQ3BDLE9BQU8sTUFBTTtTQUNSLG1CQUFtQixDQUFDLEdBQUcsQ0FBQztTQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFdkQsSUFBSSxLQUFLLEVBQUU7WUFDUCxPQUFPO2dCQUNILE9BQU8sRUFBRyxJQUFJO2dCQUNkLE9BQU8sRUFBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNyQixDQUFDO1NBQ0w7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQWpCRCxrREFpQkM7QUFFRCxTQUFnQixXQUFXLENBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJO0lBQzVDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtRQUMvQyxJQUFJLEVBQUUsR0FBRyxVQUFVLEdBQUcsSUFBSTtZQUN0QixJQUFJLElBQUksQ0FBQyxXQUFXO2dCQUNoQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFdkIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBRW5CLElBQUksSUFBSSxDQUFDLHNCQUFzQjtnQkFDM0IsT0FBTyxHQUFHLElBQUksQ0FBQztpQkFFZCxJQUFJLElBQUksQ0FBQyxVQUFVO2dCQUNwQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7O2dCQUc3QyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUUzQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQztRQUVGLDhFQUE4RTtRQUM5RSxNQUFNLG1CQUFtQixHQUFHLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTtxQkFDdEUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsV0FBVyxHQUFHLE9BQU8sQ0FBQztTQUNwRSxDQUFDLENBQUM7UUFFSCxFQUFFLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFM0QsSUFBSSxRQUFRLEtBQUssUUFBUTtZQUNyQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBRXJFLElBQUksUUFBUSxLQUFLLFFBQVE7WUFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUVyRTtZQUNELDZFQUE2RTtZQUM3RSw4QkFBOEI7WUFDOUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO2dCQUNqQyxHQUFHO29CQUNDLE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO29CQUUvQyxJQUFJLGNBQWMsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUN0RCx1Q0FBdUM7d0JBQ3ZDLFFBQVEsQ0FBQztxQkFDWjtvQkFFRCxPQUFPLEVBQUUsQ0FBQztnQkFDZCxDQUFDO2dCQUNELFlBQVksRUFBRSxJQUFJO2FBQ3JCLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBbkRELGtDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFQSV9JTVBMRU1FTlRBVElPTl9NRVRIT0RfUkUgPSAvXl8oXFxTKylcXCQoZ2V0dGVyfHNldHRlcik/JC87XG5cbmZ1bmN0aW9uIGlzVGVzdENvbnRyb2xsZXIgKG9iaikge1xuICAgIHJldHVybiBvYmo/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnVGVzdENvbnRyb2xsZXInO1xufVxuXG5mdW5jdGlvbiBnZXRUZXN0Q29udHJvbGxlciAob2JqKSB7XG4gICAgaWYgKGlzVGVzdENvbnRyb2xsZXIob2JqKSlcbiAgICAgICAgcmV0dXJuIG9iajtcblxuICAgIGVsc2UgaWYgKGlzVGVzdENvbnRyb2xsZXIob2JqLl90ZXN0Q29udHJvbGxlcikpXG4gICAgICAgIHJldHVybiBvYmouX3Rlc3RDb250cm9sbGVyO1xuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWxlZ2F0ZWRBUElMaXN0IChzcmMpIHtcbiAgICByZXR1cm4gT2JqZWN0XG4gICAgICAgIC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNyYylcbiAgICAgICAgLm1hcChwcm9wID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcHJvcC5tYXRjaChBUElfSU1QTEVNRU5UQVRJT05fTUVUSE9EX1JFKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjUHJvcDogIHByb3AsXG4gICAgICAgICAgICAgICAgICAgIGFwaVByb3A6ICBtYXRjaFsxXSxcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlQVBJIChkZXN0LCBhcGlMaXN0LCBvcHRzKSB7XG4gICAgYXBpTGlzdC5mb3JFYWNoKCh7IHNyY1Byb3AsIGFwaVByb3AsIGFjY2Vzc29yIH0pID0+IHtcbiAgICAgICAgbGV0IGZuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnByb3h5TWV0aG9kKVxuICAgICAgICAgICAgICAgIG9wdHMucHJveHlNZXRob2QoKTtcblxuICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAob3B0cy51c2VDdXJyZW50Q3R4QXNIYW5kbGVyKVxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzO1xuXG4gICAgICAgICAgICBlbHNlIGlmIChvcHRzLmdldEhhbmRsZXIpXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IG9wdHMuZ2V0SGFuZGxlcihhcGlQcm9wLCBhY2Nlc3Nvcik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gb3B0cy5oYW5kbGVyO1xuXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcltzcmNQcm9wXSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBOT1RFOiBuZWVkIHRvIGNyZWF0ZSBuYW1lZCBmdW5jdGlvbiB0byBwcm9jZXNzIHBvc3NpYmxlIGVyci5zdGFjayBjb3JyZWN0bHlcbiAgICAgICAgY29uc3QgY3JlYXRlTmFtZWRGdW5jdGlvbiA9IG5ldyBGdW5jdGlvbignc3JjUHJvcCcsICdhcGlQcm9wJywgJ2FjY2Vzc29yJywgJ29wdHMnLCBgXG4gICAgICAgICAgICByZXR1cm4gJHtmbi50b1N0cmluZygpLnJlcGxhY2UoJ2Z1bmN0aW9uJywgJ2Z1bmN0aW9uICcgKyBhcGlQcm9wKX1cbiAgICAgICAgYCk7XG5cbiAgICAgICAgZm4gPSBjcmVhdGVOYW1lZEZ1bmN0aW9uKHNyY1Byb3AsIGFwaVByb3AsIGFjY2Vzc29yLCBvcHRzKTtcblxuICAgICAgICBpZiAoYWNjZXNzb3IgPT09ICdnZXR0ZXInKVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGFwaVByb3AsIHsgZ2V0OiBmbiwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIGVsc2UgaWYgKGFjY2Vzc29yID09PSAnc2V0dGVyJylcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBhcGlQcm9wLCB7IHNldDogZm4sIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IG5lZWQgdG8gY3JlYXRlIGBwcm9wZXJ0eWAgYnV0IG5vdCBhIGBmdW5jdGlvbmAgdG8gc3RvcCBvbiBgZGVidWdnZXJgXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIGFjdGlvbiBpcyBjYWxsZWRcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBhcGlQcm9wLCB7XG4gICAgICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVzdENvbnRyb2xsZXIgPSBnZXRUZXN0Q29udHJvbGxlcih0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdENvbnRyb2xsZXIgJiYgdGVzdENvbnRyb2xsZXIuc2hvdWxkU3RvcChhcGlQcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=