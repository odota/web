"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
class Assignable {
    _getAssignableProperties() {
        throw new Error('Not implemented');
    }
    _assignFrom(obj, validate, initOptions = {}) {
        if (!obj)
            return;
        const props = this._getAssignableProperties();
        for (let i = 0; i < props.length; i++) {
            const { name, type, required, init, defaultValue } = props[i];
            const path = name.split('.');
            const lastIdx = path.length - 1;
            const last = path[lastIdx];
            let srcObj = obj;
            let destObj = this;
            for (let j = 0; j < lastIdx && srcObj && destObj; j++) {
                srcObj = srcObj[path[j]];
                destObj = destObj[path[j]];
            }
            if (destObj && 'defaultValue' in props[i])
                destObj[name] = defaultValue;
            if (srcObj && destObj) {
                const srcVal = srcObj[last];
                if (srcVal !== void 0 || required) {
                    if (validate && type)
                        type(name, srcVal);
                    destObj[last] = init ? init(name, srcVal, initOptions, validate) : srcVal;
                }
            }
        }
    }
}
exports.default = Assignable;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzaWduYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hc3NpZ25hYmxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnRUFBZ0U7QUFDaEUsZ0VBQWdFO0FBQ2hFLCtDQUErQztBQUMvQyxnRUFBZ0U7O0FBRWhFLE1BQXFCLFVBQVU7SUFDM0Isd0JBQXdCO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsV0FBVyxDQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsV0FBVyxHQUFHLEVBQUU7UUFDeEMsSUFBSSxDQUFDLEdBQUc7WUFDSixPQUFPO1FBRVgsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFFOUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFOUQsTUFBTSxJQUFJLEdBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNoQyxNQUFNLElBQUksR0FBTSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUIsSUFBSSxNQUFNLEdBQUksR0FBRyxDQUFDO1lBQ2xCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztZQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25ELE1BQU0sR0FBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7WUFFRCxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQztZQUVqQyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7Z0JBQ25CLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFNUIsSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLElBQUksUUFBUSxFQUFFO29CQUMvQixJQUFJLFFBQVEsSUFBSSxJQUFJO3dCQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUV2QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztpQkFDN0U7YUFDSjtTQUNKO0lBQ0wsQ0FBQztDQUNKO0FBeENELDZCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFdBUk5JTkc6IHRoaXMgZmlsZSBpcyB1c2VkIGJ5IGJvdGggdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlci5cbi8vIERvIG5vdCB1c2UgYW55IGJyb3dzZXIgb3Igbm9kZS1zcGVjaWZpYyBBUEkhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2lnbmFibGUge1xuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuXG4gICAgX2Fzc2lnbkZyb20gKG9iaiwgdmFsaWRhdGUsIGluaXRPcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKCFvYmopXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLl9nZXRBc3NpZ25hYmxlUHJvcGVydGllcygpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgdHlwZSwgcmVxdWlyZWQsIGluaXQsIGRlZmF1bHRWYWx1ZSB9ID0gcHJvcHNbaV07XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdGggICAgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBjb25zdCBsYXN0SWR4ID0gcGF0aC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgY29uc3QgbGFzdCAgICA9IHBhdGhbbGFzdElkeF07XG4gICAgICAgICAgICBsZXQgc3JjT2JqICA9IG9iajtcbiAgICAgICAgICAgIGxldCBkZXN0T2JqID0gdGhpcztcblxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsYXN0SWR4ICYmIHNyY09iaiAmJiBkZXN0T2JqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBzcmNPYmogID0gc3JjT2JqW3BhdGhbal1dO1xuICAgICAgICAgICAgICAgIGRlc3RPYmogPSBkZXN0T2JqW3BhdGhbal1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVzdE9iaiAmJiAnZGVmYXVsdFZhbHVlJyBpbiBwcm9wc1tpXSlcbiAgICAgICAgICAgICAgICBkZXN0T2JqW25hbWVdID0gZGVmYXVsdFZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoc3JjT2JqICYmIGRlc3RPYmopIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmNWYWwgPSBzcmNPYmpbbGFzdF07XG5cbiAgICAgICAgICAgICAgICBpZiAoc3JjVmFsICE9PSB2b2lkIDAgfHwgcmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlICYmIHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlKG5hbWUsIHNyY1ZhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzdE9ialtsYXN0XSA9IGluaXQgPyBpbml0KG5hbWUsIHNyY1ZhbCwgaW5pdE9wdGlvbnMsIHZhbGlkYXRlKSA6IHNyY1ZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=