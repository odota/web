"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../../../../shared/errors/index");
const utils_1 = require("./utils");
const index_2 = __importDefault(require("../adapter/index"));
const SELECTOR_FILTER_ERROR = {
    filterVisible: 1,
    filterHidden: 2,
    nth: 3,
};
const FILTER_ERROR_TO_API_RE = {
    [SELECTOR_FILTER_ERROR.filterVisible]: /^\.filterVisible\(\)$/,
    [SELECTOR_FILTER_ERROR.filterHidden]: /^\.filterHidden\(\)$/,
    [SELECTOR_FILTER_ERROR.nth]: /^\.nth\(\d+\)$/,
};
class SelectorFilter {
    constructor() {
        this._err = null;
    }
    get error() {
        return this._err;
    }
    set error(message) {
        if (this._err === null)
            this._err = message;
    }
    filter(nodes, options, apiInfo) {
        if (options.filterVisible) {
            nodes = nodes.filter(utils_1.visible);
            this._assertFilterError(nodes, apiInfo, SELECTOR_FILTER_ERROR.filterVisible);
        }
        if (options.filterHidden) {
            nodes = nodes.filter(n => !utils_1.visible(n));
            this._assertFilterError(nodes, apiInfo, SELECTOR_FILTER_ERROR.filterHidden);
        }
        if (options.counterMode) {
            if (options.index === null)
                return nodes.length;
            return SelectorFilter._getNodeByIndex(nodes, options.index) ? 1 : 0;
        }
        if (options.collectionMode) {
            if (options.index !== null) {
                const nodeOnIndex = SelectorFilter._getNodeByIndex(nodes, options.index);
                nodes = nodeOnIndex ? [nodeOnIndex] : [];
                this._assertFilterError(nodes, apiInfo, SELECTOR_FILTER_ERROR.nth);
            }
            return nodes;
        }
        const nodeOnIndex = SelectorFilter._getNodeByIndex(nodes, options.index || 0);
        if (!nodeOnIndex)
            this.error = SelectorFilter._getErrorItem(apiInfo, SELECTOR_FILTER_ERROR.nth);
        return nodeOnIndex;
    }
    cast(searchResult) {
        if (searchResult === null || searchResult === void 0)
            return [];
        else if (searchResult instanceof index_2.default.nativeMethods.Node)
            return [searchResult];
        else if (utils_1.isArrayOfNodes(searchResult))
            return searchResult;
        else if (utils_1.isNodeCollection(searchResult))
            return utils_1.castToArray(searchResult);
        throw new index_1.InvalidSelectorResultError();
    }
    _assertFilterError(filtered, apiInfo, filterError) {
        if (filtered.length === 0)
            this.error = SelectorFilter._getErrorItem(apiInfo, filterError);
    }
    static _getErrorItem({ apiFnChain, apiFnID }, err) {
        if (err) {
            for (let i = apiFnID; i < apiFnChain.length; i++) {
                if (FILTER_ERROR_TO_API_RE[err].test(apiFnChain[i]))
                    return i;
            }
        }
        return null;
    }
    static _getNodeByIndex(nodes, index) {
        return index < 0 ? nodes[nodes.length + index] : nodes[index];
    }
}
exports.default = new SelectorFilter();
//# sourceMappingURL=data:application/json;base64,