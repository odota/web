"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("../utils/shared/adapter/index"));
const index_2 = __importDefault(require("./adapter/index"));
const scroll_1 = require("../utils/shared/scroll");
const positionUtils = __importStar(require("../utils/shared/position"));
const promiseUtils = __importStar(require("../../../shared/utils/promise"));
const style_1 = require("../utils/shared/style");
const is_window_in_iframe_1 = __importDefault(require("../../../utils/is-window-in-iframe"));
const axis_values_1 = __importDefault(require("../../../shared/utils/values/axis-values"));
const DEFAULT_MAX_SCROLL_MARGIN = 50;
const SCROLL_MARGIN_INCREASE_STEP = 20;
class ScrollAutomation {
    constructor(element, scrollOptions, maxScrollMargin) {
        this._element = element;
        this._offsets = new axis_values_1.default(scrollOptions.offsetX, scrollOptions.offsetY);
        this._scrollToCenter = !!scrollOptions.scrollToCenter;
        this._skipParentFrames = !!scrollOptions.skipParentFrames;
        this._maxScrollMargin = maxScrollMargin || { left: DEFAULT_MAX_SCROLL_MARGIN, top: DEFAULT_MAX_SCROLL_MARGIN };
        this._scrollWasPerformed = false;
    }
    static _isScrollValuesChanged(scrollElement, originalScroll) {
        return index_1.default.style.getScrollLeft(scrollElement) !== originalScroll.left ||
            index_1.default.style.getScrollTop(scrollElement) !== originalScroll.top;
    }
    _setScroll(element, { left, top }) {
        const scrollElement = index_1.default.dom.isHtmlElement(element) ? index_1.default.dom.findDocument(element) : element;
        const originalScroll = {
            left: index_1.default.style.getScrollLeft(scrollElement),
            top: index_1.default.style.getScrollTop(scrollElement),
        };
        left = Math.max(left, 0);
        top = Math.max(top, 0);
        let scrollPromise = index_2.default.controller.waitForScroll(scrollElement);
        index_1.default.style.setScrollLeft(scrollElement, left);
        index_1.default.style.setScrollTop(scrollElement, top);
        if (!ScrollAutomation._isScrollValuesChanged(scrollElement, originalScroll)) {
            // @ts-ignore
            scrollPromise.cancel();
            return index_2.default.PromiseCtor.resolve();
        }
        scrollPromise = scrollPromise.then(() => {
            if (!this._scrollWasPerformed)
                this._scrollWasPerformed = ScrollAutomation._isScrollValuesChanged(scrollElement, originalScroll);
        });
        return scrollPromise;
    }
    _getScrollToPoint(dimensions, point, maxScrollMargin) {
        const horizontalCenter = Math.floor(dimensions.width / 2);
        const verticalCenter = Math.floor(dimensions.height / 2);
        const leftScrollMargin = this._scrollToCenter ? horizontalCenter : Math.min(maxScrollMargin.left, horizontalCenter);
        const topScrollMargin = this._scrollToCenter ? verticalCenter : Math.min(maxScrollMargin.top, verticalCenter);
        let { left, top } = dimensions.scroll;
        const needForwardScrollLeft = point.x >= left + dimensions.width - leftScrollMargin;
        const needBackwardScrollLeft = point.x <= left + leftScrollMargin;
        const needForwardScrollTop = point.y >= top + dimensions.height - topScrollMargin;
        const needBackwardScrollTop = point.y <= top + topScrollMargin;
        if (needForwardScrollLeft)
            left = point.x - dimensions.width + leftScrollMargin;
        else if (needBackwardScrollLeft)
            left = point.x - leftScrollMargin;
        if (needForwardScrollTop)
            top = point.y - dimensions.height + topScrollMargin;
        else if (needBackwardScrollTop)
            top = point.y - topScrollMargin;
        return { left, top };
    }
    _getScrollToFullChildView(parentDimensions, childDimensions, maxScrollMargin) {
        const fullViewScroll = { left: null, top: null };
        const canShowFullElementWidth = parentDimensions.width >= childDimensions.width;
        const canShowFullElementHeight = parentDimensions.height >= childDimensions.height;
        const relativePosition = positionUtils.calcRelativePosition(childDimensions, parentDimensions);
        if (canShowFullElementWidth) {
            const availableLeftScrollMargin = parentDimensions.width - childDimensions.width;
            let leftScrollMargin = Math.min(maxScrollMargin.left, availableLeftScrollMargin);
            if (this._scrollToCenter)
                leftScrollMargin = availableLeftScrollMargin / 2;
            if (relativePosition.left < leftScrollMargin)
                fullViewScroll.left = Math.round(parentDimensions.scroll.left + relativePosition.left - leftScrollMargin);
            else if (relativePosition.right < leftScrollMargin) {
                fullViewScroll.left = Math.round(parentDimensions.scroll.left +
                    Math.min(relativePosition.left, -relativePosition.right) +
                    leftScrollMargin);
            }
        }
        if (canShowFullElementHeight) {
            const availableTopScrollMargin = parentDimensions.height - childDimensions.height;
            let topScrollMargin = Math.min(maxScrollMargin.top, availableTopScrollMargin);
            if (this._scrollToCenter)
                topScrollMargin = availableTopScrollMargin / 2;
            if (relativePosition.top < topScrollMargin)
                fullViewScroll.top = Math.round(parentDimensions.scroll.top + relativePosition.top - topScrollMargin);
            else if (relativePosition.bottom < topScrollMargin) {
                fullViewScroll.top = Math.round(parentDimensions.scroll.top +
                    Math.min(relativePosition.top, -relativePosition.bottom) +
                    topScrollMargin);
            }
        }
        return fullViewScroll;
    }
    static _getChildPoint(parentDimensions, childDimensions, offsets) {
        return axis_values_1.default.create(childDimensions)
            .sub(axis_values_1.default.create(parentDimensions))
            .add(axis_values_1.default.create(parentDimensions.scroll))
            .add(axis_values_1.default.create(childDimensions.border))
            .add(offsets);
    }
    _getScrollPosition(parentDimensions, childDimensions, offsets, maxScrollMargin) {
        const childPoint = ScrollAutomation._getChildPoint(parentDimensions, childDimensions, offsets);
        const scrollToPoint = this._getScrollToPoint(parentDimensions, childPoint, maxScrollMargin);
        const scrollToFullView = this._getScrollToFullChildView(parentDimensions, childDimensions, maxScrollMargin);
        return {
            left: Math.max(scrollToFullView.left === null ? scrollToPoint.left : scrollToFullView.left, 0),
            top: Math.max(scrollToFullView.top === null ? scrollToPoint.top : scrollToFullView.top, 0),
        };
    }
    static _getChildPointAfterScroll(parentDimensions, childDimensions, currentScroll, offsets) {
        return axis_values_1.default.create(childDimensions)
            .add(axis_values_1.default.create(parentDimensions.scroll))
            .sub(axis_values_1.default.create(currentScroll))
            .add(offsets);
    }
    _isChildFullyVisible(parentDimensions, childDimensions, offsets) {
        const childPoint = ScrollAutomation._getChildPointAfterScroll(parentDimensions, childDimensions, parentDimensions.scroll, offsets);
        const zeroMargin = { left: 0, top: 0 };
        const { left, top } = this._getScrollPosition(parentDimensions, childDimensions, offsets, zeroMargin);
        return !this._isTargetElementObscuredInPoint(childPoint) &&
            left === parentDimensions.scroll.left && top === parentDimensions.scroll.top;
    }
    _scrollToChild(parent, child, offsets) {
        const parentDimensions = positionUtils.getClientDimensions(parent);
        const childDimensions = positionUtils.getClientDimensions(child);
        const windowWidth = index_1.default.style.getInnerWidth(window);
        const windowHeight = index_1.default.style.getInnerHeight(window);
        let scrollPos = parentDimensions.scroll;
        let needScroll = !this._isChildFullyVisible(parentDimensions, childDimensions, offsets);
        while (needScroll) {
            scrollPos = this._getScrollPosition(parentDimensions, childDimensions, offsets, this._maxScrollMargin);
            const childPoint = ScrollAutomation._getChildPointAfterScroll(parentDimensions, childDimensions, scrollPos, offsets);
            const isTargetObscured = this._isTargetElementObscuredInPoint(childPoint);
            this._maxScrollMargin.left += SCROLL_MARGIN_INCREASE_STEP;
            if (this._maxScrollMargin.left >= windowWidth) {
                this._maxScrollMargin.left = DEFAULT_MAX_SCROLL_MARGIN;
                this._maxScrollMargin.top += SCROLL_MARGIN_INCREASE_STEP;
            }
            needScroll = isTargetObscured && this._maxScrollMargin.top < windowHeight;
        }
        this._maxScrollMargin = { left: DEFAULT_MAX_SCROLL_MARGIN, top: DEFAULT_MAX_SCROLL_MARGIN };
        return this._setScroll(parent, scrollPos);
    }
    _scrollElement() {
        if (!scroll_1.hasScroll(this._element))
            return index_2.default.PromiseCtor.resolve();
        const elementDimensions = positionUtils.getClientDimensions(this._element);
        const scroll = this._getScrollToPoint(elementDimensions, this._offsets, this._maxScrollMargin);
        return this._setScroll(this._element, scroll);
    }
    _scrollParents() {
        const parents = scroll_1.getScrollableParents(this._element);
        let currentChild = this._element;
        const scrollLeft = index_1.default.style.getScrollLeft(currentChild);
        const scrollTop = index_1.default.style.getScrollTop(currentChild);
        const currentOffset = axis_values_1.default.create(this._offsets).sub(new axis_values_1.default(scrollLeft, scrollTop).round());
        let childDimensions = null;
        let parentDimensions = null;
        const scrollParentsPromise = promiseUtils.times(parents.length, i => {
            return this._scrollToChild(parents[i], currentChild, currentOffset)
                .then(() => {
                childDimensions = positionUtils.getClientDimensions(currentChild);
                parentDimensions = positionUtils.getClientDimensions(parents[i]);
                currentOffset.add(axis_values_1.default.create(childDimensions))
                    .sub(axis_values_1.default.create(parentDimensions))
                    .add(axis_values_1.default.create(parentDimensions.border));
                currentChild = parents[i];
            });
        });
        const state = {
            scrollWasPerformed: this._scrollWasPerformed,
            offsetX: currentOffset.x,
            offsetY: currentOffset.y,
            maxScrollMargin: this._maxScrollMargin,
        };
        if (!index_1.default.sendRequestToFrame)
            return scrollParentsPromise.then(() => state);
        return scrollParentsPromise
            .then(() => {
            if (this._skipParentFrames || !is_window_in_iframe_1.default(window))
                return;
            state.cmd = ScrollAutomation.SCROLL_REQUEST_CMD;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, consistent-return
            return index_1.default.sendRequestToFrame(state, ScrollAutomation.SCROLL_RESPONSE_CMD, window.parent);
        })
            .then(() => this._scrollWasPerformed);
    }
    static _getFixedAncestorOrSelf(element) {
        return index_1.default.dom.findParent(element, true, style_1.isFixedElement);
    }
    _isTargetElementObscuredInPoint(point) {
        const elementInPoint = positionUtils.getElementFromPoint(point);
        if (!elementInPoint)
            return false;
        const fixedElement = ScrollAutomation._getFixedAncestorOrSelf(elementInPoint);
        return !!fixedElement && !fixedElement.contains(this._element);
    }
    run() {
        return this._scrollElement()
            .then(() => this._scrollParents());
    }
}
exports.default = ScrollAutomation;
ScrollAutomation.SCROLL_REQUEST_CMD = 'automation|scroll|request';
ScrollAutomation.SCROLL_RESPONSE_CMD = 'automation|scroll|response';
//# sourceMappingURL=data:application/json;base64,