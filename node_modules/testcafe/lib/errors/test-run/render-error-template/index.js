"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../types");
const utils_1 = require("../utils");
const templates_1 = __importDefault(require("../templates"));
const utils_2 = require("./utils");
function getTestCafeErrorInCustomScriptError(err, viewportWidth) {
    const originErrTemplate = templates_1.default[err.originError.code];
    const originErrMessage = '\n' + err.originError.message;
    let originCallsiteMarkup = '';
    if (utils_2.shouldRenderHtmlWithoutStack(err)) {
        // HACK: we need to get callsite for custom TestCafe script without real file for it.
        // We use expression as a file content
        originCallsiteMarkup = typeof err.errCallsite === 'string' ? err.errCallsite : utils_2.renderHtmlWithoutStack(err);
    }
    const originErrorText = originErrTemplate ? originErrTemplate(err.originError, viewportWidth) : originErrMessage +
        '\n';
    return utils_1.markup(err, `
        An unhandled error occurred in the custom script:
        ${originErrorText}${!originCallsiteMarkup ? `\n${utils_1.formatExpressionMessage(err.expression, err.line, err.column)}` : ''}
    `, originCallsiteMarkup);
}
function renderErrorTemplate(err, viewportWidth) {
    if (err.code === types_1.TEST_RUN_ERRORS.uncaughtTestCafeErrorInCustomScript)
        return getTestCafeErrorInCustomScriptError(err, viewportWidth);
    return utils_1.markup(err, templates_1.default[err.code](err, viewportWidth));
}
exports.default = renderErrorTemplate;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZXJyb3JzL3Rlc3QtcnVuL3JlbmRlci1lcnJvci10ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUE4QztBQUM5QyxvQ0FBMkQ7QUFDM0QsNkRBQXFDO0FBQ3JDLG1DQUErRTtBQUcvRSxTQUFTLG1DQUFtQyxDQUFFLEdBQUcsRUFBRSxhQUFhO0lBQzVELE1BQU0saUJBQWlCLEdBQUksbUJBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELE1BQU0sZ0JBQWdCLEdBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBQzFELElBQUksb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0lBRTlCLElBQUksb0NBQTRCLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbkMscUZBQXFGO1FBQ3JGLHNDQUFzQztRQUN0QyxvQkFBb0IsR0FBRyxPQUFPLEdBQUcsQ0FBQyxXQUFXLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyw4QkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM5RztJQUVELE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7UUFDaEIsSUFBSSxDQUFDO0lBRXJHLE9BQU8sY0FBTSxDQUFDLEdBQUcsRUFBRTs7VUFFYixlQUFlLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsS0FBSywrQkFBdUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7S0FDeEgsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxTQUF3QixtQkFBbUIsQ0FBRSxHQUFHLEVBQUUsYUFBYTtJQUMzRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssdUJBQWUsQ0FBQyxtQ0FBbUM7UUFDaEUsT0FBTyxtQ0FBbUMsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFbkUsT0FBTyxjQUFNLENBQUMsR0FBRyxFQUFFLG1CQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFMRCxzQ0FLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRFU1RfUlVOX0VSUk9SUyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IG1hcmt1cCwgZm9ybWF0RXhwcmVzc2lvbk1lc3NhZ2UgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgVEVNUExBVEVTIGZyb20gJy4uL3RlbXBsYXRlcyc7XG5pbXBvcnQgeyByZW5kZXJIdG1sV2l0aG91dFN0YWNrLCBzaG91bGRSZW5kZXJIdG1sV2l0aG91dFN0YWNrIH0gZnJvbSAnLi91dGlscyc7XG5cblxuZnVuY3Rpb24gZ2V0VGVzdENhZmVFcnJvckluQ3VzdG9tU2NyaXB0RXJyb3IgKGVyciwgdmlld3BvcnRXaWR0aCkge1xuICAgIGNvbnN0IG9yaWdpbkVyclRlbXBsYXRlICA9IFRFTVBMQVRFU1tlcnIub3JpZ2luRXJyb3IuY29kZV07XG4gICAgY29uc3Qgb3JpZ2luRXJyTWVzc2FnZSAgID0gJ1xcbicgKyBlcnIub3JpZ2luRXJyb3IubWVzc2FnZTtcbiAgICBsZXQgb3JpZ2luQ2FsbHNpdGVNYXJrdXAgPSAnJztcblxuICAgIGlmIChzaG91bGRSZW5kZXJIdG1sV2l0aG91dFN0YWNrKGVycikpIHtcbiAgICAgICAgLy8gSEFDSzogd2UgbmVlZCB0byBnZXQgY2FsbHNpdGUgZm9yIGN1c3RvbSBUZXN0Q2FmZSBzY3JpcHQgd2l0aG91dCByZWFsIGZpbGUgZm9yIGl0LlxuICAgICAgICAvLyBXZSB1c2UgZXhwcmVzc2lvbiBhcyBhIGZpbGUgY29udGVudFxuICAgICAgICBvcmlnaW5DYWxsc2l0ZU1hcmt1cCA9IHR5cGVvZiBlcnIuZXJyQ2FsbHNpdGUgPT09ICdzdHJpbmcnID8gZXJyLmVyckNhbGxzaXRlIDogcmVuZGVySHRtbFdpdGhvdXRTdGFjayhlcnIpO1xuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbkVycm9yVGV4dCA9IG9yaWdpbkVyclRlbXBsYXRlID8gb3JpZ2luRXJyVGVtcGxhdGUoZXJyLm9yaWdpbkVycm9yLCB2aWV3cG9ydFdpZHRoKSA6IG9yaWdpbkVyck1lc3NhZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nO1xuXG4gICAgcmV0dXJuIG1hcmt1cChlcnIsIGBcbiAgICAgICAgQW4gdW5oYW5kbGVkIGVycm9yIG9jY3VycmVkIGluIHRoZSBjdXN0b20gc2NyaXB0OlxuICAgICAgICAke29yaWdpbkVycm9yVGV4dH0keyFvcmlnaW5DYWxsc2l0ZU1hcmt1cCA/IGBcXG4ke2Zvcm1hdEV4cHJlc3Npb25NZXNzYWdlKGVyci5leHByZXNzaW9uLCBlcnIubGluZSwgZXJyLmNvbHVtbil9YCA6ICcnfVxuICAgIGAsIG9yaWdpbkNhbGxzaXRlTWFya3VwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyRXJyb3JUZW1wbGF0ZSAoZXJyLCB2aWV3cG9ydFdpZHRoKSB7XG4gICAgaWYgKGVyci5jb2RlID09PSBURVNUX1JVTl9FUlJPUlMudW5jYXVnaHRUZXN0Q2FmZUVycm9ySW5DdXN0b21TY3JpcHQpXG4gICAgICAgIHJldHVybiBnZXRUZXN0Q2FmZUVycm9ySW5DdXN0b21TY3JpcHRFcnJvcihlcnIsIHZpZXdwb3J0V2lkdGgpO1xuXG4gICAgcmV0dXJuIG1hcmt1cChlcnIsIFRFTVBMQVRFU1tlcnIuY29kZV0oZXJyLCB2aWV3cG9ydFdpZHRoKSk7XG59XG4iXX0=