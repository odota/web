"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const lodash_1 = require("lodash");
const internal_modules_prefix_1 = __importDefault(require("./internal-modules-prefix"));
const BABEL = require.resolve('@babel/core');
const BABEL_MODULES_DIR = BABEL.replace(new RegExp(`^(.*${lodash_1.escapeRegExp(path_1.sep)}node_modules${lodash_1.escapeRegExp(path_1.sep)})(.*)`), '$1');
const BABEL_7 = BABEL_MODULES_DIR + '@babel';
const BABEL_RELATED = BABEL_MODULES_DIR + 'babel-';
const REGENERATOR_RUNTIME = BABEL_MODULES_DIR + 'regenerator-runtime' + path_1.sep;
const GENSYNC = BABEL_MODULES_DIR + 'gensync'; // NOTE: @babel/parser uses this module internally.
const TESTCAFE_LIB = path_1.join(__dirname, '../');
const TESTCAFE_BIN = path_1.join(__dirname, '../../bin');
const TESTCAFE_SRC = path_1.join(__dirname, '../../src');
const TESTCAFE_HAMMERHEAD = require.resolve('testcafe-hammerhead');
const SOURCE_MAP_SUPPORT = require.resolve('source-map-support');
const INTERNAL_STARTS_WITH_PATH_SEGMENTS = [
    TESTCAFE_LIB,
    TESTCAFE_BIN,
    TESTCAFE_SRC,
    BABEL_RELATED,
    REGENERATOR_RUNTIME,
    GENSYNC,
    BABEL_7,
    internal_modules_prefix_1.default,
];
const INTERNAL_INCLUDES_PATH_SEGMENTS = [
    SOURCE_MAP_SUPPORT,
    TESTCAFE_HAMMERHEAD,
];
function isInternalFile(filename = '') {
    return !filename ||
        !filename.includes(path_1.sep) ||
        INTERNAL_INCLUDES_PATH_SEGMENTS.some(pathSegment => filename.includes(pathSegment)) ||
        INTERNAL_STARTS_WITH_PATH_SEGMENTS.some(pathSegment => filename.startsWith(pathSegment));
}
function default_1(frame) {
    // NOTE: filter out the internals of node.js and assertion libraries
    const filename = frame.getFileName();
    return isInternalFile(filename);
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtaW50ZXJuYWwtc3RhY2stZnJhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2lzLWludGVybmFsLXN0YWNrLWZyYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQWlDO0FBQ2pDLG1DQUFrRDtBQUNsRCx3RkFBZ0U7QUFHaEUsTUFBTSxLQUFLLEdBQWlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0QsTUFBTSxpQkFBaUIsR0FBSyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8scUJBQVEsQ0FBQyxVQUFHLENBQUMsZUFBZSxxQkFBUSxDQUFDLFVBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNySCxNQUFNLE9BQU8sR0FBZSxpQkFBaUIsR0FBRyxRQUFRLENBQUM7QUFDekQsTUFBTSxhQUFhLEdBQVMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO0FBQ3pELE1BQU0sbUJBQW1CLEdBQUcsaUJBQWlCLEdBQUcscUJBQXFCLEdBQUcsVUFBRyxDQUFDO0FBQzVFLE1BQU0sT0FBTyxHQUFlLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDLG1EQUFtRDtBQUM5RyxNQUFNLFlBQVksR0FBVSxXQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25ELE1BQU0sWUFBWSxHQUFVLFdBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDekQsTUFBTSxZQUFZLEdBQVUsV0FBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN6RCxNQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNuRSxNQUFNLGtCQUFrQixHQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUVsRSxNQUFNLGtDQUFrQyxHQUFHO0lBQ3ZDLFlBQVk7SUFDWixZQUFZO0lBQ1osWUFBWTtJQUNaLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsT0FBTztJQUNQLE9BQU87SUFDUCxpQ0FBdUI7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sK0JBQStCLEdBQUc7SUFDcEMsa0JBQWtCO0lBQ2xCLG1CQUFtQjtDQUN0QixDQUFDO0FBRUYsU0FBUyxjQUFjLENBQUUsUUFBUSxHQUFHLEVBQUU7SUFDbEMsT0FBTyxDQUFDLFFBQVE7UUFDWixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBRyxDQUFDO1FBQ3ZCLCtCQUErQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbkYsa0NBQWtDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ2pHLENBQUM7QUFFRCxtQkFBeUIsS0FBaUI7SUFDdEMsb0VBQW9FO0lBQ3BFLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVyQyxPQUFPLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBTEQsNEJBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXAsIGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IGVzY2FwZVJlZ0V4cCBhcyBlc2NhcGVSZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgSU5URVJOQUxfTU9EVUxFU19QUkVGSVggZnJvbSAnLi9pbnRlcm5hbC1tb2R1bGVzLXByZWZpeCc7XG5pbXBvcnQgeyBTdGFja0ZyYW1lIH0gZnJvbSAnZXJyb3Itc3RhY2stcGFyc2VyJztcblxuY29uc3QgQkFCRUwgICAgICAgICAgICAgICA9IHJlcXVpcmUucmVzb2x2ZSgnQGJhYmVsL2NvcmUnKTtcbmNvbnN0IEJBQkVMX01PRFVMRVNfRElSICAgPSBCQUJFTC5yZXBsYWNlKG5ldyBSZWdFeHAoYF4oLioke2VzY2FwZVJlKHNlcCl9bm9kZV9tb2R1bGVzJHtlc2NhcGVSZShzZXApfSkoLiopYCksICckMScpO1xuY29uc3QgQkFCRUxfNyAgICAgICAgICAgICA9IEJBQkVMX01PRFVMRVNfRElSICsgJ0BiYWJlbCc7XG5jb25zdCBCQUJFTF9SRUxBVEVEICAgICAgID0gQkFCRUxfTU9EVUxFU19ESVIgKyAnYmFiZWwtJztcbmNvbnN0IFJFR0VORVJBVE9SX1JVTlRJTUUgPSBCQUJFTF9NT0RVTEVTX0RJUiArICdyZWdlbmVyYXRvci1ydW50aW1lJyArIHNlcDtcbmNvbnN0IEdFTlNZTkMgICAgICAgICAgICAgPSBCQUJFTF9NT0RVTEVTX0RJUiArICdnZW5zeW5jJzsgLy8gTk9URTogQGJhYmVsL3BhcnNlciB1c2VzIHRoaXMgbW9kdWxlIGludGVybmFsbHkuXG5jb25zdCBURVNUQ0FGRV9MSUIgICAgICAgID0gam9pbihfX2Rpcm5hbWUsICcuLi8nKTtcbmNvbnN0IFRFU1RDQUZFX0JJTiAgICAgICAgPSBqb2luKF9fZGlybmFtZSwgJy4uLy4uL2JpbicpO1xuY29uc3QgVEVTVENBRkVfU1JDICAgICAgICA9IGpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc3JjJyk7XG5jb25zdCBURVNUQ0FGRV9IQU1NRVJIRUFEID0gcmVxdWlyZS5yZXNvbHZlKCd0ZXN0Y2FmZS1oYW1tZXJoZWFkJyk7XG5jb25zdCBTT1VSQ0VfTUFQX1NVUFBPUlQgID0gcmVxdWlyZS5yZXNvbHZlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKTtcblxuY29uc3QgSU5URVJOQUxfU1RBUlRTX1dJVEhfUEFUSF9TRUdNRU5UUyA9IFtcbiAgICBURVNUQ0FGRV9MSUIsXG4gICAgVEVTVENBRkVfQklOLFxuICAgIFRFU1RDQUZFX1NSQyxcbiAgICBCQUJFTF9SRUxBVEVELFxuICAgIFJFR0VORVJBVE9SX1JVTlRJTUUsXG4gICAgR0VOU1lOQyxcbiAgICBCQUJFTF83LFxuICAgIElOVEVSTkFMX01PRFVMRVNfUFJFRklYLFxuXTtcblxuY29uc3QgSU5URVJOQUxfSU5DTFVERVNfUEFUSF9TRUdNRU5UUyA9IFtcbiAgICBTT1VSQ0VfTUFQX1NVUFBPUlQsXG4gICAgVEVTVENBRkVfSEFNTUVSSEVBRCxcbl07XG5cbmZ1bmN0aW9uIGlzSW50ZXJuYWxGaWxlIChmaWxlbmFtZSA9ICcnKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICFmaWxlbmFtZSB8fFxuICAgICAgICAhZmlsZW5hbWUuaW5jbHVkZXMoc2VwKSB8fFxuICAgICAgICBJTlRFUk5BTF9JTkNMVURFU19QQVRIX1NFR01FTlRTLnNvbWUocGF0aFNlZ21lbnQgPT4gZmlsZW5hbWUuaW5jbHVkZXMocGF0aFNlZ21lbnQpKSB8fFxuICAgICAgICBJTlRFUk5BTF9TVEFSVFNfV0lUSF9QQVRIX1NFR01FTlRTLnNvbWUocGF0aFNlZ21lbnQgPT4gZmlsZW5hbWUuc3RhcnRzV2l0aChwYXRoU2VnbWVudCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZnJhbWU6IFN0YWNrRnJhbWUpOiBib29sZWFuIHtcbiAgICAvLyBOT1RFOiBmaWx0ZXIgb3V0IHRoZSBpbnRlcm5hbHMgb2Ygbm9kZS5qcyBhbmQgYXNzZXJ0aW9uIGxpYnJhcmllc1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZnJhbWUuZ2V0RmlsZU5hbWUoKTtcblxuICAgIHJldHVybiBpc0ludGVybmFsRmlsZShmaWxlbmFtZSk7XG59XG4iXX0=