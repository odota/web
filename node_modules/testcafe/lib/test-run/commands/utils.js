"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExecutableOnClientCommand = exports.isJSExpression = exports.isExecutableInTopWindowOnly = exports.isServiceCommand = exports.isBrowserManipulationCommand = exports.isResizeWindowCommand = exports.isScreenshotCommand = exports.canSetDebuggerBreakpointBeforeCommand = exports.isAssertionCommand = exports.isObservationCommand = exports.isCommandRejectableByPageError = void 0;
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
const type_1 = __importDefault(require("./type"));
const RAW_API_JS_EXPRESSION_TYPE = 'js-expr';
function isCommandRejectableByPageError(command) {
    return !isObservationCommand(command) && !isBrowserManipulationCommand(command) && !isServiceCommand(command) ||
        isResizeWindowCommand(command)
            && !isWindowSwitchingCommand(command);
}
exports.isCommandRejectableByPageError = isCommandRejectableByPageError;
function isClientFunctionCommand(command) {
    return command.type === type_1.default.executeClientFunction ||
        command.type === type_1.default.executeSelector;
}
function isObservationCommand(command) {
    return isClientFunctionCommand(command) ||
        command.type === type_1.default.wait ||
        command.type === type_1.default.assertion ||
        command.type === type_1.default.executeExpression;
}
exports.isObservationCommand = isObservationCommand;
function isAssertionCommand(command) {
    return !!command.assertionType;
}
exports.isAssertionCommand = isAssertionCommand;
function isWindowSwitchingCommand(command) {
    return command.type === type_1.default.switchToIframe || command.type === type_1.default.switchToMainWindow;
}
function canSetDebuggerBreakpointBeforeCommand(command) {
    return command.type !== type_1.default.debug && !isClientFunctionCommand(command) && !isServiceCommand(command);
}
exports.canSetDebuggerBreakpointBeforeCommand = canSetDebuggerBreakpointBeforeCommand;
function isScreenshotCommand(command) {
    return command.type === type_1.default.takeScreenshot ||
        command.type === type_1.default.takeElementScreenshot ||
        command.type === type_1.default.takeScreenshotOnFail;
}
exports.isScreenshotCommand = isScreenshotCommand;
function isResizeWindowCommand(command) {
    return command.type === type_1.default.resizeWindow ||
        command.type === type_1.default.resizeWindowToFitDevice ||
        command.type === type_1.default.maximizeWindow;
}
exports.isResizeWindowCommand = isResizeWindowCommand;
function isBrowserManipulationCommand(command) {
    return isScreenshotCommand(command) || isResizeWindowCommand(command);
}
exports.isBrowserManipulationCommand = isBrowserManipulationCommand;
function isServiceCommand(command) {
    return command.type === type_1.default.testDone ||
        command.type === type_1.default.showAssertionRetriesStatus ||
        command.type === type_1.default.hideAssertionRetriesStatus ||
        command.type === type_1.default.setBreakpoint ||
        command.type === type_1.default.takeScreenshotOnFail ||
        command.type === type_1.default.recorder;
}
exports.isServiceCommand = isServiceCommand;
function isExecutableInTopWindowOnly(command) {
    return command.type === type_1.default.testDone ||
        command.type === type_1.default.switchToMainWindow ||
        command.type === type_1.default.setNativeDialogHandler ||
        command.type === type_1.default.getNativeDialogHistory ||
        command.type === type_1.default.setTestSpeed ||
        command.type === type_1.default.showAssertionRetriesStatus ||
        command.type === type_1.default.hideAssertionRetriesStatus ||
        command.type === type_1.default.setBreakpoint ||
        isBrowserManipulationCommand(command) && command.type !== type_1.default.takeElementScreenshot;
}
exports.isExecutableInTopWindowOnly = isExecutableInTopWindowOnly;
function isJSExpression(val) {
    return val !== null && typeof val === 'object' && val.type === RAW_API_JS_EXPRESSION_TYPE &&
        typeof val.value === 'string';
}
exports.isJSExpression = isJSExpression;
function isExecutableOnClientCommand(command) {
    return command.type !== type_1.default.wait &&
        command.type !== type_1.default.setPageLoadTimeout &&
        command.type !== type_1.default.debug &&
        command.type !== type_1.default.useRole &&
        command.type !== type_1.default.assertion &&
        command.type !== type_1.default.executeExpression &&
        command.type !== type_1.default.executeAsyncExpression;
}
exports.isExecutableOnClientCommand = isExecutableOnClientCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdC1ydW4vY29tbWFuZHMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSwrQ0FBK0M7QUFDL0MsZ0VBQWdFO0FBQ2hFLGtEQUEwQjtBQUUxQixNQUFNLDBCQUEwQixHQUFHLFNBQVMsQ0FBQztBQUU3QyxTQUFnQiw4QkFBOEIsQ0FBRSxPQUFPO0lBQ25ELE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO1FBQ3RHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQztlQUMzQixDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFKRCx3RUFJQztBQUVELFNBQVMsdUJBQXVCLENBQUUsT0FBTztJQUNyQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssY0FBSSxDQUFDLHFCQUFxQjtRQUMzQyxPQUFPLENBQUMsSUFBSSxLQUFLLGNBQUksQ0FBQyxlQUFlLENBQUM7QUFDakQsQ0FBQztBQUVELFNBQWdCLG9CQUFvQixDQUFFLE9BQU87SUFDekMsT0FBTyx1QkFBdUIsQ0FBQyxPQUFPLENBQUM7UUFDaEMsT0FBTyxDQUFDLElBQUksS0FBSyxjQUFJLENBQUMsSUFBSTtRQUMxQixPQUFPLENBQUMsSUFBSSxLQUFLLGNBQUksQ0FBQyxTQUFTO1FBQy9CLE9BQU8sQ0FBQyxJQUFJLEtBQUssY0FBSSxDQUFDLGlCQUFpQixDQUFDO0FBQ25ELENBQUM7QUFMRCxvREFLQztBQUVELFNBQWdCLGtCQUFrQixDQUFFLE9BQU87SUFDdkMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUNuQyxDQUFDO0FBRkQsZ0RBRUM7QUFFRCxTQUFTLHdCQUF3QixD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TyxDQUFDLElBQUksS0FBSyxjQUFJLENBQUMsa0JBQWtCO1FBQ3hDLE9BQU8sQ0FBQyxJQUFJLEtBQUssY0FBSSxDQUFDLEtBQUs7UUFDM0IsT0FBTyxDQUFDLElBQUksS0FBSyxjQUFJLENBQUMsT0FBTztRQUM3QixPQUFPLENBQUMsSUFBSSxLQUFLLGNBQUksQ0FBQyxTQUFTO1FBQy9CLE9BQU8sQ0FBQyxJQUFJLEtBQUssY0FBSSxDQUFDLGlCQUFpQjtRQUN2QyxPQUFPLENBQUMsSUFBSSxLQUFLLGNBQUksQ0FBQyxzQkFBc0IsQ0FBQztBQUN4RCxDQUFDO0FBUkQsa0VBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBXQVJOSU5HOiB0aGlzIGZpbGUgaXMgdXNlZCBieSBib3RoIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXIuXG4vLyBEbyBub3QgdXNlIGFueSBicm93c2VyIG9yIG5vZGUtc3BlY2lmaWMgQVBJIVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcblxuY29uc3QgUkFXX0FQSV9KU19FWFBSRVNTSU9OX1RZUEUgPSAnanMtZXhwcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbW1hbmRSZWplY3RhYmxlQnlQYWdlRXJyb3IgKGNvbW1hbmQpIHtcbiAgICByZXR1cm4gIWlzT2JzZXJ2YXRpb25Db21tYW5kKGNvbW1hbmQpICYmICFpc0Jyb3dzZXJNYW5pcHVsYXRpb25Db21tYW5kKGNvbW1hbmQpICYmICFpc1NlcnZpY2VDb21tYW5kKGNvbW1hbmQpIHx8XG4gICAgICAgICAgIGlzUmVzaXplV2luZG93Q29tbWFuZChjb21tYW5kKVxuICAgICAgICAgICAmJiAhaXNXaW5kb3dTd2l0Y2hpbmdDb21tYW5kKGNvbW1hbmQpO1xufVxuXG5mdW5jdGlvbiBpc0NsaWVudEZ1bmN0aW9uQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHJldHVybiBjb21tYW5kLnR5cGUgPT09IFRZUEUuZXhlY3V0ZUNsaWVudEZ1bmN0aW9uIHx8XG4gICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gVFlQRS5leGVjdXRlU2VsZWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmF0aW9uQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHJldHVybiBpc0NsaWVudEZ1bmN0aW9uQ29tbWFuZChjb21tYW5kKSB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUud2FpdCB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUuYXNzZXJ0aW9uIHx8XG4gICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gVFlQRS5leGVjdXRlRXhwcmVzc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXNzZXJ0aW9uQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHJldHVybiAhIWNvbW1hbmQuYXNzZXJ0aW9uVHlwZTtcbn1cblxuZnVuY3Rpb24gaXNXaW5kb3dTd2l0Y2hpbmdDb21tYW5kIChjb21tYW5kKSB7XG4gICAgcmV0dXJuIGNvbW1hbmQudHlwZSA9PT0gVFlQRS5zd2l0Y2hUb0lmcmFtZSB8fCBjb21tYW5kLnR5cGUgPT09IFRZUEUuc3dpdGNoVG9NYWluV2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuU2V0RGVidWdnZXJCcmVha3BvaW50QmVmb3JlQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHJldHVybiBjb21tYW5kLnR5cGUgIT09IFRZUEUuZGVidWcgJiYgIWlzQ2xpZW50RnVuY3Rpb25Db21tYW5kKGNvbW1hbmQpICYmICFpc1NlcnZpY2VDb21tYW5kKGNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTY3JlZW5zaG90Q29tbWFuZCAoY29tbWFuZCkge1xuICAgIHJldHVybiBjb21tYW5kLnR5cGUgPT09IFRZUEUudGFrZVNjcmVlbnNob3QgfHxcbiAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBUWVBFLnRha2VFbGVtZW50U2NyZWVuc2hvdCB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUudGFrZVNjcmVlbnNob3RPbkZhaWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc2l6ZVdpbmRvd0NvbW1hbmQgKGNvbW1hbmQpIHtcbiAgICByZXR1cm4gY29tbWFuZC50eXBlID09PSBUWVBFLnJlc2l6ZVdpbmRvdyB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUucmVzaXplV2luZG93VG9GaXREZXZpY2UgfHxcbiAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBUWVBFLm1heGltaXplV2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyTWFuaXB1bGF0aW9uQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHJldHVybiBpc1NjcmVlbnNob3RDb21tYW5kKGNvbW1hbmQpIHx8IGlzUmVzaXplV2luZG93Q29tbWFuZChjb21tYW5kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VydmljZUNvbW1hbmQgKGNvbW1hbmQpIHtcbiAgICByZXR1cm4gY29tbWFuZC50eXBlID09PSBUWVBFLnRlc3REb25lIHx8XG4gICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gVFlQRS5zaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1cyB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUuaGlkZUFzc2VydGlvblJldHJpZXNTdGF0dXMgfHxcbiAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBUWVBFLnNldEJyZWFrcG9pbnQgfHxcbiAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBUWVBFLnRha2VTY3JlZW5zaG90T25GYWlsIHx8XG4gICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gVFlQRS5yZWNvcmRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXhlY3V0YWJsZUluVG9wV2luZG93T25seSAoY29tbWFuZCkge1xuICAgIHJldHVybiBjb21tYW5kLnR5cGUgPT09IFRZUEUudGVzdERvbmUgfHxcbiAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBUWVBFLnN3aXRjaFRvTWFpbldpbmRvdyB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUuc2V0TmF0aXZlRGlhbG9nSGFuZGxlciB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUuZ2V0TmF0aXZlRGlhbG9nSGlzdG9yeSB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUuc2V0VGVzdFNwZWVkIHx8XG4gICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gVFlQRS5zaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1cyB8fFxuICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFRZUEUuaGlkZUFzc2VydGlvblJldHJpZXNTdGF0dXMgfHxcbiAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBUWVBFLnNldEJyZWFrcG9pbnQgfHxcbiAgICAgICAgICAgaXNCcm93c2VyTWFuaXB1bGF0aW9uQ29tbWFuZChjb21tYW5kKSAmJiBjb21tYW5kLnR5cGUgIT09IFRZUEUudGFrZUVsZW1lbnRTY3JlZW5zaG90O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNKU0V4cHJlc3Npb24gKHZhbCkge1xuICAgIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsLnR5cGUgPT09IFJBV19BUElfSlNfRVhQUkVTU0lPTl9UWVBFICYmXG4gICAgICAgICAgIHR5cGVvZiB2YWwudmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRhYmxlT25DbGllbnRDb21tYW5kIChjb21tYW5kKSB7XG4gICAgcmV0dXJuIGNvbW1hbmQudHlwZSAhPT0gVFlQRS53YWl0ICYmXG4gICAgICAgICAgIGNvbW1hbmQudHlwZSAhPT0gVFlQRS5zZXRQYWdlTG9hZFRpbWVvdXQgJiZcbiAgICAgICAgICAgY29tbWFuZC50eXBlICE9PSBUWVBFLmRlYnVnICYmXG4gICAgICAgICAgIGNvbW1hbmQudHlwZSAhPT0gVFlQRS51c2VSb2xlICYmXG4gICAgICAgICAgIGNvbW1hbmQudHlwZSAhPT0gVFlQRS5hc3NlcnRpb24gJiZcbiAgICAgICAgICAgY29tbWFuZC50eXBlICE9PSBUWVBFLmV4ZWN1dGVFeHByZXNzaW9uICYmXG4gICAgICAgICAgIGNvbW1hbmQudHlwZSAhPT0gVFlQRS5leGVjdXRlQXN5bmNFeHByZXNzaW9uO1xufVxuIl19