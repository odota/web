"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const fs_1 = __importDefault(require("fs"));
const modules_graph_1 = __importDefault(require("./modules-graph"));
const node_modules_folder_name_1 = __importDefault(require("../../shared/node-modules-folder-name"));
const to_posix_path_1 = __importDefault(require("../../utils/to-posix-path"));
const WATCH_LOCKED_TIMEOUT = 700;
let instance = null;
const BABEL_PRESET_STAGE_2_MODULE_PATH = 'lib/compiler/babel/preset-stage-2.js';
class FileWatcher extends events_1.default {
    constructor() {
        super();
        if (!instance) {
            this.watchers = {};
            this.lockedFiles = {};
            this.modulesGraph = null;
            this.lastChangedFiles = [];
            instance = this;
        }
        return instance;
    }
    _onChanged(controller, file) {
        const cache = require.cache;
        if (!this.modulesGraph) {
            this.modulesGraph = new modules_graph_1.default();
            this.modulesGraph.build(cache, Object.keys(this.watchers));
        }
        else {
            this.lastChangedFiles.forEach(changedFile => this.modulesGraph.rebuildNode(cache, changedFile));
            this.lastChangedFiles = [];
        }
        this.lastChangedFiles.push(file);
        this.modulesGraph.clearParentsCache(cache, file);
        controller.runTests(true);
    }
    _watch(controller, file) {
        if (this.lockedFiles[file])
            return;
        this.lockedFiles[file] = setTimeout(() => {
            this._onChanged(controller, file);
            delete this.lockedFiles[file];
        }, WATCH_LOCKED_TIMEOUT);
    }
    stop() {
        Object.values(this.watchers).forEach(watcher => {
            watcher.close();
        });
    }
    addFile(controller, file) {
        if (this.watchers[file] || !FileWatcher.shouldWatchFile(file))
            return;
        if (this.modulesGraph) {
            this.lastChangedFiles.push(file);
            this.modulesGraph.addNode(file, require.cache);
        }
        this.watchers[file] = fs_1.default.watch(file, () => this._watch(controller, file));
    }
    static shouldWatchFile(file) {
        return !file.includes(node_modules_folder_name_1.default) &&
            !to_posix_path_1.default(file).includes(BABEL_PRESET_STAGE_2_MODULE_PATH);
    }
}
exports.default = FileWatcher;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGl2ZS9maWxlLXdhdGNoZXIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvREFBa0M7QUFDbEMsNENBQW9CO0FBQ3BCLG9FQUEyQztBQUMzQyxxR0FBaUU7QUFDakUsOEVBQW9EO0FBRXBELE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBRWpDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztBQUVwQixNQUFNLGdDQUFnQyxHQUFHLHNDQUFzQyxDQUFDO0FBRWhGLE1BQXFCLFdBQVksU0FBUSxnQkFBWTtJQUNqRDtRQUNJLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLElBQUksQ0FBQyxRQUFRLEdBQVcsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxXQUFXLEdBQVEsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQU8sSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7WUFFM0IsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxVQUFVLENBQUUsVUFBVSxFQUFFLElBQUk7UUFDeEIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUU1QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksdUJBQVksRUFBRSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzlEO2FBQ0k7WUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFakQsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFFLFVBQVUsRUFBRSxJQUFJO1FBQ3BCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDdEIsT0FBTztRQUVYLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVsQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUk7UUFDQSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU8sQ0FBRSxVQUFVLEVBQUUsSUFBSTtRQUNyQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztZQUN6RCxPQUFPO1FBRVgsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBRSxJQUFJO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtDQUFZLENBQUM7WUFDL0IsQ0FBQyx1QkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDSjtBQW5FRCw4QkFtRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IE1vZHVsZXNHcmFwaCBmcm9tICcuL21vZHVsZXMtZ3JhcGgnO1xuaW1wb3J0IE5PREVfTU9EVUxFUyBmcm9tICcuLi8uLi9zaGFyZWQvbm9kZS1tb2R1bGVzLWZvbGRlci1uYW1lJztcbmltcG9ydCB0b1Bvc2l4UGF0aCBmcm9tICcuLi8uLi91dGlscy90by1wb3NpeC1wYXRoJztcblxuY29uc3QgV0FUQ0hfTE9DS0VEX1RJTUVPVVQgPSA3MDA7XG5cbmxldCBpbnN0YW5jZSA9IG51bGw7XG5cbmNvbnN0IEJBQkVMX1BSRVNFVF9TVEFHRV8yX01PRFVMRV9QQVRIID0gJ2xpYi9jb21waWxlci9iYWJlbC9wcmVzZXQtc3RhZ2UtMi5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVXYXRjaGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy53YXRjaGVycyAgICAgICAgID0ge307XG4gICAgICAgICAgICB0aGlzLmxvY2tlZEZpbGVzICAgICAgPSB7fTtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc0dyYXBoICAgICA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMgPSBbXTtcblxuICAgICAgICAgICAgaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIF9vbkNoYW5nZWQgKGNvbnRyb2xsZXIsIGZpbGUpIHtcbiAgICAgICAgY29uc3QgY2FjaGUgPSByZXF1aXJlLmNhY2hlO1xuXG4gICAgICAgIGlmICghdGhpcy5tb2R1bGVzR3JhcGgpIHtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc0dyYXBoID0gbmV3IE1vZHVsZXNHcmFwaCgpO1xuICAgICAgICAgICAgdGhpcy5tb2R1bGVzR3JhcGguYnVpbGQoY2FjaGUsIE9iamVjdC5rZXlzKHRoaXMud2F0Y2hlcnMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFzdENoYW5nZWRGaWxlcy5mb3JFYWNoKGNoYW5nZWRGaWxlID0+IHRoaXMubW9kdWxlc0dyYXBoLnJlYnVpbGROb2RlKGNhY2hlLCBjaGFuZ2VkRmlsZSkpO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q2hhbmdlZEZpbGVzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgdGhpcy5tb2R1bGVzR3JhcGguY2xlYXJQYXJlbnRzQ2FjaGUoY2FjaGUsIGZpbGUpO1xuXG4gICAgICAgIGNvbnRyb2xsZXIucnVuVGVzdHModHJ1ZSk7XG4gICAgfVxuXG4gICAgX3dhdGNoIChjb250cm9sbGVyLCBmaWxlKSB7XG4gICAgICAgIGlmICh0aGlzLmxvY2tlZEZpbGVzW2ZpbGVdKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMubG9ja2VkRmlsZXNbZmlsZV0gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlZChjb250cm9sbGVyLCBmaWxlKTtcblxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubG9ja2VkRmlsZXNbZmlsZV07XG4gICAgICAgIH0sIFdBVENIX0xPQ0tFRF9USU1FT1VUKTtcbiAgICB9XG5cbiAgICBzdG9wICgpIHtcbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLndhdGNoZXJzKS5mb3JFYWNoKHdhdGNoZXIgPT4ge1xuICAgICAgICAgICAgd2F0Y2hlci5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRGaWxlIChjb250cm9sbGVyLCBmaWxlKSB7XG4gICAgICAgIGlmICh0aGlzLndhdGNoZXJzW2ZpbGVdIHx8ICFGaWxlV2F0Y2hlci5zaG91bGRXYXRjaEZpbGUoZmlsZSkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMubW9kdWxlc0dyYXBoKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc0dyYXBoLmFkZE5vZGUoZmlsZSwgcmVxdWlyZS5jYWNoZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndhdGNoZXJzW2ZpbGVdID0gZnMud2F0Y2goZmlsZSwgKCkgPT4gdGhpcy5fd2F0Y2goY29udHJvbGxlciwgZmlsZSkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzaG91bGRXYXRjaEZpbGUgKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuICFmaWxlLmluY2x1ZGVzKE5PREVfTU9EVUxFUykgJiZcbiAgICAgICAgICAgICF0b1Bvc2l4UGF0aChmaWxlKS5pbmNsdWRlcyhCQUJFTF9QUkVTRVRfU1RBR0VfMl9NT0RVTEVfUEFUSCk7XG4gICAgfVxufVxuIl19