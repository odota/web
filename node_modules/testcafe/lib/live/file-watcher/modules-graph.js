"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphlib_1 = require("graphlib");
const node_modules_folder_name_1 = __importDefault(require("../../shared/node-modules-folder-name"));
class ModulesGraph {
    constructor() {
        this.graph = new graphlib_1.Graph();
    }
    _updateChildren(node, cache) {
        const cached = cache[node];
        if (!cached)
            return;
        const outEdges = this.graph.outEdges(node) || [];
        outEdges.forEach(edge => this.graph.removeEdge(edge.v, edge.w));
        const children = cached && cached.children.map(child => child.id);
        if (!children)
            return;
        children.filter(child => !child.includes(node_modules_folder_name_1.default))
            .forEach(child => {
            this.addNode(child, cache);
            this.graph.setEdge(node, child);
        });
    }
    addNode(node, cache) {
        if (this.graph.hasNode(node))
            return;
        const cached = cache[node];
        if (cached)
            this.graph.setNode(node);
        const parent = cached && cached.parent;
        if (parent && !parent.id.includes(node_modules_folder_name_1.default)) {
            this.addNode(parent.id, cache);
            this.graph.setEdge(parent.id, node);
        }
        this._updateChildren(node, cache);
    }
    build(cache, nodes) {
        nodes.forEach(node => this.addNode(node, cache, true));
    }
    rebuildNode(cache, node) {
        this._updateChildren(node, cache);
    }
    clearParentsCache(cache, node) {
        if (!cache[node])
            return;
        delete cache[node];
        const parentEdges = this.graph.inEdges(node);
        if (!parentEdges || !parentEdges.length)
            return;
        parentEdges
            .map(edge => edge.v)
            .forEach(parent => this.clearParentsCache(cache, parent));
    }
}
exports.default = ModulesGraph;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlcy1ncmFwaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saXZlL2ZpbGUtd2F0Y2hlci9tb2R1bGVzLWdyYXBoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQWlDO0FBQ2pDLHFHQUFpRTtBQUVqRSxNQUFxQixZQUFZO0lBQzdCO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGdCQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsZUFBZSxDQUFFLElBQUksRUFBRSxLQUFLO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzQixJQUFJLENBQUMsTUFBTTtZQUNQLE9BQU87UUFFWCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFakQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUV0QixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGtDQUFZLENBQUMsQ0FBQzthQUNsRCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsT0FBTyxDQUFFLElBQUksRUFBRSxLQUFLO1FBQ2hCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ3hCLE9BQU87UUFFWCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0IsSUFBSSxNQUFNO1lBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFdkMsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxrQ0FBWSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdkM7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsS0FBSyxDQUFFLEtBQUssRUFBRSxLQUFLO1FBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxXQUFXLENBQUUsS0FBSyxFQUFFLElBQUk7UUFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELGlCQUFpQixDQUFFLEtBQUssRUFBRSxJQUFJO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ1osT0FBTztRQUVYLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTtZQUNuQyxPQUFPO1FBRVgsV0FBVzthQUNOLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDbkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDSjtBQXBFRCwrQkFvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaCB9IGZyb20gJ2dyYXBobGliJztcbmltcG9ydCBOT0RFX01PRFVMRVMgZnJvbSAnLi4vLi4vc2hhcmVkL25vZGUtbW9kdWxlcy1mb2xkZXItbmFtZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZHVsZXNHcmFwaCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLmdyYXBoID0gbmV3IEdyYXBoKCk7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUNoaWxkcmVuIChub2RlLCBjYWNoZSkge1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtub2RlXTtcblxuICAgICAgICBpZiAoIWNhY2hlZClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb25zdCBvdXRFZGdlcyA9IHRoaXMuZ3JhcGgub3V0RWRnZXMobm9kZSkgfHwgW107XG5cbiAgICAgICAgb3V0RWRnZXMuZm9yRWFjaChlZGdlID0+IHRoaXMuZ3JhcGgucmVtb3ZlRWRnZShlZGdlLnYsIGVkZ2UudykpO1xuXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gY2FjaGVkICYmIGNhY2hlZC5jaGlsZHJlbi5tYXAoY2hpbGQgPT4gY2hpbGQuaWQpO1xuXG4gICAgICAgIGlmICghY2hpbGRyZW4pIHJldHVybjtcblxuICAgICAgICBjaGlsZHJlbi5maWx0ZXIoY2hpbGQgPT4gIWNoaWxkLmluY2x1ZGVzKE5PREVfTU9EVUxFUykpXG4gICAgICAgICAgICAuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGROb2RlKGNoaWxkLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmFwaC5zZXRFZGdlKG5vZGUsIGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZE5vZGUgKG5vZGUsIGNhY2hlKSB7XG4gICAgICAgIGlmICh0aGlzLmdyYXBoLmhhc05vZGUobm9kZSkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbbm9kZV07XG5cbiAgICAgICAgaWYgKGNhY2hlZClcbiAgICAgICAgICAgIHRoaXMuZ3JhcGguc2V0Tm9kZShub2RlKTtcblxuICAgICAgICBjb25zdCBwYXJlbnQgPSBjYWNoZWQgJiYgY2FjaGVkLnBhcmVudDtcblxuICAgICAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuaWQuaW5jbHVkZXMoTk9ERV9NT0RVTEVTKSkge1xuICAgICAgICAgICAgdGhpcy5hZGROb2RlKHBhcmVudC5pZCwgY2FjaGUpO1xuICAgICAgICAgICAgdGhpcy5ncmFwaC5zZXRFZGdlKHBhcmVudC5pZCwgbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihub2RlLCBjYWNoZSk7XG4gICAgfVxuXG4gICAgYnVpbGQgKGNhY2hlLCBub2Rlcykge1xuICAgICAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4gdGhpcy5hZGROb2RlKG5vZGUsIGNhY2hlLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgcmVidWlsZE5vZGUgKGNhY2hlLCBub2RlKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5vZGUsIGNhY2hlKTtcbiAgICB9XG5cbiAgICBjbGVhclBhcmVudHNDYWNoZSAoY2FjaGUsIG5vZGUpIHtcbiAgICAgICAgaWYgKCFjYWNoZVtub2RlXSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBkZWxldGUgY2FjaGVbbm9kZV07XG5cbiAgICAgICAgY29uc3QgcGFyZW50RWRnZXMgPSB0aGlzLmdyYXBoLmluRWRnZXMobm9kZSk7XG5cbiAgICAgICAgaWYgKCFwYXJlbnRFZGdlcyB8fCAhcGFyZW50RWRnZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHBhcmVudEVkZ2VzXG4gICAgICAgICAgICAubWFwKGVkZ2UgPT4gZWRnZS52KVxuICAgICAgICAgICAgLmZvckVhY2gocGFyZW50ID0+IHRoaXMuY2xlYXJQYXJlbnRzQ2FjaGUoY2FjaGUsIHBhcmVudCkpO1xuICAgIH1cbn1cbiJdfQ==