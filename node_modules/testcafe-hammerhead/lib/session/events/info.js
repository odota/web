"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreparedResponseInfo = exports.ResponseInfo = exports.RequestInfo = void 0;
class RequestInfo {
    constructor(ctx) {
        this.requestId = ctx.requestId;
        this.userAgent = (ctx.reqOpts.headers['user-agent'] || '').toString();
        this.url = ctx.isWebSocket ? ctx.reqOpts.url.replace(/^http/, 'ws') : ctx.reqOpts.url;
        this.method = ctx.reqOpts.method.toLowerCase();
        this.isAjax = ctx.isAjax;
        this.headers = ctx.reqOpts.headers;
        this.body = ctx.reqOpts.body;
        this.sessionId = ctx.session.id;
    }
}
exports.RequestInfo = RequestInfo;
class ResponseInfo {
    constructor(ctx) {
        this.requestId = ctx.requestId;
        this.headers = ctx.destRes.headers;
        this.body = ctx.nonProcessedDestResBody;
        this.sessionId = ctx.session.id;
        if (ctx.destRes.statusCode)
            this.statusCode = ctx.destRes.statusCode;
        this.isSameOriginPolicyFailed = ctx.isSameOriginPolicyFailed;
    }
}
exports.ResponseInfo = ResponseInfo;
class PreparedResponseInfo {
    constructor(responseInfo, opts) {
        this.requestId = responseInfo.requestId;
        this.statusCode = responseInfo.statusCode;
        this.sessionId = responseInfo.sessionId;
        this.isSameOriginPolicyFailed = responseInfo.isSameOriginPolicyFailed;
        if (opts.includeHeaders)
            this.headers = responseInfo.headers;
        if (opts.includeBody)
            this.body = responseInfo.body;
    }
}
exports.PreparedResponseInfo = PreparedResponseInfo;
