"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const instruction_1 = __importDefault(require("../instruction"));
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
// Transform:
// const foo = postMessage; foo = postMessage; { _postMessage: postMessage }; return postMessage;
// -->
// const foo = _get$PostMessage(postMessage); foo = _get$PostMessage(postMessage); { _postMessage: _get$PostMessage(postMessage) }; return _get$PostMessage(postMessage);
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.Identifier,
    condition: (node, parent) => {
        if (node.name !== 'postMessage' || !parent)
            return false;
        // Skip: window.postMessage, postMessage.call
        if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression)
            return false;
        // Skip: class X { postMessage () {} }
        if (parent.type === esotope_hammerhead_1.Syntax.MethodDefinition)
            return false;
        // Skip: class postMessage { x () {} }
        if (parent.type === esotope_hammerhead_1.Syntax.ClassDeclaration)
            return false;
        // Skip: function postMessage () { ... }
        if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration) &&
            parent.id === node)
            return false;
        // Skip: function (postMessage) { ... } || function func(postMessage) { ... } || postMessage => { ... }
        if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration ||
            parent.type === esotope_hammerhead_1.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1)
            return false;
        // Skip: { postMessage: value }
        if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.key === node)
            return false;
        // Skip: { postMessage }
        if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.value === node && parent.shorthand)
            return false;
        // Skip: postMessage = value || function x (postMessage = value) { ... }
        if ((parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression || parent.type === esotope_hammerhead_1.Syntax.AssignmentPattern) &&
            parent.left === node)
            return false;
        // Skip: const postMessage = value;
        if (parent.type === esotope_hammerhead_1.Syntax.VariableDeclarator && parent.id === node)
            return false;
        // Skip: postMessage++ || postMessage-- || ++postMessage || --postMessage
        if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--'))
            return false;
        // Skip already transformed: __get$PostMessage(postMessage) || __call$(obj, postMessage, args...);
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier &&
            (parent.callee.name === instruction_1.default.getPostMessage ||
                parent.callee.name === instruction_1.default.callMethod && parent.arguments[1] === node))
            return false;
        // Skip: function x (...postMessage) {}
        if (parent.type === esotope_hammerhead_1.Syntax.RestElement)
            return false;
        // Skip: export { postMessage } from "module";
        if (parent.type === esotope_hammerhead_1.Syntax.ExportSpecifier)
            return false;
        // Skip: import { postMessage } from "module";
        if (parent.type === esotope_hammerhead_1.Syntax.ImportSpecifier)
            return false;
        return true;
    },
    run: node_builder_1.createGetPostMessageMethodCall,
};
exports.default = transformer;module.exports = exports.default;

