"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
const instrumented_1 = require("../instrumented");
// Transform:
// obj.<wrappable-property> -->
// __get$(obj, '<wrappable-property>')
const transformer = {
    nodeReplacementRequireTransform: true,
    nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
    condition: (node, parent) => {
        if (node.computed || !parent)
            return false;
        if (node.property.type === esotope_hammerhead_1.Syntax.Identifier && !instrumented_1.shouldInstrumentProperty(node.property.name))
            return false;
        // Skip: super.prop
        if (node.object.type === esotope_hammerhead_1.Syntax.Super)
            return false;
        // Skip: object.prop = value
        if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node)
            return false;
        // Skip: delete object.prop
        if (parent.type === esotope_hammerhead_1.Syntax.UnaryExpression && parent.operator === 'delete')
            return false;
        // Skip: object.prop()
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node)
            return false;
        // Skip: object.prop++ || object.prop-- || ++object.prop || --object.prop
        if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--'))
            return false;
        // Skip: new (object.prop)() || new (object.prop)
        if (parent.type === esotope_hammerhead_1.Syntax.NewExpression && parent.callee === node)
            return false;
        // Skip: for(object.prop in source)
        if (parent.type === esotope_hammerhead_1.Syntax.ForInStatement && parent.left === node)
            return false;
        return true;
    },
    // eslint-disable-next-line
    run: node => node_builder_1.createPropertyGetWrapper(node.property.name, node.object, node.optional)
};
exports.default = transformer;module.exports = exports.default;

