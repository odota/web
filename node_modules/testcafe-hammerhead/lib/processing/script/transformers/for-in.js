"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esotope_hammerhead_1 = require("esotope-hammerhead");
const node_builder_1 = require("../node-builder");
const replace_node_1 = __importDefault(require("./replace-node"));
const temp_variables_1 = __importDefault(require("./temp-variables"));
// Transform:
// for(obj[prop] in src), for(obj.prop in src) -->
// for(const _hh$temp0 in src) { obj[prop] = _hh$temp0; }
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.ForInStatement,
    condition: node => node.left.type === esotope_hammerhead_1.Syntax.MemberExpression,
    run: node => {
        const tempVarAst = node_builder_1.createIdentifier(temp_variables_1.default.generateName());
        const varDeclaration = node_builder_1.createVariableDeclaration('var', [node_builder_1.createVariableDeclarator(tempVarAst)]);
        const assignmentExprStmt = node_builder_1.createAssignmentExprStmt(node.left, tempVarAst);
        if (node.body.type !== esotope_hammerhead_1.Syntax.BlockStatement)
            replace_node_1.default(node.body, node_builder_1.createBlockStatement([assignmentExprStmt, node.body]), node, 'body');
        else
            replace_node_1.default(null, assignmentExprStmt, node.body, 'body');
        replace_node_1.default(node.left, varDeclaration, node, 'left');
        return null;
    },
};
exports.default = transformer;module.exports = exports.default;

