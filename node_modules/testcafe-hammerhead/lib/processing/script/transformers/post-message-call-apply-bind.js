"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
const replace_node_1 = __importDefault(require("./replace-node"));
const INVOCATION_FUNC_NAME_RE = /^(call|apply|bind)$/;
// Transform:
// postMessage.call(ctx, script);
// postMessage.apply(ctx, script);
// postMessage.bind(...); -->
// __get$PostMessage(postMessage).call(ctx, script);
// __get$PostMessage(postMessage).apply(ctx, script);
// __get$PostMessage(postMessage).bind(...);
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
    condition: node => {
        if (node.callee.type === esotope_hammerhead_1.Syntax.MemberExpression && node.callee.property.type === esotope_hammerhead_1.Syntax.Identifier &&
            INVOCATION_FUNC_NAME_RE.test(node.callee.property.name)) {
            // postMessage.<call|apply>(ctx, script, ...)
            if (node.arguments.length < 2 && node.callee.property.name !== 'bind')
                return false;
            const obj = node.callee.object;
            // obj.postMessage.<meth>(), obj[postMessage].<meth>(),
            if (obj.type === esotope_hammerhead_1.Syntax.MemberExpression &&
                (obj.property.type === esotope_hammerhead_1.Syntax.Identifier && obj.property.name ||
                    obj.property.type === esotope_hammerhead_1.Syntax.Literal && obj.property.value) === 'postMessage')
                return true;
            // postMessage.<meth>()
            if (obj.type === esotope_hammerhead_1.Syntax.Identifier && obj.name === 'postMessage')
                return true;
        }
        return false;
    },
    run: node => {
        const callee = node.callee;
        const getPostMessageNode = node_builder_1.createGetPostMessageMethodCall(callee.object);
        replace_node_1.default(callee.object, getPostMessageNode, callee, 'object');
        return null;
    },
};
exports.default = transformer;module.exports = exports.default;

