"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
const instrumented_1 = require("../instrumented");
// Transform:
// val1 += val2
// --> val1 = val1 + val2
const transformer = {
    nodeReplacementRequireTransform: true,
    nodeTypes: esotope_hammerhead_1.Syntax.AssignmentExpression,
    condition: node => {
        if (node.operator !== '+=')
            return false;
        const left = node.left;
        // location
        if (left.type === esotope_hammerhead_1.Syntax.Identifier)
            return instrumented_1.shouldInstrumentProperty(left.name);
        if (left.type === esotope_hammerhead_1.Syntax.MemberExpression) {
            // something['location'] or something[propname]
            if (left.computed) {
                return left.property.type === esotope_hammerhead_1.Syntax.Literal
                    ? instrumented_1.shouldInstrumentProperty(left.property.value)
                    : left.property.type !== esotope_hammerhead_1.Syntax.UpdateExpression;
            }
            // something.location
            else if (left.property.type === esotope_hammerhead_1.Syntax.Identifier)
                return instrumented_1.shouldInstrumentProperty(left.property.name);
        }
        return false;
    },
    run: node => node_builder_1.createExpandedConcatOperation(node.left, node.right),
};
exports.default = transformer;module.exports = exports.default;

