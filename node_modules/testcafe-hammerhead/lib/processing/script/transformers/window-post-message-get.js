"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const instruction_1 = __importDefault(require("../instruction"));
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
// Transform:
// const foo = window.postMessage; foo = window.postMessage; { _postMessage: window.postMessage }; return window.postMessage;
// -->
// const foo = _get$PostMessage(window.postMessage); foo = _get$PostMessage(window.postMessage); { _postMessage: _get$PostMessage(window.postMessage) }; return _get$PostMessage(window.postMessage);
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
    condition: (node, parent) => {
        if (!parent)
            return false;
        // Skip: window.postMessage.field
        if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression && (parent.property === node || parent.object === node))
            return false;
        // Skip: window.postMessage()
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node)
            return false;
        // Skip: window.postMessage = 1, window["postMessage"] = 1
        if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node)
            return false;
        // Skip already transformed: __get$PostMessage(window.postMessage), __get$PostMessage(window["postMessage"])
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier &&
            parent.callee.name === instruction_1.default.getPostMessage)
            return false;
        // window.postMessage
        if (node.property.type === esotope_hammerhead_1.Syntax.Identifier && node.property.name === 'postMessage')
            return true;
        // window['postMessage']
        if (node.property.type === esotope_hammerhead_1.Syntax.Literal && node.property.value === 'postMessage')
            return true;
        return false;
    },
    run: node_builder_1.createGetPostMessageMethodCall,
};
exports.default = transformer;module.exports = exports.default;

