"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_builder_1 = require("../node-builder");
const instruction_1 = __importDefault(require("../instruction"));
const esotope_hammerhead_1 = require("esotope-hammerhead");
// Transform:
// location -->
// __get$Loc(location)
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.Identifier,
    condition: (node, parent) => {
        if (node.name !== 'location' || !parent)
            return false;
        // Skip: const location = value;
        if (parent.type === esotope_hammerhead_1.Syntax.VariableDeclarator && parent.id === node)
            return false;
        // Skip: location = value || function x (location = value) { ... }
        if ((parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression || parent.type === esotope_hammerhead_1.Syntax.AssignmentPattern) &&
            parent.left === node)
            return false;
        // Skip: function location() {}
        if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration) &&
            parent.id === node)
            return false;
        // Skip: object.location || location.field
        if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression && parent.property === node)
            return false;
        // Skip: { location: value }
        if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.key === node)
            return false;
        // Skip: { location }
        if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.value === node && parent.shorthand)
            return false;
        // Skip: location++ || location-- || ++location || --location
        if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--'))
            return false;
        // Skip: function (location) { ... } || function func(location) { ... } || location => { ... }
        if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration ||
            parent.type === esotope_hammerhead_1.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1)
            return false;
        // Skip already transformed: __get$Loc(location)
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier &&
            parent.callee.name === instruction_1.default.getLocation)
            return false;
        // Skip: class X { location () {} }
        if (parent.type === esotope_hammerhead_1.Syntax.MethodDefinition)
            return false;
        // Skip: class location { x () {} }
        if (parent.type === esotope_hammerhead_1.Syntax.ClassDeclaration)
            return false;
        // Skip: function x (...location) {}
        if (parent.type === esotope_hammerhead_1.Syntax.RestElement)
            return false;
        // Skip: export { location } from "module";
        if (parent.type === esotope_hammerhead_1.Syntax.ExportSpecifier)
            return false;
        // Skip: import { location } from "module";
        if (parent.type === esotope_hammerhead_1.Syntax.ImportSpecifier)
            return false;
        return true;
    },
    run: node_builder_1.createLocationGetWrapper,
};
exports.default = transformer;module.exports = exports.default;

