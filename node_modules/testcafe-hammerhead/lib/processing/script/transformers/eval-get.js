"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const instruction_1 = __importDefault(require("../instruction"));
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
// Transform:
// const foo = eval; foo = eval; { _eval: eval }; return eval;
// -->
// const foo = _get$Eval(eval); foo = _get$Eval(eval); { _eval: _get$Eval(eval) }; return _get$Eval(eval);
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.Identifier,
    condition: (node, parent) => {
        if (node.name === 'eval' && parent) {
            // Skip: eval()
            if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node)
                return false;
            // Skip: class X { eval () {} }
            if (parent.type === esotope_hammerhead_1.Syntax.MethodDefinition)
                return false;
            // Skip: class eval { x () {} }
            if (parent.type === esotope_hammerhead_1.Syntax.ClassDeclaration)
                return false;
            // Skip: window.eval, eval.call
            if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression)
                return false;
            // Skip: function eval () { ... }
            if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration) &&
                parent.id === node)
                return false;
            // Skip: function (eval) { ... } || function func(eval) { ... } || eval => { ... }
            if ((parent.type === esotope_hammerhead_1.Syntax.FunctionExpression || parent.type === esotope_hammerhead_1.Syntax.FunctionDeclaration ||
                parent.type === esotope_hammerhead_1.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1)
                return false;
            // Skip: { eval: value }
            if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.key === node)
                return false;
            // Skip: { eval }
            if (parent.type === esotope_hammerhead_1.Syntax.Property && parent.value === node && parent.shorthand)
                return false;
            // Skip: eval = value || function x (eval = value) { ... }
            if ((parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression || parent.type === esotope_hammerhead_1.Syntax.AssignmentPattern) &&
                parent.left === node)
                return false;
            // Skip: const eval = value;
            if (parent.type === esotope_hammerhead_1.Syntax.VariableDeclarator && parent.id === node)
                return false;
            // Skip: eval++ || eval-- || ++eval || --eval
            if (parent.type === esotope_hammerhead_1.Syntax.UpdateExpression && (parent.operator === '++' || parent.operator === '--'))
                return false;
            // Skip already transformed: __get$Eval(eval)
            if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier &&
                parent.callee.name === instruction_1.default.getEval)
                return false;
            // Skip: function x (...eval) {}
            if (parent.type === esotope_hammerhead_1.Syntax.RestElement)
                return false;
            // Skip: export { eval } from "module";
            if (parent.type === esotope_hammerhead_1.Syntax.ExportSpecifier)
                return false;
            // Skip: import { eval } from "module";
            if (parent.type === esotope_hammerhead_1.Syntax.ImportSpecifier)
                return false;
            return true;
        }
        return false;
    },
    run: node_builder_1.createGetEvalMethodCall,
};
exports.default = transformer;module.exports = exports.default;

