"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const instruction_1 = __importDefault(require("../instruction"));
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
// Transform:
// const foo = window.eval; foo = window.eval; { _eval: window.eval }; return window.eval;
// -->
// const foo = _get$Eval(window.eval); foo = _get$Eval(window.eval); { _eval: _get$Eval(window.eval) }; return _get$Eval(window.eval);
const transformer = {
    nodeReplacementRequireTransform: false,
    nodeTypes: esotope_hammerhead_1.Syntax.MemberExpression,
    condition: (node, parent) => {
        if (!parent)
            return false;
        // Skip: window.eval.field
        if (parent.type === esotope_hammerhead_1.Syntax.MemberExpression && (parent.property === node || parent.object === node))
            return false;
        // Skip: window.eval()
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee === node)
            return false;
        // Skip: window.eval = 1, window["eval"] = 1
        if (parent.type === esotope_hammerhead_1.Syntax.AssignmentExpression && parent.left === node)
            return false;
        // Skip already transformed: __get$Eval(window.eval), __get$Eval(window["eval"])
        if (parent.type === esotope_hammerhead_1.Syntax.CallExpression && parent.callee.type === esotope_hammerhead_1.Syntax.Identifier &&
            parent.callee.name === instruction_1.default.getEval)
            return false;
        // window.eval
        if (node.property.type === esotope_hammerhead_1.Syntax.Identifier && node.property.name === 'eval')
            return true;
        // window['eval']
        if (node.property.type === esotope_hammerhead_1.Syntax.Literal && node.property.value === 'eval')
            return true;
        return false;
    },
    run: node_builder_1.createGetEvalMethodCall,
};
exports.default = transformer;module.exports = exports.default;

